{"date": "2024-10-19 16:29", "config": {"n_samples": 100, "temperature": 1.0, "min_correct": 10, "max_profile": 20}, "summary": {"dps": 82.35863751376931, "dps_norm": 78.14625766928611, "pass@1": 68.07627118644068}, "eval": {"HumanEval/9": {"dps": null, "dps_norm": null, "pass@1": 1.0, "profiled": []}, "HumanEval/0": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}, {"solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n          return True\n    return False", "matching_cluster_idx": 6}]}, "HumanEval/4": {"dps": 71.09177215189874, "dps_norm": 89.16666666666667, "pass@1": 100.0, "profiled": [{"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(x - mean) for x in numbers]) / len(numbers)", "matching_cluster_idx": 4}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(number - mean) for number in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(numbers)", "matching_cluster_idx": 3}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(number - mean) for number in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(number - mean) for number in numbers) / len(numbers)\n    return mad", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(number - mean) for number in numbers]) / len(numbers)", "matching_cluster_idx": 3}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum([abs(num - mean) for num in numbers]) / len(numbers)", "matching_cluster_idx": 3}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(number - mean) for number in numbers]\n    return sum(absolute_deviations) / len(numbers)", "matching_cluster_idx": 3}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(numbers)", "matching_cluster_idx": 3}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    absolute_deviations = [abs(num - mean) for num in numbers]\n    return sum(absolute_deviations) / len(numbers)", "matching_cluster_idx": 3}, {"solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(num - mean) for num in numbers) / len(numbers)", "matching_cluster_idx": 5}]}, "HumanEval/16": {"dps": 58.13953488372093, "dps_norm": 66.66666666666667, "pass@1": 100.0, "profiled": [{"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    seen_characters = set()\n    for char in string:\n        seen_characters.add(char.lower())\n    return len(seen_characters)", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(char.lower() for char in string))", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(char.lower() for char in string))", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(char.lower() for char in string))", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(char.lower() for char in string))", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    seen_characters = set()\n    for char in string:\n      seen_characters.add(char.lower())\n    return len(seen_characters)", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    seen_characters = set()\n    for char in string:\n        seen_characters.add(char.lower())\n    return len(seen_characters)", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    seen_characters = set()\n    for char in string:\n        seen_characters.add(char.lower())\n    return len(seen_characters)", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(char.lower() for char in string))", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    distinct_chars = set()\n    for char in string:\n        distinct_chars.add(char.lower())  \n    return len(distinct_chars)", "matching_cluster_idx": 2}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}, {"solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    return len(set(string.lower()))", "matching_cluster_idx": 8}]}, "HumanEval/20": {"dps": 25.012106537530265, "dps_norm": 47.22222222222222, "pass@1": 100.0, "profiled": [{"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(closest_pair[0] - closest_pair[1])\n    \n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                closest_pair = (numbers[i], numbers[j])\n                min_distance = distance\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List must contain at least two numbers\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        difference = abs(numbers[i] - numbers[j])\n        if difference < min_difference:\n          min_difference = difference\n          closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"Input list must contain at least two elements\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n    \n    for i in range(len(numbers)):\n      for j in range(i+1, len(numbers)):\n        distance = abs(numbers[i] - numbers[j])\n        if distance < min_distance:\n          min_distance = distance\n          closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List should have at least two elements\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            difference = abs(numbers[i] - numbers[j])\n            if difference < min_difference:\n                closest_pair = (numbers[i], numbers[j])\n                min_difference = difference\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List must contain at least two numbers.\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_difference = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        difference = abs(numbers[i] - numbers[j])\n        if difference < min_difference:\n          closest_pair = (numbers[i], numbers[j])\n          min_difference = difference\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(len(numbers)):\n      for j in range(i+1, len(numbers)):\n        diff = abs(numbers[i] - numbers[j])\n        if diff < min_diff:\n          min_diff = diff\n          closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List must contain at least two numbers.\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        distance = abs(numbers[i] - numbers[j])\n        if distance < min_distance:\n          closest_pair = (numbers[i], numbers[j])\n          min_distance = distance\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    numbers.sort()\n    closest = (numbers[0], numbers[1])\n    min_diff = abs(numbers[1] - numbers[0])\n    for i in range(2, len(numbers)):\n        diff = abs(numbers[i] - numbers[i - 1])\n        if diff < min_diff:\n            min_diff = diff\n            closest = (numbers[i - 1], numbers[i])\n    return closest", "matching_cluster_idx": 8}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"Input list must have at least two elements.\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        distance = abs(numbers[i] - numbers[j])\n        if distance < min_distance:\n          closest_pair = (numbers[i], numbers[j])\n          min_distance = distance\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List must contain at least two numbers\")\n    \n    min_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        diff = abs(numbers[i] - numbers[j])\n        if diff < min_diff:\n          min_diff = diff\n          closest_pair = (numbers[i], numbers[j])\n    \n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List must contain at least two numbers.\")\n    closest = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        diff = abs(numbers[i] - numbers[j])\n        if diff < min_diff:\n          min_diff = diff\n          closest = (numbers[i], numbers[j])\n    return tuple(sorted(closest))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List must contain at least two numbers.\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        distance = abs(numbers[i] - numbers[j])\n        if distance < min_distance:\n          min_distance = distance\n          closest_pair = (numbers[i], numbers[j])\n    \n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two numbers.\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must contain at least two numbers.\")\n\n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                closest_pair = (numbers[i], numbers[j])\n                min_distance = distance\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"Input list must contain at least two numbers.\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"List must contain at least two numbers.\")\n    closest_pair = (numbers[0], numbers[1])\n    min_diff = abs(numbers[0] - numbers[1])\n    for i in range(len(numbers)):\n      for j in range(i + 1, len(numbers)):\n        diff = abs(numbers[i] - numbers[j])\n        if diff < min_diff:\n          min_diff = diff\n          closest_pair = (numbers[i], numbers[j])\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two elements.\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                closest_pair = (numbers[i], numbers[j])\n                min_distance = distance\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must contain at least two numbers\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}, {"solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n      raise ValueError(\"Input list must contain at least two numbers.\")\n    \n    closest_pair = (numbers[0], numbers[1])\n    min_distance = abs(numbers[0] - numbers[1])\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            distance = abs(numbers[i] - numbers[j])\n            if distance < min_distance:\n                min_distance = distance\n                closest_pair = (numbers[i], numbers[j])\n\n    return tuple(sorted(closest_pair))", "matching_cluster_idx": 3}]}, "HumanEval/24": {"dps": 78.2312925170068, "dps_norm": 50.0, "pass@1": 100.0, "profiled": [{"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):  # Iterate from n/2 down to 1\n        if n % i == 0:\n            return i \n    return 1 # If no divisors found, return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n      if n % i == 0:\n        return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n      if n % i == 0:\n        return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n      if n % i == 0:\n        return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n      if n % i == 0:\n        return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n//2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}, {"solution": "def largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n // 2, 0, -1):  \n        if n % i == 0:\n            return i\n    return 1", "matching_cluster_idx": 3}]}, "HumanEval/26": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "HumanEval/31": {"dps": 34.936708860759495, "dps_norm": 63.75, "pass@1": 100.0, "profiled": [{"solution": "def is_prime(n):\n  \"\"\"Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  False\n  >>> is_prime(101)\n  True\n  >>> is_prime(11)\n  True\n  >>> is_prime(13441)\n  True\n  >>> is_prime(61)\n  True\n  >>> is_prime(4)\n  False\n  >>> is_prime(1)\n  False\n  \"\"\"\n  # Prime numbers are greater than 1\n  if n <= 1:\n    return False\n  # Check if n is divisible by any number from 2 to the square root of n\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n  \"\"\"Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  False\n  >>> is_prime(101)\n  True\n  >>> is_prime(11)\n  True\n  >>> is_prime(13441)\n  True\n  >>> is_prime(61)\n  True\n  >>> is_prime(4)\n  False\n  >>> is_prime(1)\n  False\n  \"\"\"\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n      return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n  \"\"\"Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  False\n  >>> is_prime(101)\n  True\n  >>> is_prime(11)\n  True\n  >>> is_prime(13441)\n  True\n  >>> is_prime(61)\n  True\n  >>> is_prime(4)\n  False\n  >>> is_prime(1)\n  False\n  \"\"\"\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n  \"\"\"Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  False\n  >>> is_prime(101)\n  True\n  >>> is_prime(11)\n  True\n  >>> is_prime(13441)\n  True\n  >>> is_prime(61)\n  True\n  >>> is_prime(4)\n  False\n  >>> is_prime(1)\n  False\n  \"\"\"\n  # Prime numbers are greater than 1\n  if n <= 1:\n    return False\n  # Check if n is divisible by any number from 2 to the square root of n\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n  \"\"\"Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  False\n  >>> is_prime(101)\n  True\n  >>> is_prime(11)\n  True\n  >>> is_prime(13441)\n  True\n  >>> is_prime(61)\n  True\n  >>> is_prime(4)\n  False\n  >>> is_prime(1)\n  False\n  \"\"\"\n  # Prime numbers are greater than 1\n  if n <= 1:\n    return False\n  # Check if n is divisible by any number from 2 to the square root of n\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Handle cases for 1, 2, and negative numbers\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    \n    # Check divisibility by 2 and 3\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "matching_cluster_idx": 6}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n      return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n        return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n      return False\n    for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n        return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n  \"\"\"Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  False\n  >>> is_prime(101)\n  True\n  >>> is_prime(11)\n  True\n  >>> is_prime(13441)\n  True\n  >>> is_prime(61)\n  True\n  >>> is_prime(4)\n  False\n  >>> is_prime(1)\n  False\n  \"\"\"\n  # Prime numbers are greater than 1\n  if n <= 1:\n    return False\n  # Check if n is divisible by any number from 2 to the square root of n\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    # Prime numbers are greater than 1\n    if n <= 1:\n        return False\n    # Check if n is divisible by any number from 2 to the square root of n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "matching_cluster_idx": 4}]}, "HumanEval/33": {"dps": null, "dps_norm": null, "pass@1": 5.0, "profiled": []}, "HumanEval/34": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}, {"solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "matching_cluster_idx": 4}]}, "HumanEval/36": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "HumanEval/37": {"dps": 96.70212765957447, "dps_norm": 93.5, "pass@1": 96.0, "profiled": [{"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    new_list = l.copy()  \n    new_list[::2] = sorted(l[::2])\n    return new_list", "matching_cluster_idx": 9}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted(l[::2])  \n    result = list(l)\n    for i in range(0, len(l), 2):\n      result[i] = l_sorted.pop(0)\n    return result", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_new = l.copy()\n    l_new[::2] = sorted(l[::2])\n    return l_new", "matching_cluster_idx": 9}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted(l[::2])\n    l_new = list(l)\n    for i in range(0, len(l), 2):\n      l_new[i] = l_sorted[i//2]\n    return l_new", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted(l[::2])\n    l_new = list(l)\n    for i in range(0, len(l), 2):\n        l_new[i] = l_sorted.pop(0)\n    return l_new", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    l_new = l[:]\n    for i in range(len(l_sorted)):\n        l_new[i * 2] = l_sorted[i]\n    return l_new", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    sorted_even = sorted(l[::2])\n    l_prime = l[:]\n    for i in range(0, len(l), 2):\n      l_prime[i] = sorted_even.pop(0)\n    return l_prime", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_new = l.copy()  \n    l_new[::2] = sorted(l[::2])  \n    return l_new", "matching_cluster_idx": 9}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = l[:].copy()\n    l_sorted[::2] = sorted(l[::2]) \n    return l_sorted", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted(l[::2])\n    l_prime = l.copy() \n    for i in range(0, len(l), 2):\n      l_prime[i] = l_sorted[i // 2]\n    return l_prime", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted([l[i] for i in range(len(l)) if i % 2 == 0]) \n    result = []\n    for i in range(len(l)):\n      if i % 2 == 0:\n        result.append(l_sorted.pop(0))\n      else: \n        result.append(l[i])\n    return result", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_new = l.copy()\n    l_new[::2] = sorted(l[::2])\n    return l_new", "matching_cluster_idx": 9}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    l_prime = l[:]\n    for i in range(len(l_prime)):\n        if i % 2 == 0:\n            l_prime[i] = l_sorted[i // 2]\n    return l_prime", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = l[:].copy()\n    l_sorted[::2] = sorted(l[::2])\n    return l_sorted", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_new = l.copy()\n    l_new[0::2] = sorted(l[0::2]) \n    return l_new", "matching_cluster_idx": 9}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted(l[::2]) \n    l_new = l[:]\n    for i in range(0, len(l), 2):\n        l_new[i] = l_sorted[i//2]\n    return l_new", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_new = l[:]\n    l_new[::2] = sorted(l[::2])\n    return l_new", "matching_cluster_idx": 9}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_prime = l.copy()\n    l_prime[0::2] = sorted(l[0::2])\n    return l_prime", "matching_cluster_idx": 9}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = sorted(l[::2])\n    l_new = list(l)\n    for i in range(0, len(l_new), 2):\n        l_new[i] = l_sorted.pop(0)\n    return l_new", "matching_cluster_idx": 8}, {"solution": "def sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n    l_sorted = l[::2]\n    l_sorted.sort()\n    for i in range(0, len(l_sorted)):\n      l[2*i] = l_sorted[i]\n    return l", "matching_cluster_idx": 8}]}, "HumanEval/49": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 51.0, "profiled": [{"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}, {"solution": "def modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)", "matching_cluster_idx": 4}]}, "HumanEval/51": {"dps": 96.13526570048309, "dps_norm": 75.0, "pass@1": 100.0, "profiled": [{"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n      if char not in vowels:\n        result += char\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n      if char not in vowels:\n        result += char\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([letter for letter in text if letter not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n  \"\"\"\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  \"\"\"\n  vowels = 'aeiouAEIOU'\n  result = ''\n  for char in text:\n    if char not in vowels:\n      result += char\n  return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([letter for letter in text if letter not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    return ''.join([letter for letter in text if letter not in vowels])", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in text if char not in vowels])\n    return result", "matching_cluster_idx": 5}, {"solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result", "matching_cluster_idx": 5}]}, "HumanEval/54": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 53.0, "profiled": [{"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}, {"solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n    return set(s0) == set(s1)", "matching_cluster_idx": 6}]}, "HumanEval/58": {"dps": 92.51968503937007, "dps_norm": 83.33333333333333, "pass@1": 100.0, "profiled": [{"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = set(l1).intersection(set(l2))\n    return sorted(list(common_elements))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}, {"solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "matching_cluster_idx": 4}]}, "HumanEval/59": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            largest_factor = i\n            n //= i\n        i += 1\n    if n > 1:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > 1:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n        if n % largest_factor == 0:\n            n //= largest_factor\n        else:\n            largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2 \n    while n % largest_factor == 0:\n      n //= largest_factor\n    for i in range(3, int(n**0.5) + 1, 2):\n      while n % i == 0:\n        largest_factor = i\n        n //= i\n    if n > 2:\n      largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 2\n    while n > 1:\n      if n % largest_factor == 0:\n        n //= largest_factor\n      else:\n        largest_factor += 1\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n      while n % i == 0:\n        largest_factor = i\n        n //= i\n      i += 1\n    if n > largest_factor:\n      largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}, {"solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    largest_factor = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            largest_factor = i\n            n //= i\n        else:\n            i += 1\n    if n > largest_factor:\n        largest_factor = n\n    return largest_factor", "matching_cluster_idx": 8}]}, "HumanEval/64": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "HumanEval/74": {"dps": 98.04878048780488, "dps_norm": 88.88888888888889, "pass@1": 100.0, "profiled": [{"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    len1 = sum(len(x) for x in lst1)\n    len2 = sum(len(x) for x in lst2)\n    if len1 < len2:\n      return lst1\n    elif len2 < len1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n      return lst1\n    elif total_chars_lst2 < total_chars_lst1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n    if total_chars1 < total_chars2:\n      return lst1\n    elif total_chars2 < total_chars1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    sum1 = sum(len(s) for s in lst1)\n    sum2 = sum(len(s) for s in lst2)\n    if sum1 < sum2:\n      return lst1\n    elif sum2 < sum1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    sum1 = sum(len(word) for word in lst1)\n    sum2 = sum(len(word) for word in lst2)\n    if sum1 < sum2:\n      return lst1\n    elif sum2 < sum1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    if total1 < total2:\n      return lst1\n    elif total2 < total1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    len1 = sum(len(s) for s in lst1)\n    len2 = sum(len(s) for s in lst2)\n    if len1 < len2:\n        return lst1\n    elif len2 < len1:\n        return lst2\n    else:\n        return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    \n    if total1 < total2:\n      return lst1\n    elif total2 < total1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    if total1 < total2:\n      return lst1\n    elif total2 < total1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    len_lst1 = sum(len(s) for s in lst1)\n    len_lst2 = sum(len(s) for s in lst2)\n    if len_lst1 < len_lst2:\n      return lst1\n    elif len_lst2 < len_lst1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    len1 = sum(len(x) for x in lst1)\n    len2 = sum(len(x) for x in lst2)\n    if len1 < len2:\n      return lst1\n    elif len2 < len1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    len1 = sum(len(word) for word in lst1)\n    len2 = sum(len(word) for word in lst2)\n    if len1 < len2:\n      return lst1\n    elif len2 < len1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total_chars1 = sum(len(word) for word in lst1)\n    total_chars2 = sum(len(word) for word in lst2)\n    if total_chars1 < total_chars2:\n      return lst1\n    elif total_chars2 < total_chars1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    sum1 = sum(len(word) for word in lst1)\n    sum2 = sum(len(word) for word in lst2)\n    \n    if sum1 < sum2:\n      return lst1\n    elif sum2 < sum1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    if total1 < total2:\n      return lst1\n    elif total2 < total1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars2 < total_chars1:\n        return lst2\n    else:\n        return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has\n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    \"\"\"\n    total1 = sum(len(word) for word in lst1)\n    total2 = sum(len(word) for word in lst2)\n    \n    if total1 < total2:\n      return lst1\n    elif total2 < total1:\n      return lst2\n    else: \n      return lst1", "matching_cluster_idx": 7}, {"solution": "def total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2:\n      return lst1\n    elif total2 < total1:\n      return lst2\n    else:\n      return lst1", "matching_cluster_idx": 7}]}, "HumanEval/85": {"dps": 97.02970297029702, "dps_norm": 66.66666666666667, "pass@1": 100.0, "profiled": [{"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n      if lst[i] % 2 == 0:\n        sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n      if lst[i] % 2 == 0:\n        total += lst[i]\n    return total", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1,len(lst),2):\n      if lst[i]%2 == 0:\n        sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n      if lst[i] % 2 == 0:\n        sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):  \n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    return total", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n      if lst[i] % 2 == 0:\n        sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n      if lst[i] % 2 == 0:\n        sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n      if lst[i] % 2 == 0:\n        sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            sum += lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1,len(lst),2):\n        if lst[i]%2 == 0:\n            sum+=lst[i]\n    return sum", "matching_cluster_idx": 3}, {"solution": "def add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    sum = 0\n    for i in range(1, len(lst), 2):\n      if lst[i] % 2 == 0:\n        sum += lst[i]\n    return sum", "matching_cluster_idx": 3}]}, "HumanEval/86": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "HumanEval/87": {"dps": 52.377521613832855, "dps_norm": 47.857142857142854, "pass@1": 21.0, "profiled": [{"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n      for col_index, element in enumerate(row):\n        if element == x:\n          result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  # Sort by row\n    for row_index in range(len(result)):\n      for j in range(row_index + 1, len(result)):\n        if result[row_index][0] == result[j][0]:\n          if result[row_index][1] < result[j][1]:\n            result[row_index], result[j] = result[j], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n      for col_index, element in enumerate(row):\n        if element == x:\n          result.append((row_index, col_index))\n    result.sort(key=lambda x: (x[0], -x[1])) # Sort by row ascending, then column descending\n    return result", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n      for col_index, value in enumerate(row):\n        if value == x:\n          result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0]) # Sort by row\n    for row_index in range(len(result)):\n      for other_row_index in range(row_index + 1, len(result)):\n        if result[row_index][0] == result[other_row_index][0]:\n          if result[row_index][1] < result[other_row_index][1]:\n            result[row_index], result[other_row_index] = result[other_row_index], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: (item[0], -item[1]))  \n    return result", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  # Sort by row\n    for row_index in range(len(result)):\n      for inner_index in range(len(result) - 1 - row_index):\n          if result[inner_index][0] == result[inner_index + 1][0] and result[inner_index][1] < result[inner_index + 1][1]:\n              result[inner_index], result[inner_index + 1] = result[inner_index + 1], result[inner_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n      for col_index, value in enumerate(row):\n        if value == x:\n          result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  \n    for row_index in range(len(result)):\n      for col_index in range(len(result)-1):\n        if result[col_index][0] == result[col_index + 1][0] and result[col_index][1] < result[col_index + 1][1]:\n          result[col_index], result[col_index + 1] = result[col_index + 1], result[col_index]\n    return result", "matching_cluster_idx": 0}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  # Sort by row\n    for row_index in range(len(result)):\n        for col_index in range(row_index + 1, len(result)):\n            if result[row_index][0] == result[col_index][0] and result[row_index][1] < result[col_index][1]:\n                result[row_index], result[col_index] = result[col_index], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda x: x[0])  # Sort by row\n    for row_index in range(len(result)):\n        for j in range(row_index+1, len(result)):\n            if result[row_index][0] == result[j][0]:\n                if result[row_index][1] < result[j][1]:\n                    result[row_index], result[j] = result[j], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: (item[0], -item[1]))\n    return result", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n      for col_index, element in enumerate(row):\n        if element == x:\n          result.append((row_index, col_index))\n    result.sort(key=lambda item: (item[0], -item[1])) \n    return result", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    return sorted(result, key=lambda item: (item[0], -item[1]))", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  # Sort by row\n    for row_index in range(len(result)):\n        for j in range(row_index + 1, len(result)):\n            if result[row_index][0] == result[j][0]:\n                if result[row_index][1] < result[j][1]:\n                    result[row_index], result[j] = result[j], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  # Sort by row\n    for row_index in range(len(result)):\n        for j in range(row_index + 1, len(result)):\n            if result[row_index][0] == result[j][0] and result[row_index][1] < result[j][1]:\n                result[row_index], result[j] = result[j], result[row_index]  # Sort by column\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    coordinates = []\n    for row_index, row in enumerate(lst):\n      for col_index, value in enumerate(row):\n        if value == x:\n          coordinates.append((row_index, col_index))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, value in enumerate(row):\n            if value == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  # Sort by row\n    for row_index in range(len(result)):\n        for j in range(row_index+1, len(result)):\n            if result[row_index][0] == result[j][0]:\n                if result[row_index][1] < result[j][1]:\n                    result[row_index], result[j] = result[j], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    return sorted(result, key=lambda item: (item[0], -item[1]))", "matching_cluster_idx": 3}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n      for col_index, element in enumerate(row):\n        if element == x:\n          result.append((row_index, col_index))\n    result.sort(key=lambda x: x[0])  # Sort by row\n    for row_index in range(len(result)):\n      for i in range(row_index + 1, len(result)):\n        if result[row_index][0] == result[i][0]:\n          if result[row_index][1] < result[i][1]:\n            result[row_index], result[i] = result[i], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    result.sort(key=lambda item: item[0])  \n    for row_index in range(len(result)):\n        for j in range(row_index + 1, len(result)):\n            if result[row_index][0] == result[j][0]:\n                if result[row_index][1] < result[j][1]:\n                    result[row_index], result[j] = result[j], result[row_index]\n    return result", "matching_cluster_idx": 2}, {"solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for row_index, row in enumerate(lst):\n        for col_index, element in enumerate(row):\n            if element == x:\n                result.append((row_index, col_index))\n    return sorted(result, key=lambda item: (item[0], -item[1]))", "matching_cluster_idx": 3}]}, "HumanEval/89": {"dps": 96.64948453608248, "dps_norm": 28.571428571428573, "pass@1": 48.0, "profiled": [{"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result.append(shifted_char)\n    return ''.join(result)", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n      if char.isalpha():\n        start = ord('a') if char.islower() else ord('A')\n        shifted_char = chr((ord(char) - start + 4) % 26 + start)\n      else:\n        shifted_char = char\n      result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for letter in s:\n        if letter.isalpha():\n            start = ord('a') if letter.islower() else ord('A')\n            shifted_letter = chr((ord(letter) - start + 4) % 26 + start)\n        else:\n            shifted_letter = letter\n        result += shifted_letter\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result.append(shifted_char)\n    return ''.join(result)", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result.append(shifted_char)\n    return ''.join(result)", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n      if char.isalpha():\n        start = ord('a') if char.islower() else ord('A')\n        shifted_char = chr((ord(char) - start + 4) % 26 + start)\n      else:\n        shifted_char = char\n      result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start) \n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result += shifted_char\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for letter in s:\n        if letter.isalpha():\n            start = ord('a') if letter.islower() else ord('A')\n            shifted_letter = chr((ord(letter) - start + 4) % 26 + start)\n        else:\n            shifted_letter = letter\n        result += shifted_letter\n    return result", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = []\n    for char in s:\n        if char.isalpha():\n            start = ord('a') if char.islower() else ord('A')\n            shifted_char = chr((ord(char) - start + 4) % 26 + start)\n        else:\n            shifted_char = char\n        result.append(shifted_char)\n    return ''.join(result)", "matching_cluster_idx": 1}, {"solution": "def encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n    result = ''\n    for letter in s:\n        if letter.isalpha():\n            start = ord('a') if letter.islower() else ord('A')\n            shifted_letter = chr((ord(letter) - start + 4) % 26 + start)\n        else:\n            shifted_letter = letter\n        result += shifted_letter\n    return result", "matching_cluster_idx": 1}]}, "HumanEval/90": {"dps": null, "dps_norm": null, "pass@1": 5.0, "profiled": []}, "HumanEval/113": {"dps": null, "dps_norm": null, "pass@1": 3.0, "profiled": []}, "HumanEval/119": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "HumanEval/120": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "HumanEval/121": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "HumanEval/149": {"dps": 85.82677165354332, "dps_norm": 57.142857142857146, "pass@1": 100.0, "profiled": [{"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_lst, key=lambda word: (len(word), word))", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda x: (len(x), x))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_list, key=lambda word: (len(word), word))", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda word: (len(word), word))", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    return sorted(filtered_list, key=lambda word: (len(word), word))", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word)) \n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word)) \n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    return sorted(\n        [word for word in lst if len(word) % 2 == 0],\n        key=lambda word: (len(word), word)\n    )", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n  \"\"\"Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  \"\"\"\n  result = [word for word in lst if len(word) % 2 == 0]\n  result.sort(key=lambda word: (len(word), word))\n  return result", "matching_cluster_idx": 3}, {"solution": "def sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    result = [word for word in lst if len(word) % 2 == 0]\n    result.sort(key=lambda word: (len(word), word))\n    return result", "matching_cluster_idx": 3}]}, "Mbpp/3": {"dps": 55.932203389830505, "dps_norm": 75.0, "pass@1": 100.0, "profiled": [{"solution": "def is_not_prime(n):\n  \"\"\"\n  Identifies if a number is not a prime number.\n\n  Args:\n    n: The number to check.\n\n  Returns:\n    True if n is not a prime number, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Identifies non-prime numbers.\n\n  Args:\n      n: An integer.\n\n  Returns:\n      True if n is not a prime number, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Identifies if a number is not a prime number.\n\n  Args:\n    n: The number to check.\n\n  Returns:\n    True if n is not a prime number, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(num):\n  \"\"\"\n  Identifies non-prime numbers.\n\n  Args:\n    num: The number to check.\n\n  Returns:\n    True if the number is not prime, False otherwise.\n  \"\"\"\n  if num <= 1:\n    return True\n  for i in range(2, int(num**0.5) + 1):\n    if num % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Identify if a number is not a prime number.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if n is not a prime number, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(num):\n    \"\"\"\n    This function checks if a given number is not a prime number.\n\n    Args:\n      num: An integer.\n\n    Returns:\n      True if the number is not prime, False otherwise.\n    \"\"\"\n    if num <= 1:\n      return True\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return True\n    return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(number):\n  \"\"\"\n  Identifies if a number is not a prime number.\n\n  Args:\n    number: The number to check.\n\n  Returns:\n    True if the number is not a prime number, False otherwise.\n  \"\"\"\n  if number <= 1:\n    return True\n  for i in range(2, int(number**0.5) + 1):\n    if number % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Identifies non-prime numbers.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if n is not a prime number, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(num):\n  \"\"\"\n  Identifies non-prime numbers.\n\n  Args:\n      num: The number to check.\n\n  Returns:\n      True if the number is not prime, False otherwise.\n  \"\"\"\n  if num <= 1:\n    return True\n  for i in range(2, int(num**0.5) + 1):\n    if num % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Identify if a number is not prime.\n\n  Args:\n    n: The number to check.\n\n  Returns:\n    True if n is not prime, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  This function checks if a number is not prime.\n\n  Args:\n      n: An integer.\n\n  Returns:\n      True if n is not prime, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"Identifies non-prime numbers.\n\n  Args:\n    n: The number to check.\n\n  Returns:\n    True if n is not a prime number, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(number):\n  \"\"\"\n  Identify if a number is not prime.\n  \n  Args:\n    number: The number to check.\n\n  Returns:\n    True if the number is not prime, False otherwise.\n  \"\"\"\n  if number <= 1:\n    return True\n  for i in range(2, int(number**0.5) + 1):\n    if number % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(num):\n  \"\"\"\n  Identify non-prime numbers.\n\n  Args:\n    num: An integer to check.\n\n  Returns:\n    True if num is not a prime number, False otherwise.\n  \"\"\"\n  if num <= 1:\n    return True\n  for i in range(2, int(num**0.5) + 1):\n    if num % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  This function checks if a number is not prime.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if n is not prime, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(num):\n  \"\"\"\n  Identify if a number is not a prime number.\n\n  Args:\n    num: An integer.\n\n  Returns:\n    True if the number is not prime, False otherwise.\n  \"\"\"\n  if num <= 1:\n    return True\n  for i in range(2, int(num**0.5) + 1):\n    if num % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Identifies if a number is not a prime number.\n\n  Args:\n      n: The number to check.\n\n  Returns:\n      True if the number is not prime, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Determines if a number is not prime.\n\n  Args:\n    n: The number to check.\n\n  Returns:\n    True if the number is not prime, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True  \n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(n):\n  \"\"\"\n  Identifies if a number is not prime.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if n is not prime, False otherwise.\n  \"\"\"\n  if n <= 1:\n    return True\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}, {"solution": "def is_not_prime(num):\n  \"\"\"\n  This function checks if a number is not prime.\n\n  Args:\n      num: The number to be checked.\n\n  Returns:\n      True if the number is not prime, False otherwise.\n  \"\"\"\n  if num <= 1:\n    return True\n  for i in range(2, int(num**0.5) + 1):\n    if num % i == 0:\n      return True\n  return False", "matching_cluster_idx": 5}]}, "Mbpp/4": {"dps": 91.51877133105802, "dps_norm": 82.91666666666666, "pass@1": 100.0, "profiled": [{"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list containing the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a list, in descending order, using a heap.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to find.\n\n  Returns:\n    A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n      nums: A list of integers.\n      n: The number of largest integers to return.\n\n  Returns:\n      A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers from nums, sorted in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 8}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n      nums: A list of integers.\n      n: The number of largest integers to find.\n\n    Returns:\n      A list of the n largest integers in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)\nnums = [25, 35, 22, 85, 14, 65, 75, 22, 58]\nn = 3", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n      nums: A list of integers.\n      n: The number of largest integers to return.\n\n  Returns:\n      A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of numbers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        nums: A list of integers.\n        n: The number of largest integers to find.\n\n    Returns:\n        A list of the n largest integers in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of numbers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n    return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Find the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers from nums, sorted in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Find the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers from nums, sorted in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, \n  returned in descending order.\n  \n  Args:\n      nums: A list of integers.\n      n: The number of largest integers to return.\n\n  Returns:\n      A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers, \n    returned in descending order.\n\n    Args:\n      nums: A list of integers.\n      n: The number of largest integers to find.\n\n    Returns:\n      A list of the n largest integers in descending order.\n    \"\"\"\n    return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to find.\n\n  Returns:\n    A list containing the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}, {"solution": "import heapq\ndef heap_queue_largest(nums, n):\n  \"\"\"\n  Finds the n largest integers from a given list of numbers, returned in descending order.\n\n  Args:\n    nums: A list of integers.\n    n: The number of largest integers to return.\n\n  Returns:\n    A list of the n largest integers in descending order.\n  \"\"\"\n  return heapq.nlargest(n, nums)", "matching_cluster_idx": 9}]}, "Mbpp/9": {"dps": 50.34013605442177, "dps_norm": 50.0, "pass@1": 97.0, "profiled": [{"solution": "def find_Rotations(str1):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n    \n    Args:\n        str1: The input string.\n    \n    Returns:\n        The minimum number of rotations required.\n    \"\"\"\n    n = len(str1)\n    for i in range(1, n):\n        temp = str1[i:] + str1[:i]\n        if temp == str1:\n            return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n    str1: The input string.\n\n  Returns:\n    The minimum number of rotations required.\n  \"\"\"\n  n = len(str1)\n  for i in range(1, n):\n    temp = str1[i:] + str1[:i]  \n    if (temp == str1):\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n  \"\"\"\n  Find the minimum number of rotations (greater than 0) required to get the same string.\n  \"\"\"\n  n = len(str1)\n  for i in range(1, n):\n    temp = str1[i:] + str1[:i]\n    if temp == str1:\n      return i\n\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(s):\n  \"\"\"\n  Finds the minimum number of rotations required to make the string the same.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      The minimum number of rotations required.\n  \"\"\"\n  n = len(s)\n  for i in range(1, n):\n    temp = s[i:] + s[:i]\n    if temp == s:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(s: str) -> int:\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n    \n    Args:\n        s (str): The input string.\n        \n    Returns:\n        int: The minimum number of rotations required.\n\n    Examples:\n        find_Rotations(\"aaaa\") == 1\n    \"\"\"\n    n = len(s)\n    for i in range(1, n):\n      if s == s[i:] + s[:i]:\n        return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n    n = len(str1)\n    for i in range(1, n):\n        temp = str1[i:] + str1[:i]\n        if temp == str1:\n            return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(string):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n\n    Args:\n        string: The input string.\n\n    Returns:\n        The minimum number of rotations required, greater than 0.\n    \"\"\"\n\n    n = len(string)\n    for i in range(1, n):\n        temp = string[i:] + string[:i]\n        if temp == string:\n            return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n    str1: The input string.\n\n  Returns:\n    The minimum number of rotations required.\n  \"\"\"\n  n = len(str1)\n  for i in range(1, n):\n    temp = str1[i:] + str1[:i]\n    if temp == str1:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(s):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      The minimum number of rotations required.\n  \"\"\"\n  n = len(s)\n  for i in range(1, n):\n    temp = s[i:] + s[:i]\n    if temp == s:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(string):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n    string: The input string.\n\n  Returns:\n    The minimum number of rotations required.\n  \"\"\"\n  n = len(string)\n  for i in range(1, n):\n    rotated_string = string[i:] + string[:i]\n    if rotated_string == string:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n\n    Args:\n      str1: A string.\n\n    Returns:\n      The minimum number of rotations required to get the same string.\n    \"\"\"\n    n = len(str1)\n    for i in range(1, n):\n        temp = str1[i:] + str1[:i]  \n        if temp == str1:\n            return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n    \n    Args:\n        str1: The input string.\n    \n    Returns:\n        The minimum number of rotations.\n    \"\"\"\n    n = len(str1)\n    for i in range(1, n):\n        temp = str1[i:] + str1[:i]  \n        if temp == str1:\n            return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n  n = len(str1)\n  for i in range(1, n):\n    temp = str1[i:] + str1[:i]\n    if temp == str1:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n    str1: The input string.\n\n  Returns:\n    The minimum number of rotations required.\n  \"\"\"\n  n = len(str1)\n  for i in range(1, n):\n    temp = str1[i:] + str1[:i]\n    if temp == str1:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n    n = len(str1)\n    for i in range(1, n):\n        temp = str1[i:] + str1[:i]\n        if temp == str1:\n            return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n      str1: The input string.\n\n  Returns:\n      The minimum number of rotations required.\n  \"\"\"\n  n = len(str1)\n  for i in range(1, n):\n    rotated_str = str1[i:] + str1[:i]\n    if rotated_str == str1:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(s):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The minimum number of rotations required.\n  \"\"\"\n  n = len(s)\n  for i in range(1, n):\n    temp = s[i:] + s[:i]\n    if temp == s:\n      return i\n  return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n    n = len(str1)\n    for i in range(1, n):\n        temp = str1[i:] + str1[:i]\n        if (temp == str1):\n            return i\n    return n  # If no rotation results in the same string", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(string):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n    \"\"\"\n    n = len(string)\n    for i in range(1, n):\n        temp = string[i:] + string[:i]\n        if temp == string:\n            return i\n    return n", "matching_cluster_idx": 4}, {"solution": "def find_Rotations(str1):\n  \"\"\"\n  Finds the minimum number of rotations required to get the same string.\n\n  Args:\n    str1: The input string.\n\n  Returns:\n    The minimum number of rotations required.\n  \"\"\"\n  n = len(str1)\n  for i in range(1, n):\n    temp = str1[i:] + str1[:i]\n    if temp == str1:\n      return i \n  return n", "matching_cluster_idx": 4}]}, "Mbpp/11": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 75.0, "profiled": [{"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrences of a given character from a string.\n\n  Args:\n    string: The string to modify.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n\n  first_index = string.find(char)\n  last_index = string.rfind(char)\n\n  if first_index == -1 or last_index == -1:\n    return string  # Character not found, return original string\n\n  return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"Removes the first and last occurrence of a given character from a string.\n\n  Args:\n    string: The string to modify.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n  if char not in string:\n    return string\n\n  first_index = string.find(char)\n  last_index = string.rfind(char)\n\n  if first_index == last_index:\n    return string[:first_index] + string[first_index + 1:]\n  else:\n    return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(str1, char):\n  \"\"\"\n  Removes the first and last occurrence of a given character from a string.\n\n  Args:\n    str1: The input string.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n  if char not in str1:\n    return str1\n  \n  first_index = str1.find(char)\n  last_index = str1.rfind(char)\n\n  if first_index == last_index:\n    return str1[:first_index] + str1[first_index + 1:]\n\n  return str1[:first_index] + str1[first_index + 1:last_index] + str1[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(s, c):\n  \"\"\"\n  Removes the first and last occurrences of a given character from a string.\n\n  Args:\n    s: The string to modify.\n    c: The character to remove.\n\n  Returns:\n    The modified string with the first and last occurrences of 'c' removed.\n  \"\"\"\n\n  if c in s:\n    first_index = s.find(c)\n    last_index = s.rfind(c)\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n  else:\n    return s", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(s, c):\n    \"\"\"\n    Removes the first and last occurrence of a given character from a string.\n\n    Args:\n        s: The input string.\n        c: The character to remove.\n\n    Returns:\n        The string with the first and last occurrences of the character removed.\n    \"\"\"\n    first_index = s.find(c)\n    last_index = s.rfind(c)\n\n    if first_index != -1 and last_index != -1:\n      return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n    else:\n      return s", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(s,char):\n  \"\"\"Removes the first and last occurrences of a given character from the string.\n\n  Args:\n    s: The input string.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n  if char not in s:\n    return s\n  \n  first_index = s.find(char)\n  last_index = s.rfind(char)\n\n  return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrence of a given character from the string.\n\n  Args:\n    string: The input string.\n    char: The character to remove.\n\n  Returns:\n    The modified string with the first and last occurrences of the character removed.\n  \"\"\"\n  if char not in string:\n    return string\n\n  first_index = string.index(char)\n  last_index = string.rindex(char)\n\n  return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrence of a given character from a string.\n\n  Args:\n    string: The string to modify.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed,\n    or the original string if the character is not found.\n  \"\"\"\n  if char in string:\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    if first_index != -1 and last_index != -1:\n      return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]\n    \n  return string", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrence of a given character from a string.\n\n  Args:\n    string: The input string.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n  if char not in string:\n    return string\n  \n  first_index = string.find(char)\n  last_index = string.rfind(char)\n\n  if first_index == last_index:  \n    return string[:first_index] + string[first_index + 1:] \n  else:\n    return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(s, c):\n  \"\"\"\n  Removes the first and last occurrence of a given character from the string.\n\n  Args:\n      s: The input string.\n      c: The character to remove.\n\n  Returns:\n      The string with the first and last occurrences of c removed.\n  \"\"\"\n  if c not in s:\n    return s\n  first_index = s.find(c)\n  last_index = s.rfind(c)\n  return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(s, c):\n  \"\"\"\n  Removes the first and last occurrence of a given character from the string.\n\n  Args:\n    s: The input string.\n    c: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n  first_index = s.find(c)\n  last_index = s.rfind(c)\n\n  if first_index != -1 and last_index != -1:\n    return s[:first_index] + s[first_index + 1:last_index] + s[last_index + 1:]\n  else:\n    return s", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrence of a given character from a string.\n\n  Args:\n    string: The string to modify.\n    char: The character to remove.\n\n  Returns:\n    The modified string with the first and last occurrences of the character removed. \n    If the character does not appear in the string, returns the original string.\n  \"\"\"\n  if char in string:\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    if first_index == last_index:\n      return string[:first_index] + string[first_index+1:]\n    return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n  return string", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(str1, char):\n  \"\"\"\n  Removes the first and last occurrences of a given character from a string.\n\n  Args:\n    str1: The input string.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of char removed.\n  \"\"\"\n  if char not in str1:\n    return str1\n  first_index = str1.find(char)\n  last_index = str1.rfind(char)\n  return str1[:first_index] + str1[first_index+1:last_index] + str1[last_index+1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrences of a given character from a string.\n\n    Args:\n      string: The input string.\n      char: The character to remove.\n\n    Returns:\n      The string with the first and last occurrences of the character removed.\n    \"\"\"\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    if first_index == -1 or last_index == -1:\n      return string  \n\n    return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(s, c):\n    \"\"\"\n    Removes the first and last occurrences of a given character from a string.\n\n    Args:\n      s: The string to modify.\n      c: The character to remove.\n\n    Returns:\n      The modified string with the first and last occurrences of c removed. \n      If c is not found in the string, returns the original string.\n    \"\"\"\n    if c not in s:\n      return s\n    \n    first_index = s.find(c)\n    last_index = s.rfind(c)\n    \n    if first_index == last_index:\n      return s[:first_index] + s[first_index+1:] \n    else:\n      return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrence of a given character from the string.\n\n  Args:\n    string: The string to modify.\n    char: The character to remove.\n\n  Returns:\n    The modified string with the first and last occurrences of the character removed.\n  \"\"\"\n  first_index = string.find(char)\n  last_index = string.rfind(char)\n\n  if first_index == -1 or last_index == -1:\n    return string  # Character not found\n\n  return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(s, char):\n    \"\"\"\n    Removes the first and last occurrences of a given character from the string.\n    \n    Args:\n      s: The input string.\n      char: The character to remove.\n\n    Returns:\n      The string with the first and last occurrences of the character removed.\n    \"\"\"\n    if char not in s:\n      return s\n    \n    first_index = s.find(char)\n    last_index = s.rfind(char)\n    \n    if first_index == last_index:\n      return s[:first_index] + s[first_index+1:]\n    else:\n      return s[:first_index] + s[first_index+1:last_index] + s[last_index+1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrences of a given character from a string.\n\n  Args:\n    string: The input string.\n    char: The character to remove.\n\n  Returns:\n    The modified string with the first and last occurrences of the character removed.\n  \"\"\"\n\n  if char not in string:\n    return string  \n  \n  first_index = string.find(char)\n  last_index = string.rfind(char)\n\n  if first_index == last_index:\n    return string[:first_index] + string[first_index + 1:]\n  else:\n    return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"Removes the first and last occurrence of a given character from the string.\n\n  Args:\n    string: The input string.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n  if char not in string:\n    return string\n  first_index = string.find(char)\n  last_index = string.rfind(char)\n  return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}, {"solution": "def remove_Occ(string, char):\n  \"\"\"\n  Removes the first and last occurrence of a given character from a string.\n\n  Args:\n    string: The input string.\n    char: The character to remove.\n\n  Returns:\n    The string with the first and last occurrences of the character removed.\n  \"\"\"\n  if char not in string:\n    return string\n  first_index = string.index(char)\n  last_index = string.rindex(char)\n  return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]", "matching_cluster_idx": 8}]}, "Mbpp/12": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n      matrix: A list of lists representing the matrix.\n\n    Returns:\n      A new matrix sorted in ascending order by row sum.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new matrix with the rows sorted in ascending order based on their sum.\n  \"\"\"\n\n  def row_sum(row):\n    return sum(row)\n\n  return sorted(matrix, key=row_sum)", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix: A list of lists representing a matrix.\n\n    Returns:\n        A new list of lists representing the sorted matrix.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n      matrix: A list of lists representing a matrix.\n\n    Returns:\n      A new list of lists representing the sorted matrix.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n      matrix: A list of lists representing the matrix.\n\n    Returns:\n      A new list of lists representing the sorted matrix.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n\n  return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix: A list of lists representing a matrix.\n\n    Returns:\n        A new list of lists representing the sorted matrix.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n\n  return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n\n  def get_row_sum(row):\n    return sum(row)\n\n  return sorted(matrix, key=get_row_sum)", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"Sorts a matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n  \n  Args:\n      matrix: A list of lists representing a matrix.\n\n  Returns:\n      A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a matrix in ascending order according to the sum of its rows.\n\n  Args:\n      matrix: A list of lists representing a matrix.\n\n  Returns:\n      A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix: A list of lists representing the matrix.\n\n    Returns:\n        A new matrix sorted by row sum in ascending order.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix: A list of lists representing the matrix.\n\n    Returns:\n        A new list of lists representing the sorted matrix.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n    \"\"\"Sorts a matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix: A list of lists representing the matrix.\n\n    Returns:\n        A new list of lists representing the sorted matrix.\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}, {"solution": "def sort_matrix(matrix):\n  \"\"\"\n  Sorts a given matrix in ascending order according to the sum of its rows.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n\n  Returns:\n      A new list of lists representing the sorted matrix.\n  \"\"\"\n  return sorted(matrix, key=lambda row: sum(row))\nmatrix = [[1, 2, 3], [2, 4, 5], [1, 1, 1]]", "matching_cluster_idx": 15}]}, "Mbpp/16": {"dps": null, "dps_norm": null, "pass@1": 1.0, "profiled": []}, "Mbpp/19": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def test_duplicate(nums):\n  \"\"\"\n  Checks if an array of integers contains any duplicate elements.\n  \n  Args:\n      nums: A list of integers.\n  \n  Returns:\n      True if the array contains a duplicate, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if the list contains a duplicate element, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Determines if an array of integers contains any duplicate elements.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if the array contains a duplicate, False otherwise.\n  \"\"\"\n\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    assert test_duplicate(([1,2,3,4,5]))==False\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n    \"\"\"\n    Checks if a given array of integers contains any duplicate elements.\n    \n    Args:\n        nums: A list of integers.\n    \n    Returns:\n        True if the list contains duplicates, False otherwise.\n    \"\"\"\n\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if an array of integers contains any duplicate elements.\n\n    Args:\n      arr: A list of integers.\n\n    Returns:\n      True if the array contains duplicates, False otherwise.\n    \"\"\"\n    seen = set() \n    for num in arr:\n      if num in seen:\n        return True\n      seen.add(num)\n    return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n  assert test_duplicate(([1,2,3,4,5]))==False\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n    \"\"\"\n    Find whether a given array of integers contains any duplicate element.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        True if the array contains a duplicate element, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n  assert test_duplicate(([1,2,3,4,5]))==False\n  \"\"\"\n  seen = set()\n  for num in arr:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    True if the array contains a duplicate element, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in arr:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if the list contains a duplicate element, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n  \"\"\"\n  Finds whether a given array of integers contains any duplicate element.\n  \"\"\"\n  seen = set()\n  for num in arr:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n  \n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if the list contains a duplicate element, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if the array contains duplicate elements, False otherwise.\n  \"\"\"\n\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n    \"\"\"\n    Find whether a given array of integers contains any duplicate element.\n\n    Args:\n        arr (list): An array of integers.\n\n    Returns:\n        bool: True if the array contains duplicates, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n  \"\"\"\n  Check if an array of integers contains any duplicate elements.\n  \n  Args:\n      arr: A list of integers.\n\n  Returns:\n      True if the array contains duplicates, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in arr:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Checks if an array of integers contains any duplicate elements.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if there are duplicate elements in the array, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Checks if an array of integers contains any duplicate elements.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if the array contains duplicates, False otherwise.\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(nums):\n  \"\"\"\n  Write a function to find whether a given array of integers contains any duplicate element.\n  assert test_duplicate(([1,2,3,4,5]))==False\n  \"\"\"\n  seen = set()\n  for num in nums:\n    if num in seen:\n      return True\n    seen.add(num)\n  return False", "matching_cluster_idx": 14}, {"solution": "def test_duplicate(arr):\n    \"\"\"\n    Checks if an array of integers contains any duplicate elements.\n    \n    Args:\n      arr: A list of integers.\n    \n    Returns:\n      True if the array contains duplicates, False otherwise.\n    \"\"\"\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False", "matching_cluster_idx": 14}]}, "Mbpp/62": {"dps": 71.5, "dps_norm": 81.0, "pass@1": 100.0, "profiled": [{"solution": "def smallest_num(data):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    data: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not data:\n    raise ValueError(\"List is empty\")\n  smallest = data[0]  \n  for num in data:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(numbers):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    numbers: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not numbers:\n    raise ValueError(\"List cannot be empty.\")\n  smallest = numbers[0]\n  for num in numbers:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n\n  Raises:\n    ValueError: If the list is empty.\n  \"\"\"\n  if not nums:\n    raise ValueError(\"List cannot be empty\")\n  return min(nums)", "matching_cluster_idx": 4}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  \n  smallest = nums[0] \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(numbers):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    numbers: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n\n  Raises:\n    ValueError: If the list is empty.\n  \"\"\"\n\n  if not numbers:\n    raise ValueError(\"Cannot find smallest number in an empty list.\")\n  \n  smallest = numbers[0] \n  for num in numbers:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    raise ValueError(\"List cannot be empty\")\n  smallest = nums[0]  \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  # Handle empty list case\n  \n  smallest = nums[0] \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    raise ValueError(\"List cannot be empty\")\n  smallest = nums[0]  \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  # Handle empty list case\n  smallest = nums[0]\n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  \n  \n  smallest = nums[0]\n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  # Handle empty list case\n  smallest = nums[0]  \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  This function finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  # Handle empty list case\n\n  smallest = nums[0]  \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(numbers):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n      numbers: A list of numbers.\n\n  Returns:\n      The smallest number in the list.\n  \"\"\"\n  if not numbers:\n    return None  # Handle the case of an empty list\n  smallest = numbers[0]  # Assume the first element is the smallest\n  for num in numbers:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  This function finds the smallest number in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n\n  Raises:\n    ValueError: If the input list is empty.\n  \"\"\"\n\n  if not nums:\n    raise ValueError(\"Input list cannot be empty.\")\n  \n  smallest = nums[0] \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(numbers):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    numbers: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  smallest = numbers[0]  \n  for number in numbers:\n    if number < smallest:\n      smallest = number\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  # Handle empty list case\n  smallest = nums[0]\n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  # Handle empty list case\n  \n  smallest = nums[0]\n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  This function finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  smallest = nums[0]\n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(nums):\n  \"\"\"\n  Finds the smallest number in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The smallest number in the list.\n  \"\"\"\n  if not nums:\n    return None  # Handle empty list case\n  \n  smallest = nums[0] \n  for num in nums:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}, {"solution": "def smallest_num(numbers):\n  \"\"\"\n  This function finds the smallest number in a list.\n\n  Args:\n      numbers: A list of numbers.\n\n  Returns:\n      The smallest number in the list.\n\n  Raises:\n      ValueError: If the list is empty.\n  \"\"\"\n  if not numbers:\n    raise ValueError(\"List cannot be empty\")\n  smallest = numbers[0]\n  for num in numbers:\n    if num < smallest:\n      smallest = num\n  return smallest", "matching_cluster_idx": 3}]}, "Mbpp/75": {"dps": 92.85714285714286, "dps_norm": 66.66666666666667, "pass@1": 100.0, "profiled": [{"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuples_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples which have all elements divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    if all(x % k == 0 for x in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Find tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuples_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples where all elements are divisible by k.\n  \"\"\"\n\n  result = []\n  for tup in tuples_list:\n    if all(element % k == 0 for element in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n  Returns:\n      A list of tuples that have all elements divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    if all(x % k == 0 for x in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuples_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples that satisfy the condition.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    if all(x % k == 0 for x in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Finds tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples_list: A list of tuples.\n        k: An integer.\n\n    Returns:\n        A list of tuples where all elements are divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(element % k == 0 for element in tup):\n            result.append(tup)\n    return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuple_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuple_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples where all elements in each tuple are divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuple_list:\n    if all(x % k == 0 for x in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n  Returns:\n      A list of tuples whose elements are all divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    if all(num % k == 0 for num in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n    Returns:\n      A list of tuples where all elements are divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuples_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples that have all elements divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    is_divisible = all(element % k == 0 for element in tup)\n    if is_divisible:\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Finds tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n    Returns:\n      A list of tuples where all elements are divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(x % k == 0 for x in tup):\n            result.append(tup)\n    return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n  Returns:\n      A list of tuples where all elements are divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    if all(element % k == 0 for element in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuples_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples where all elements are divisible by k.\n  \"\"\"\n  return [tup for tup in tuples_list if all(x % k == 0 for x in tup)]", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuple_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuple_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples where all elements are divisible by k.\n  \"\"\"\n  return [tup for tup in tuple_list if all(x % k == 0 for x in tup)]", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Find tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n  Returns:\n      A list of tuples where all elements are divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    is_divisible = all(element % k == 0 for element in tup)\n    if is_divisible:\n      result.append(tup)\n  return result\nk = 6", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Finds tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples_list: A list of tuples.\n        k: An integer.\n\n    Returns:\n        A list of tuples where all elements are divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(num % k == 0 for num in tup):\n            result.append(tup)\n    return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Finds tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n      tuples_list: A list of tuples.\n      k: The divisor.\n\n    Returns:\n      A list of tuples where all elements are divisible by k.\n    \"\"\"\n    return [tup for tup in tuples_list if all(element % k == 0 for element in tup)]\ntuples_list = [(6, 24, 12), (7, 9, 6), (12, 18, 21)]\nk = 6", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuples_list: A list of tuples.\n    k: An integer.\n\n  Returns:\n    A list of tuples where all elements in each tuple are divisible by k.\n  \"\"\"\n  result = []\n  for tuple_item in tuples_list:\n    is_divisible = all(element % k == 0 for element in tuple_item)\n    if is_divisible:\n      result.append(tuple_item)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n    tuples_list: A list of tuples.\n    k: The integer divisor.\n\n  Returns:\n    A list of tuples where all elements are divisible by k.\n  \"\"\"\n  return [tup for tup in tuples_list if all(element % k == 0 for element in tup)]", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n  Returns:\n      A list of tuples where all elements are divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    is_divisible = all(x % k == 0 for x in tup)\n    if is_divisible:\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}, {"solution": "def find_tuples(tuples_list, k):\n  \"\"\"\n  Finds tuples which have all elements divisible by k from the given list of tuples.\n\n  Args:\n      tuples_list: A list of tuples.\n      k: An integer.\n\n  Returns:\n      A list of tuples where all elements are divisible by k.\n  \"\"\"\n  result = []\n  for tup in tuples_list:\n    if all(element % k == 0 for element in tup):\n      result.append(tup)\n  return result", "matching_cluster_idx": 5}]}, "Mbpp/88": {"dps": 96.56862745098039, "dps_norm": 85.71428571428571, "pass@1": 100.0, "profiled": [{"solution": "def freq_count(data):\n  \"\"\"\n  Counts the frequency of all elements in a list.\n\n  Args:\n      data: A list of elements.\n\n  Returns:\n      A dictionary where keys are the elements and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for item in data:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(numbers):\n  \"\"\"\n  Gets the frequency of all elements in a list as a dictionary.\n  Args:\n      numbers: A list of integers.\n  Returns:\n      A dictionary where keys are the unique elements in the list\n      and values are their frequencies.\n  \"\"\"\n  freq = {}\n  for number in numbers:\n    if number in freq:\n      freq[number] += 1\n    else:\n      freq[number] = 1\n  return freq", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n  \"\"\"\n  Returns a dictionary with the frequency of each element in the input list.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      A dictionary where keys are unique elements from the input list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for num in nums:\n    if num in frequency:\n      frequency[num] += 1\n    else:\n      frequency[num] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n  \"\"\"\n  This function takes a list of numbers and returns a dictionary containing the frequency of each element.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      A dictionary where keys are the unique elements in the list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for num in nums:\n    if num in frequency:\n      frequency[num] += 1\n    else:\n      frequency[num] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(numbers):\n    \"\"\"\n    Calculates the frequency of each element in a list, returning a dictionary.\n\n    Args:\n        numbers: A list of integers.\n\n    Returns:\n        A dictionary where keys are the unique elements in the list and values are their respective frequencies.\n    \"\"\"\n    frequency = {}\n    for number in numbers:\n        if number in frequency:\n            frequency[number] += 1\n        else:\n            frequency[number] = 1\n    return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n  \"\"\"\n  Counts the frequency of each element in a list and returns it as a dictionary.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    A dictionary where keys are elements from the input list and values\n    are their corresponding frequencies.\n  \"\"\"\n  frequency = {}\n  for num in nums:\n    if num in frequency:\n      frequency[num] += 1\n    else:\n      frequency[num] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(data):\n  \"\"\"\n  This function takes a list and returns a dictionary where keys are the elements in the list\n  and values are their respective frequencies.\n\n  Args:\n      data: A list of elements.\n\n  Returns:\n      A dictionary containing the frequency of each element.\n  \"\"\"\n  frequency = {}\n  for element in data:\n    if element in frequency:\n      frequency[element] += 1\n    else:\n      frequency[element] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n  \"\"\"\n  Get the frequency of all elements in a list as a dictionary.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    A dictionary where keys are the unique elements in the list and values are their frequencies.\n  \"\"\"\n  freq = {}\n  for num in nums:\n    if num in freq:\n      freq[num] += 1\n    else:\n      freq[num] = 1\n  return freq", "matching_cluster_idx": 5}, {"solution": "def freq_count(arr):\n  \"\"\"\n  This function takes a list and returns the frequency of each element as a dictionary.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A dictionary where keys are the unique elements in the list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for element in arr:\n    if element in frequency:\n      frequency[element] += 1\n    else:\n      frequency[element] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(data):\n    \"\"\"\n    Returns a dictionary with the frequency of all elements in a list.\n\n    Args:\n        data: A list of elements.\n\n    Returns:\n        A dictionary where keys are elements from the list and values are their frequencies.\n    \"\"\"\n    frequency = {}\n    for element in data:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n  \"\"\"\n  This function takes a list of numbers and returns a dictionary with the frequency \n  of each element in the list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      A dictionary where keys are the unique elements in the list and values are \n      their corresponding frequencies.\n  \"\"\"\n  frequency = {}\n  for num in nums:\n    if num in frequency:\n      frequency[num] += 1\n    else:\n      frequency[num] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(lst):\n  \"\"\"\n  Get the frequency of all the elements in a list, returned as a dictionary.\n\n  Args:\n    lst: A list of integers.\n\n  Returns:\n    A dictionary where keys are elements of the list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for element in lst:\n    if element in frequency:\n      frequency[element] += 1\n    else:\n      frequency[element] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n    \"\"\"\n    Calculates the frequency of each element in a list.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        A dictionary where keys are the unique elements in the list and values are their frequencies.\n    \"\"\"\n    frequency = {}\n    for num in nums:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n  \"\"\"\n  Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n  assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n  \"\"\"\n  frequency = {}\n  for num in nums:\n    if num in frequency:\n      frequency[num] += 1\n    else:\n      frequency[num] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(data):\n  \"\"\"\n  Counts the frequency of each element in a list.\n\n  Args:\n    data: A list of elements.\n\n  Returns:\n    A dictionary where keys are the elements in the list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for element in data:\n    if element in frequency:\n      frequency[element] += 1\n    else:\n      frequency[element] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(data):\n  \"\"\"\n  Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n  \"\"\"\n  frequency = {}\n  for element in data:\n    if element in frequency:\n      frequency[element] += 1\n    else:\n      frequency[element] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(arr):\n  \"\"\"\n  Calculates the frequency of each element in a list and returns a dictionary.\n\n  Args:\n      arr: A list of elements.\n\n  Returns:\n      A dictionary where keys are elements from the list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for element in arr:\n    if element in frequency:\n      frequency[element] += 1\n    else:\n      frequency[element] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(lst):\n  \"\"\"\n  Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n  Args:\n      lst: A list of integers.\n\n  Returns:\n      A dictionary where the keys are the elements of the list and the values are their frequencies.\n  \"\"\"\n\n  frequency = {}\n  for element in lst:\n    if element in frequency:\n      frequency[element] += 1\n    else:\n      frequency[element] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(nums):\n  \"\"\"\n  Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n  assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})\n  \"\"\"\n  frequency = {}\n  for num in nums:\n    if num in frequency:\n      frequency[num] += 1\n    else:\n      frequency[num] = 1\n  return frequency", "matching_cluster_idx": 5}, {"solution": "def freq_count(numbers):\n  \"\"\"\n  This function takes a list of numbers and returns a dictionary containing the frequency of each element.\n\n  Args:\n    numbers: A list of integers.\n\n  Returns:\n    A dictionary where keys are the unique elements in the list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for number in numbers:\n    if number in frequency:\n      frequency[number] += 1\n    else:\n      frequency[number] = 1\n  return frequency", "matching_cluster_idx": 5}]}, "Mbpp/90": {"dps": 26.682926829268293, "dps_norm": 72.14285714285714, "pass@1": 85.0, "profiled": [{"solution": "def len_log(words):\n    \"\"\"\n    Finds the length of the longest word in a list.\n\n    Args:\n      words: A list of strings.\n\n    Returns:\n      The length of the longest word in the list.\n    \"\"\"\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n    words: A list of words.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n      words: A list of words (strings).\n\n  Returns:\n      The length of the longest word.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n    \"\"\"\n    Finds the length of the longest word in a list.\n\n    Args:\n        words: A list of strings.\n\n    Returns:\n        The length of the longest word in the list.\n    \"\"\"\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list of words.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n      words: A list of strings.\n\n    Returns:\n      The length of the longest word in the list.\n    \"\"\"\n    longest_word = \"\"\n    for word in words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"Finds the length of the longest word in a list.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n      words: A list of strings.\n\n  Returns:\n      The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list of words.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(list1):\n  \"\"\"\n  Finds the length of the longest word in a list of strings.\n  \n  Args:\n      list1: A list of strings.\n  \n  Returns:\n      The length of the longest word in the list.\n  \"\"\"\n  longest = 0\n  for word in list1:\n    if len(word) > longest:\n      longest = len(word)\n  return longest", "matching_cluster_idx": 5}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list of words.\n\n  Args:\n    words: A list of words.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Find the length of the longest word in a list.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list of words.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list of strings.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n      words: A list of strings.\n\n  Returns:\n      The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}, {"solution": "def len_log(words):\n  \"\"\"\n  Finds the length of the longest word in a list of words.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The length of the longest word in the list.\n  \"\"\"\n  longest_word = \"\"\n  for word in words:\n    if len(word) > len(longest_word):\n      longest_word = word\n  return len(longest_word)", "matching_cluster_idx": 4}]}, "Mbpp/94": {"dps": 81.34146341463415, "dps_norm": 68.0, "pass@1": 91.0, "profiled": [{"solution": "def index_minimum(tuple_list):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n    tuple_list: A list of tuples.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_index = 0\n  for i in range(1, len(tuple_list)):\n    if tuple_list[i][1] < tuple_list[min_index][1]:\n      min_index = i\n  return tuple_list[min_index][0]", "matching_cluster_idx": 2}, {"solution": "def index_minimum(tuple_list):\n  \"\"\"Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n    tuple_list: A list of tuples.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  minimum_tuple = tuple_list[0]\n  for tuple in tuple_list:\n    if tuple[1] < minimum_tuple[1]:\n      minimum_tuple = tuple\n  return minimum_tuple[0]", "matching_cluster_idx": 3}, {"solution": "def index_minimum(list_of_tuples):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n      list_of_tuples: A list of tuples where each tuple contains a name and a number.\n\n  Returns:\n      The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_tuple = list_of_tuples[0]\n  for tuple in list_of_tuples:\n    if tuple[1] < min_tuple[1]:\n      min_tuple = tuple\n  return min_tuple[0]", "matching_cluster_idx": 3}, {"solution": "def index_minimum(lst):\n  \"\"\"Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n  Args:\n    lst: A list of tuples.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_value = lst[0][1]\n  min_index = 0\n  for i in range(1, len(lst)):\n    if lst[i][1] < min_value:\n      min_value = lst[i][1]\n      min_index = i\n  return lst[min_index][0]", "matching_cluster_idx": 2}, {"solution": "def index_minimum(tuple_list):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n      tuple_list: A list of tuples.\n\n  Returns:\n      The first value of the tuple with the smallest second value.\n\n  \"\"\"\n  min_tuple = tuple_list[0]\n  for tuple_item in tuple_list:\n    if tuple_item[1] < min_tuple[1]:\n      min_tuple = tuple_item\n  return min_tuple[0]", "matching_cluster_idx": 3}, {"solution": "def index_minimum(tuples):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n    Args:\n      tuples: A list of tuples where each tuple contains two elements.\n\n    Returns:\n      The first value of the tuple with the smallest second value.\n    \"\"\"\n    minimum_tuple = tuples[0]\n    for tup in tuples:\n      if tup[1] < minimum_tuple[1]:\n        minimum_tuple = tup\n    return minimum_tuple[0]", "matching_cluster_idx": 3}, {"solution": "def index_minimum(tuple_list):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n  \n  Args:\n    tuple_list: A list of tuples.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n\n  Examples:\n    index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n  \"\"\"\n  min_value = min(tuple_list, key=lambda x: x[1])[0]\n  return min_value", "matching_cluster_idx": 2}, {"solution": "def index_minimum(lst):\n  \"\"\"\n  Given a list of tuples, returns the first value of the tuple with the smallest second value.\n\n  Args:\n    lst: A list of tuples.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_value = min(lst, key=lambda x: x[1])[0]\n  return min_value", "matching_cluster_idx": 2}, {"solution": "def index_minimum(tuples_list):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n      tuples_list: A list of tuples.\n\n    Returns:\n      The first value of the tuple with the smallest second value.\n    \"\"\"\n    min_value = min(tuples_list, key=lambda x: x[1])[0]\n    return min_value", "matching_cluster_idx": 2}, {"solution": "def index_minimum(tuple_list):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n    tuple_list: A list of tuples.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_value = min(tuple_list, key=lambda x: x[1])[0]\n  return min_value", "matching_cluster_idx": 2}, {"solution": "def index_minimum(tuples_list):\n  \"\"\"Given a list of tuples, return the first value of the tuple with the smallest second value.\n  \n  Args:\n    tuples_list: A list of tuples, where each tuple contains two elements.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_value = min(tuples_list, key=lambda x: x[1])\n  return min_value[0]", "matching_cluster_idx": 2}, {"solution": "def index_minimum(lst):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n  \n  Args:\n    lst: A list of tuples, where each tuple contains a string and an integer.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_tuple = lst[0]  # Initialize with the first tuple\n  for tuple in lst:\n    if tuple[1] < min_tuple[1]:  # Compare the second values\n      min_tuple = tuple\n  return min_tuple[0]  # Return the first value of the tuple with the smallest second value", "matching_cluster_idx": 3}, {"solution": "def index_minimum(data):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n      data: A list of tuples where each tuple contains a name and a number.\n\n  Returns:\n      The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_tuple = data[0]\n  for tuple in data:\n    if tuple[1] < min_tuple[1]:\n      min_tuple = tuple\n  return min_tuple[0]", "matching_cluster_idx": 3}, {"solution": "def index_minimum(data):\n  \"\"\"\n  Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n  Args:\n      data: A list of tuples.\n\n  Returns:\n      The first value of the tuple with the smallest second value.\n  \"\"\"\n\n  min_value = min(data, key=lambda x: x[1])\n  return min_value[0]", "matching_cluster_idx": 2}, {"solution": "def index_minimum(list_of_tuples):\n  \"\"\"\n  Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n  Args:\n      list_of_tuples: A list of tuples.\n\n  Returns:\n      The first value of the tuple with the smallest second value.\n\n  \"\"\"\n  min_value = min(list_of_tuples, key=lambda x: x[1])[0]\n  return min_value", "matching_cluster_idx": 2}, {"solution": "def index_minimum(list_of_tuples):\n  \"\"\"\n  Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n  For example:\n  index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n  \"\"\"\n  minimum_tuple = list_of_tuples[0]\n  for tuple_item in list_of_tuples:\n    if tuple_item[1] < minimum_tuple[1]:\n      minimum_tuple = tuple_item\n  return minimum_tuple[0]", "matching_cluster_idx": 3}, {"solution": "def index_minimum(data):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n      data: A list of tuples.\n\n  Returns:\n      The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_val = data[0][1]\n  min_index = 0\n  for i in range(1, len(data)):\n    if data[i][1] < min_val:\n      min_val = data[i][1]\n      min_index = i\n  return data[min_index][0]", "matching_cluster_idx": 2}, {"solution": "def index_minimum(tuple_list):\n    \"\"\"\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n\n    Args:\n      tuple_list: A list of tuples.\n\n    Returns:\n      The first value of the tuple with the smallest second value.\n    \"\"\"\n    min_value = tuple_list[0][1]  # Initialize min_value with the second value of the first tuple\n    min_index = 0  # Initialize the index of the minimum value tuple\n\n    for i in range(1, len(tuple_list)):\n        if tuple_list[i][1] < min_value:\n            min_value = tuple_list[i][1]  # Update min_value if a smaller value is found\n            min_index = i  # Update the index of the minimum value tuple\n\n    return tuple_list[min_index][0]  # Return the first value of the tuple with the minimum second value", "matching_cluster_idx": 2}, {"solution": "def index_minimum(data):\n  \"\"\"\n  Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n  \n  For example:\n  index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n  \"\"\"\n  min_tuple = data[0]\n  for tuple in data:\n    if tuple[1] < min_tuple[1]:\n      min_tuple = tuple\n  return min_tuple[0]", "matching_cluster_idx": 3}, {"solution": "def index_minimum(tuple_list):\n  \"\"\"\n  Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n  Args:\n    tuple_list: A list of tuples.\n\n  Returns:\n    The first value of the tuple with the smallest second value.\n  \"\"\"\n  min_value = tuple_list[0][1]  \n  min_index = 0\n  for i in range(1, len(tuple_list)):\n    if tuple_list[i][1] < min_value:\n      min_value = tuple_list[i][1]\n      min_index = i\n  return tuple_list[min_index][0]", "matching_cluster_idx": 2}]}, "Mbpp/96": {"dps": 97.77777777777777, "dps_norm": 94.28571428571429, "pass@1": 100.0, "profiled": [{"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Count both i and n/i as divisors\n  if int(n**0.5)**2 == n:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  This function takes an integer and returns the number of its divisors.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Add 2 because i and n/i are both divisors\n  if int(n**0.5)**2 == n:\n    count -= 1  # Adjust for double-counting the square root\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  This function returns the number of divisors of a given integer.\n  \"\"\"\n  count = 0\n  for i in range(1, n+1):\n    if n % i == 0:\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: The integer to find the divisors of.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  \n  if int(n**0.5)**2 == n:\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n      n: The integer to find divisors for.\n\n  Returns:\n      The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  \n  if int(n**0.5) * int(n**0.5) == n:\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: The integer to find the number of divisors for.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # If i is a divisor, so is n/i\n  if int(n**0.5)**2 == n:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Count both i and n/i as divisors\n  \n  if int(n**0.5)**2 == n:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  This function finds the number of divisors of a given integer.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # If i is a divisor, n/i is also a divisor\n  if int(n**0.5)**2 == n:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Count both i and n/i as divisors\n  if int(n**0.5) * int(n**0.5) == n:\n    count -= 1  # Avoid double-counting the square root\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: The integer to find divisors for.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Count both i and n/i as divisors\n  if int(n**0.5) * int(n**0.5) == n:\n    count -= 1  # Avoid double-counting the square root\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(num):\n  \"\"\"\n  This function finds the number of divisors of a given integer.\n\n  Args:\n      num: An integer.\n\n  Returns:\n      The number of divisors of num.\n  \"\"\"\n  count = 0\n  for i in range(1, int(num**0.5) + 1):\n    if num % i == 0:\n      count += 2  # Add 2 because i and num/i are both divisors\n  if int(num**0.5)**2 == num:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(num):\n  \"\"\"\n  This function finds the number of divisors of a given integer.\n\n  Args:\n      num: An integer.\n\n  Returns:\n      The number of divisors of num.\n  \"\"\"\n  count = 0\n  for i in range(1, int(num**0.5) + 1):\n    if num % i == 0:\n      count += 2  # If i is a divisor, num/i is also a divisor\n  if int(num**0.5)**2 == num:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  This function returns the number of divisors of a given integer.\n  \n  Args:\n      n: An integer.\n      \n  Returns:\n      The number of divisors of n.\n\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  \n  \n  if int(n**0.5)**2 == n:\n    count -= 1 \n  \n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n    \"\"\"\n    Finds the number of divisors of a given integer.\n\n    Args:\n      n: An integer.\n\n    Returns:\n      The number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 2  # If i is a divisor, n/i is also a divisor\n    \n    # Handle the case where n is a perfect square\n    if int(n**0.5)**2 == n:\n        count -= 1\n\n    return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: The integer to find the divisors of.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Increment by 2 for both i and n/i\n  \n  if int(n**0.5)**2 == n:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Find the number of divisors of a given integer.\n\n  Args:\n      n: An integer.\n\n  Returns:\n      The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  \n  if int(n**0.5) * int(n**0.5) == n:\n    count -= 1 \n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Counts the number of divisors of a given integer.\n\n  Args:\n      n: The integer to find the divisors of.\n\n  Returns:\n      The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Count both i and n/i as divisors\n  if int(n**0.5)**2 == n:\n    count -= 1  # Adjust count if n is a perfect square\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n      n: The integer to find the divisors of.\n\n  Returns:\n      The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Count both i and n/i as divisors\n  if int(n**0.5)**2 == n:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}, {"solution": "def divisor(n):\n  \"\"\"\n  Finds the number of divisors of a given integer.\n  \n  Args:\n    n: An integer.\n  \n  Returns:\n    The number of divisors of n.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # If i is a divisor, then n/i is also a divisor\n  if int(n**0.5)**2 == n:  # Handle perfect squares\n    count -= 1\n  return count", "matching_cluster_idx": 6}]}, "Mbpp/97": {"dps": 99.65811965811966, "dps_norm": 87.5, "pass@1": 100.0, "profiled": [{"solution": "def frequency_lists(lst):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where keys are elements from the flattened list and values\n    are their frequencies.\n  \"\"\"\n  result = {}\n  for sublist in lst:\n    for element in sublist:\n      if element in result:\n        result[element] += 1\n      else:\n        result[element] = 1\n  return result", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(input_list):\n    \"\"\"\n    Finds frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n        input_list: A list of lists.\n\n    Returns:\n        A dictionary where keys are the unique elements and values are their frequencies.\n    \"\"\"\n    frequency = {}\n    for sublist in input_list:\n        for element in sublist:\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n    return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(lists):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists,\n  returned in a dictionary.\n\n  Args:\n    lists: A list of lists.\n\n  Returns:\n    A dictionary where keys are the unique elements in the flattened list and \n    values are their frequencies.\n  \"\"\"\n  flattened = [item for sublist in lists for item in sublist]\n  frequency = {}\n  for item in flattened:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(lst):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists, returned in a dictionary.\n  \n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where keys are elements from the flattened list and values are their frequencies.\n  \"\"\"\n  frequencies = {}\n  for sublist in lst:\n    for element in sublist:\n      if element in frequencies:\n        frequencies[element] += 1\n      else:\n        frequencies[element] = 1\n  return frequencies", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(lst):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, \n    returned in a dictionary.\n    assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    frequency = {}\n    for sublist in lst:\n      for element in sublist:\n        if element in frequency:\n          frequency[element]+=1\n        else:\n          frequency[element] = 1\n    return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists, returned in a dictionary.\n\n  Args:\n    nested_list: A list of lists.\n\n  Returns:\n    A dictionary where keys are elements from the nested list and values are their frequencies.\n  \"\"\"\n  frequencies = {}\n  for sublist in nested_list:\n    for element in sublist:\n      if element in frequencies:\n        frequencies[element] += 1\n      else:\n        frequencies[element] = 1\n  return frequencies", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(input_list):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists.\n\n  Args:\n    input_list: A list of lists.\n\n  Returns:\n    A dictionary where keys are elements from the input list and values are their frequencies.\n  \"\"\"\n  frequency = {}\n  for sublist in input_list:\n    for element in sublist:\n      if element in frequency:\n        frequency[element] += 1\n      else:\n        frequency[element] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n    \"\"\"\n    Finds the frequency of each element in a flattened list of lists.\n\n    Args:\n        nested_list: A list of lists.\n\n    Returns:\n        A dictionary where keys are elements from the nested list and values are their frequencies.\n    \"\"\"\n    flattened = [item for sublist in nested_list for item in sublist]\n    frequency = {}\n    for item in flattened:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(list_of_lists):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists, returned in a dictionary.\n\n  Args:\n    list_of_lists: A list of lists.\n\n  Returns:\n    A dictionary where keys are the elements and values are their frequencies.\n  \"\"\"\n\n  flattened_list = [item for sublist in list_of_lists for item in sublist]\n  frequency = {}\n  for item in flattened_list:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n    \"\"\"\n    Finds frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n        nested_list: A list of lists.\n\n    Returns:\n        A dictionary where keys are unique elements from the nested list and values are their frequencies.\n    \"\"\"\n    flat_list = [item for sublist in nested_list for item in sublist]\n    frequency = {}\n    for item in flat_list:\n      if item in frequency:\n        frequency[item] += 1\n      else:\n        frequency[item] = 1\n    return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(input_list):\n  \"\"\"\n  Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n  assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n  \"\"\"\n  frequency = {}\n  for sublist in input_list:\n    for element in sublist:\n      if element in frequency:\n        frequency[element] += 1\n      else:\n        frequency[element] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(lists_of_lists):\n    \"\"\"\n    Finds frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n      lists_of_lists: A list of lists, where each inner list contains integers.\n\n    Returns:\n      A dictionary where keys are the unique elements from the flattened list and \n      values are their frequencies.\n\n    Examples:\n      frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    flattened_list = [item for sublist in lists_of_lists for item in sublist]\n    frequency = {}\n    for item in flattened_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(input_list):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists.\n\n  Args:\n      input_list: A list of lists.\n\n  Returns:\n      A dictionary where keys are elements from the input list and values are their frequencies.\n  \"\"\"\n  flattened = [item for sublist in input_list for item in sublist]\n  frequency = {}\n  for item in flattened:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n    \"\"\"\n    Finds the frequency of each element in a flattened list of lists, returned in a dictionary.\n    \n    Args:\n      nested_list: A list of lists.\n\n    Returns:\n      A dictionary where keys are unique elements from the flattened list and values are their frequencies.\n\n    Examples:\n      frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    flattened_list = [item for sublist in nested_list for item in sublist]\n    frequency = {}\n    for item in flattened_list:\n      if item in frequency:\n        frequency[item] += 1\n      else:\n        frequency[item] = 1\n    return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists.\n\n  Args:\n    nested_list: A list of lists.\n\n  Returns:\n    A dictionary where keys are the elements and values are their frequencies.\n  \"\"\"\n  flattened = [item for sublist in nested_list for item in sublist]\n  frequency = {}\n  for item in flattened:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(data):\n    \"\"\"\n    Finds frequency of each element in a flattened list of lists.\n\n    Args:\n      data: A list of lists.\n\n    Returns:\n      A dictionary where keys are elements from the input list and values are their frequencies.\n    \"\"\"\n    frequency = {}\n    for sublist in data:\n      for element in sublist:\n        if element in frequency:\n          frequency[element] += 1\n        else:\n          frequency[element] = 1\n    return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists, \n  returned in a dictionary.\n  \n  Args:\n      nested_list: A list of lists.\n\n  Returns:\n      A dictionary where keys are elements from the nested list and \n      values are their frequencies.\n\n  \"\"\"\n  flattened_list = [item for sublist in nested_list for item in sublist]\n  frequency = {}\n  for item in flattened_list:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists, returned in a dictionary.\n\n  Args:\n      nested_list: A list of lists.\n\n  Returns:\n      A dictionary where keys are the unique elements in the flattened list and values are their frequencies.\n  \"\"\"\n  flattened_list = [item for sublist in nested_list for item in sublist]\n  frequency = {}\n  for item in flattened_list:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(lst):\n  \"\"\"\n  Finds the frequency of each element in a flattened list of lists.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A dictionary where keys are the unique elements in the flattened list and\n      values are their frequencies.\n  \"\"\"\n  flattened = [item for sublist in lst for item in sublist]\n  frequency = {}\n  for item in flattened:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}, {"solution": "def frequency_lists(nested_list):\n  \"\"\"\n  Finds frequency of each element in a flattened list of lists.\n\n  Args:\n      nested_list: A list of lists.\n\n  Returns:\n      A dictionary where keys are elements and values are their frequencies.\n  \"\"\"\n  flat_list = [item for sublist in nested_list for item in sublist]\n  frequency = {}\n  for item in flat_list:\n    if item in frequency:\n      frequency[item] += 1\n    else:\n      frequency[item] = 1\n  return frequency", "matching_cluster_idx": 6}]}, "Mbpp/106": {"dps": 81.88311688311688, "dps_norm": 95.0, "pass@1": 24.0, "profiled": [{"solution": "def add_lists(input_list, input_tuple):\n  \"\"\"\n  Append the given list to the given tuple.\n  \n  Args:\n      input_list: A list of integers.\n      input_tuple: A tuple of integers.\n  \n  Returns:\n      A new tuple containing all elements of the input tuple followed by all elements of the input list.\n  \"\"\"\n  return input_tuple + tuple(input_list)", "matching_cluster_idx": 5}, {"solution": "def add_lists(list_to_add, tuple_to_add_to):\n  \"\"\"\n  Appends the given list to the given tuples.\n\n  Args:\n    list_to_add: A list to be appended to the tuple.\n    tuple_to_add_to: A tuple to which the list is appended.\n\n  Returns:\n    A new tuple with the list appended.\n  \"\"\"\n  return tuple_to_add_to + tuple(list_to_add)", "matching_cluster_idx": 5}, {"solution": "def add_lists(lst, tup):\n  \"\"\"\n  Appends the elements of the given list to the given tuple.\n  \"\"\"\n  return tup + tuple(lst)", "matching_cluster_idx": 5}, {"solution": "def add_lists(numbers, my_tuple):\n  \"\"\"Appends the given list to the given tuple.\n\n  Args:\n    numbers: A list of numbers.\n    my_tuple: A tuple of numbers.\n\n  Returns:\n    A new tuple containing all elements from the tuple and the list.\n  \"\"\"\n  return my_tuple + tuple(numbers)", "matching_cluster_idx": 5}, {"solution": "def add_lists(list_to_append, tuple_to_append_to):\n  \"\"\"\n  Appends the given list to the given tuples.\n\n  Args:\n    list_to_append: The list to append.\n    tuple_to_append_to: The tuple to append to.\n\n  Returns:\n    A new tuple containing all elements from the input tuple followed by all\n    elements from the input list.\n  \"\"\"\n  return tuple(tuple_to_append_to) + tuple(list_to_append)", "matching_cluster_idx": 4}, {"solution": "def add_lists(list1, tuple1):\n  \"\"\"\n  Appends the given list to the given tuple.\n\n  Args:\n    list1: A list of numbers.\n    tuple1: A tuple of numbers.\n\n  Returns:\n    A new tuple containing all elements from the tuple and list.\n  \"\"\"\n  return tuple1 + tuple(list1)", "matching_cluster_idx": 5}, {"solution": "def add_lists(nums, tuple_input):\n  \"\"\"\n  Appends the given list to the given tuples.\n\n  Args:\n    nums: A list of numbers.\n    tuple_input: A tuple of numbers.\n\n  Returns:\n    A new tuple containing the elements of the input tuple followed by the elements of the input list.\n  \"\"\"\n  return tuple_input + tuple(nums)", "matching_cluster_idx": 4}, {"solution": "def add_lists(nums, my_tuple):\n    \"\"\"\n    Appends the elements of a list to a tuple.\n\n    Args:\n        nums: A list of numbers.\n        my_tuple: A tuple of numbers.\n\n    Returns:\n        A new tuple containing all the elements of the tuple and the list.\n    \"\"\"\n    return my_tuple + tuple(nums)", "matching_cluster_idx": 5}, {"solution": "def add_lists(numbers, coordinates):\n  \"\"\"\n  Appends the given list to the given tuple.\n\n  Args:\n      numbers: A list of numbers.\n      coordinates: A tuple of numbers.\n\n  Returns:\n      A new tuple containing the elements of the tuple followed by the elements of the list.\n  \"\"\"\n  return coordinates + tuple(numbers)", "matching_cluster_idx": 5}, {"solution": "def add_lists(nums_list, nums_tuple):\n  \"\"\"\n  Appends the given list to the given tuples.\n\n  Args:\n    nums_list: A list of numbers.\n    nums_tuple: A tuple of numbers.\n\n  Returns:\n    A new tuple that includes all elements from the input tuple followed by all elements from the input list.\n  \"\"\"\n  return nums_tuple + tuple(nums_list)", "matching_cluster_idx": 5}, {"solution": "def add_lists(nums_list, nums_tuple):\n  \"\"\"\n  Appends the given list to the given tuples.\n\n  Args:\n    nums_list: A list of numbers.\n    nums_tuple: A tuple of numbers.\n\n  Returns:\n    A new tuple containing all elements from the tuple and the list.\n  \"\"\"\n  return nums_tuple + tuple(nums_list)", "matching_cluster_idx": 5}, {"solution": "def add_lists(lst, tup):\n  \"\"\"\n  Appends the given list to the given tuple.\n\n  Args:\n      lst: The list to be appended.\n      tup: The tuple to append the list to.\n\n  Returns:\n      A new tuple containing the elements of the tuple followed by the elements of the list.\n  \"\"\"\n  return tup + tuple(lst)", "matching_cluster_idx": 5}, {"solution": "def add_lists(numbers, data):\n    \"\"\"\n    Append the given list to the given tuples.\n    assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n    \"\"\"\n    return tuple(data) + tuple(numbers)", "matching_cluster_idx": 4}, {"solution": "def add_lists(list1, tuple1):\n  \"\"\"\n  Appends the given list to the given tuple.\n\n  Args:\n      list1: The list to append.\n      tuple1: The tuple to append to.\n\n  Returns:\n      A new tuple containing the elements of the tuple and the list.\n  \"\"\"\n  return tuple1 + tuple(list1)", "matching_cluster_idx": 5}, {"solution": "def add_lists(list1, tuple1):\n  \"\"\"\n  Appends the elements of a list to a tuple.\n\n  Args:\n    list1: A list of numbers.\n    tuple1: A tuple of numbers.\n\n  Returns:\n    A new tuple containing the elements of the tuple followed by the elements of the list.\n  \"\"\"\n  return tuple1 + tuple(list1)", "matching_cluster_idx": 4}, {"solution": "def add_lists(input_list, input_tuple):\n  \"\"\"\n  Appends the given list to the given tuples.\n\n  Args:\n    input_list: A list of integers.\n    input_tuple: A tuple of integers.\n\n  Returns:\n    A new tuple containing all elements from the input tuple followed by all elements from the input list.\n  \"\"\"\n  return input_tuple + tuple(input_list)", "matching_cluster_idx": 5}, {"solution": "def add_lists(nums, tuple1):\n  \"\"\"\n  Appends the elements of a list to a tuple.\n\n  Args:\n    nums: A list of numbers.\n    tuple1: A tuple of numbers.\n\n  Returns:\n    A new tuple containing all elements from tuple1 followed by the elements of nums.\n  \"\"\"\n  return tuple1 + tuple(nums)", "matching_cluster_idx": 5}, {"solution": "def add_lists(input_list, input_tuple):\n  \"\"\"Appends the given list to the given tuple.\n\n  Args:\n    input_list: The list to append.\n    input_tuple: The tuple to append to.\n\n  Returns:\n    A new tuple containing all elements of the input tuple followed by all elements of the input list.\n  \"\"\"\n  return input_tuple + tuple(input_list)", "matching_cluster_idx": 5}, {"solution": "def add_lists(list1, tuple1):\n  \"\"\"\n  Appends the elements of a list to a tuple.\n\n  Args:\n      list1: The list to be appended.\n      tuple1: The tuple to append to.\n\n  Returns:\n      A new tuple containing the elements of the tuple and the list.\n  \"\"\"\n  return tuple1 + tuple(list1)", "matching_cluster_idx": 4}, {"solution": "def add_lists(list1, tup1):\n  \"\"\"\n  Appends the given list to the given tuple.\n\n  Args:\n    list1: The list to append.\n    tup1: The tuple to append to.\n\n  Returns:\n    A new tuple containing the elements of the tuple followed by the elements of the list.\n  \"\"\"\n  return tup1 + tuple(list1)", "matching_cluster_idx": 4}]}, "Mbpp/108": {"dps": null, "dps_norm": null, "pass@1": 7.0, "profiled": []}, "Mbpp/111": {"dps": 87.61538461538461, "dps_norm": 85.625, "pass@1": 100.0, "profiled": [{"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in given nested lists.\n\n  Args:\n    nested_lists: A list of lists of integers.\n\n  Returns:\n    A set of common elements present in all the nested lists.\n  \"\"\"\n  common = set(nested_lists[0])  \n  for lst in nested_lists[1:]:\n    common.intersection_update(set(lst))\n  return common", "matching_cluster_idx": 5}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in a given list of nested lists.\n\n  Args:\n    nested_lists: A list of nested lists.\n\n  Returns:\n    A set of common elements found in all nested lists.\n  \"\"\"\n  common = set(nested_lists[0])  # Start with the first list's elements as the initial common set\n  for lst in nested_lists[1:]:\n    common &= set(lst)  # Intersection operation to find common elements with subsequent lists\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds common elements in given nested lists.\n  \n  Args:\n    nested_lists: A list of lists.\n\n  Returns:\n    A set of common elements.\n  \"\"\"\n  common = set(nested_lists[0])\n  for lst in nested_lists[1:]:\n    common.intersection_update(lst)\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in a list of nested lists.\n\n  Args:\n    nested_lists: A list of nested lists.\n\n  Returns:\n    A set of common elements found in all nested lists.\n  \"\"\"\n  common = set(nested_lists[0])  \n  for lst in nested_lists[1:]:\n    common = common.intersection(set(lst))\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in given nested lists.\n  \"\"\"\n  common = set(nested_lists[0])  # Start with the elements of the first list\n  for lst in nested_lists[1:]:\n    common &= set(lst)  # Intersection operation to find common elements\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in given nested lists.\n\n  Args:\n    nested_lists: A list of nested lists.\n\n  Returns:\n    A set of common elements found in all the nested lists.\n  \"\"\"\n  common = set(nested_lists[0])\n  for lst in nested_lists[1:]:\n    common &= set(lst)\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in given nested lists.\n\n  Args:\n    nested_lists: A list of lists.\n\n  Returns:\n    A set of the common elements.\n  \"\"\"\n  common = set(nested_lists[0])  \n  for lst in nested_lists[1:]:\n    common &= set(lst)  \n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in a given nested lists.\n    \"\"\"\n    common = set(nested_lists[0])  \n    for lst in nested_lists[1:]:\n      common &= set(lst)  \n    return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_list):\n  \"\"\"Finds the common elements in a given list of nested lists.\n\n  Args:\n    nested_list: A list of nested lists.\n\n  Returns:\n    A set of common elements in all nested lists.\n  \"\"\"\n  common = set(nested_list[0])  \n  for sublist in nested_list[1:]:\n    common.intersection_update(set(sublist))\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in given nested lists.\n\n  Args:\n    nested_lists: A list of lists containing integers.\n\n  Returns:\n    A set containing the common elements across all lists.\n  \"\"\"\n  common = set(nested_lists[0])  \n  for lst in nested_lists[1:]:\n    common &= set(lst)\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_list):\n  \"\"\"\n  Finds the common elements in a list of nested lists.\n\n  Args:\n    nested_list: A list of nested lists.\n\n  Returns:\n    A set of common elements found in all the nested lists.\n  \"\"\"\n  common = set(nested_list[0])  \n  for lst in nested_list[1:]:\n    common.intersection_update(lst)\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in a list of nested lists.\n\n    Args:\n        nested_lists: A list of lists.\n\n    Returns:\n        A set of common elements.\n    \"\"\"\n\n    common_elements = set(nested_lists[0])  # Initialize with elements of the first list\n    for lst in nested_lists[1:]:\n        common_elements &= set(lst)  # Update common_elements by intersection\n    return common_elements", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"\n  Finds the common elements in given nested lists.\n\n  Args:\n    nested_lists: A list of lists.\n\n  Returns:\n    A set of common elements.\n  \"\"\"\n  common = set(nested_lists[0])  \n  for lst in nested_lists[1:]:\n    common &= set(lst)  \n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_list):\n  \"\"\"\n  Finds the common elements in given nested lists.\n\n  Args:\n    nested_list: A list of lists.\n\n  Returns:\n    A set of common elements.\n  \"\"\"\n\n  common = set(nested_list[0])\n  for sublist in nested_list[1:]:\n    common &= set(sublist)\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"Finds the common elements in a given list of nested lists.\n\n  Args:\n    nested_lists: A list of lists, where each inner list contains integers.\n\n  Returns:\n    A set containing the common elements in all the nested lists.\n  \"\"\"\n  common = set(nested_lists[0])\n  for lst in nested_lists[1:]:\n    common.intersection_update(set(lst))\n  return common", "matching_cluster_idx": 5}, {"solution": "def common_in_nested_lists(lists):\n    \"\"\"\n    Finds the common elements in given nested lists.\n\n    Args:\n        lists: A list of lists.\n\n    Returns:\n        A set of common elements.\n    \"\"\"\n    common = set(lists[0])  # Start with the elements of the first list\n    for lst in lists[1:]:\n        common &= set(lst)  # Intersect with each subsequent list\n    return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in a list of nested lists.\n\n    Args:\n      nested_lists: A list of lists.\n\n    Returns:\n      A set containing the common elements in all nested lists.\n    \"\"\"\n    common = set(nested_lists[0])  \n    for lst in nested_lists[1:]:\n      common &= set(lst)  \n    return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n  \"\"\"Finds the common elements in given nested lists.\n\n  Args:\n      nested_lists: A list of lists, where each inner list contains integers.\n\n  Returns:\n      A set containing the common elements in all nested lists.\n  \"\"\"\n  common = set(nested_lists[0])  # Start with the elements of the first list\n  for sublist in nested_lists[1:]:\n    common &= set(sublist)  # Intersection with subsequent lists\n  return common", "matching_cluster_idx": 6}, {"solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in a list of nested lists.\n    Args:\n      nested_lists: A list of lists.\n    Returns:\n      A set of the common elements.\n    \"\"\"\n    common = set(nested_lists[0])  \n    for lst in nested_lists[1:]:\n      common.intersection_update(set(lst))\n    return common", "matching_cluster_idx": 5}, {"solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"Finds the common elements in a list of nested lists.\n\n    Args:\n      nested_lists: A list of nested lists.\n\n    Returns:\n      A set containing the common elements in all the nested lists.\n    \"\"\"\n    common = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n      common &= set(lst)\n    return common", "matching_cluster_idx": 6}]}, "Mbpp/123": {"dps": null, "dps_norm": null, "pass@1": 5.0, "profiled": []}, "Mbpp/128": {"dps": 99.5475113122172, "dps_norm": 80.0, "pass@1": 86.0, "profiled": [{"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of words to be returned.\n    sentence: A string of words separated by spaces.\n\n  Returns:\n    A list of words from the sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  long_list = []\n  for word in words:\n    if len(word) > n:\n      long_list.append(word)\n  return long_list", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n    \"\"\"\n    Finds words that are longer than n characters from a given list of words.\n\n    Args:\n      n: The minimum length of words to be included.\n      sentence: A string of words separated by spaces.\n\n    Returns:\n      A list of words from the sentence that are longer than n characters.\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  This function finds words that are longer than n characters from a given list of words.\n\n  Args:\n      n: An integer representing the minimum word length.\n      sentence: A string containing space-separated words.\n\n  Returns:\n      A list of words from the input sentence that are longer than n characters.\n  \"\"\"\n\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  This function takes an integer n and a string sentence as input.\n  It returns a list of words from the sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  long_word_list = [word for word in words if len(word) > n]\n  return long_word_list", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of words to keep.\n    sentence: A string containing words separated by spaces.\n\n  Returns:\n    A list of words from the sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of words to include.\n    sentence: A string containing words separated by spaces.\n\n  Returns:\n    A list of words from the sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n      n: The minimum length of words to include.\n      sentence: A string of words separated by spaces.\n\n  Returns:\n      A list of words from the input sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, text):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of words to keep.\n    text: A string containing space-separated words.\n\n  Returns:\n    A list of words longer than n characters.\n  \"\"\"\n  words = text.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}, {"solution": "def long_words(n,sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n  \"\"\"\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of the words to be returned.\n    sentence: A string of words separated by spaces.\n\n  Returns:\n    A list of words longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n  \"\"\"\n  words = sentence.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}, {"solution": "def long_words(n, text):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n      n: The minimum length of words to include.\n      text: A string of words separated by spaces.\n\n  Returns:\n      A list of words longer than n characters.\n  \"\"\"\n  words = text.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n      n: The minimum length of words to return.\n      sentence: A string containing a list of words separated by spaces.\n\n  Returns:\n      A list of words from the sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n    \"\"\"\n    Finds words that are longer than n characters from a given list of words.\n\n    Args:\n      n: The minimum length of words to include.\n      sentence: A string of words separated by spaces.\n\n    Returns:\n      A list of words from the input sentence that are longer than n characters.\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, text):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of words to keep.\n    text: A string of words separated by spaces.\n\n  Returns:\n    A list of words from the input string that are longer than n characters.\n  \"\"\"\n  words = text.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of a word to be considered long.\n    sentence: A string containing words separated by spaces.\n\n  Returns:\n    A list of words from the sentence that are longer than n characters.\n  \"\"\"\n\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words longer than n characters from a given list of words.\n\n  Args:\n      n: The minimum length of words to return.\n      sentence: A string containing space-separated words.\n\n  Returns:\n      A list of words from the sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words that are longer than n characters from a given list of words.\n  \n  Args:\n    n: The minimum length of the words to include.\n    sentence: A string of words separated by spaces.\n\n  Returns:\n    A list of words from the input sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of words to include.\n    sentence: A string of words separated by spaces.\n\n  Returns:\n    A list of words from the sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  long_words = [word for word in words if len(word) > n]\n  return long_words", "matching_cluster_idx": 3}, {"solution": "def long_words(n, sentence):\n  \"\"\"\n  Finds words longer than n characters from a given list of words.\n\n  Args:\n    n: The minimum length of the words to return.\n    sentence: A string of words separated by spaces.\n\n  Returns:\n    A list of words from the input sentence that are longer than n characters.\n  \"\"\"\n  words = sentence.split()\n  return [word for word in words if len(word) > n]", "matching_cluster_idx": 3}]}, "Mbpp/129": {"dps": 64.46428571428572, "dps_norm": 95.33333333333333, "pass@1": 92.0, "profiled": [{"solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n        if sum([matrix[j][i] for j in range(n)]) != magic_sum:\n            return False\n    return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Checks if a given matrix is a magic square.\n\n    Args:\n      matrix: A list of lists representing a square matrix.\n\n    Returns:\n      True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the magic sum\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:  # Check rows\n            return False\n        if sum([matrix[j][i] for j in range(n)]) != magic_sum:  # Check columns\n            return False\n    \n    # Check diagonals\n    if sum([matrix[i][i] for i in range(n)]) != magic_sum:\n        return False\n    if sum([matrix[i][n-i-1] for i in range(n)]) != magic_sum:\n        return False\n    return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Calculates whether the matrix is a magic square.\n\n    Args:\n        matrix: A 2D list representing the matrix.\n\n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False  # Check each row for equal sum\n\n    for j in range(n):\n        if sum([matrix[i][j] for i in range(n)]) != magic_sum:\n            return False  # Check each column for equal sum\n\n    if sum([matrix[i][i] for i in range(n)]) != magic_sum:\n        return False  # Check the primary diagonal\n\n    if sum([matrix[i][n-i-1] for i in range(n)]) != magic_sum:\n        return False  # Check the secondary diagonal\n\n    return True  # All checks passed, it's a magic square", "matching_cluster_idx": 14}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  Calculate whether the matrix is a magic square.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0])\n  for i in range(n):\n    if sum(matrix[i]) != magic_sum:\n      return False\n    if sum([matrix[j][i] for j in range(n)]) != magic_sum:\n      return False\n  return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  This function determines if a given matrix is a magic square.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0])\n  for i in range(n):\n    if sum(matrix[i]) != magic_sum:\n      return False\n  for j in range(n):\n    if sum([matrix[i][j] for i in range(n)]) != magic_sum:\n      return False\n  return True", "matching_cluster_idx": 14}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Calculates whether the matrix is a magic square.\n\n    Args:\n        matrix: A 2D list representing the matrix.\n\n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    n = len(matrix)\n    magic_sum = sum(matrix[0]) \n\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n        if sum([matrix[j][i] for j in range(n)]) != magic_sum:\n            return False\n    return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Write a function to calculate whether the matrix is a magic square.\n    assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])\n    \n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n    \n    for j in range(n):\n        if sum([matrix[i][j] for i in range(n)]) != magic_sum:\n            return False\n    \n    return True\nmatrix = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]", "matching_cluster_idx": 14}, {"solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the magic sum\n    for i in range(n):\n      if sum(matrix[i]) != magic_sum:\n        return False\n    for j in range(n):\n      if sum([matrix[i][j] for i in range(n)]) != magic_sum:\n        return False\n    return True", "matching_cluster_idx": 14}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  Calculates whether the matrix is a magic square.\n\n  Args:\n    matrix: A 2D list representing the matrix.\n\n  Returns:\n    True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n\n  for i in range(n):\n    # Check rows\n    if sum(matrix[i]) != magic_sum:\n      return False\n    # Check columns\n    if sum([matrix[j][i] for j in range(n)]) != magic_sum:\n      return False\n\n  # Check diagonals\n  if sum([matrix[i][i] for i in range(n)]) != magic_sum:\n    return False\n  if sum([matrix[i][n-i-1] for i in range(n)]) != magic_sum:\n    return False\n\n  return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  Checks if a given matrix is a magic square.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n\n  Returns:\n      True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n\n  for i in range(n):\n    if sum(matrix[i]) != magic_sum:  # Check if each row sums to magic_sum\n      return False\n    if sum([matrix[j][i] for j in range(n)]) != magic_sum:  # Check if each column sums to magic_sum\n      return False\n  if sum([matrix[i][i] for i in range(n)]) != magic_sum:  # Check the primary diagonal\n    return False\n  if sum([matrix[i][n-i-1] for i in range(n)]) != magic_sum:  # Check the secondary diagonal\n    return False\n\n  return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  Calculates whether the matrix is a magic square.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0]) \n  for i in range(n):\n    if sum(matrix[i]) != magic_sum:\n      return False\n    if sum([matrix[j][i] for j in range(n)]) != magic_sum:\n      return False\n  return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  This function checks if a given matrix is a magic square.\n  Args:\n    matrix: A 2D list representing a square matrix.\n  Returns:\n    True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0])\n  for i in range(n):\n    if sum(matrix[i]) != magic_sum:\n      return False\n    if sum([matrix[j][i] for j in range(n)]) != magic_sum:\n      return False\n  return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  Checks if a matrix is a magic square.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n  for i in range(n):\n    if sum(matrix[i]) != magic_sum:  # Check if each row sums to the magic sum\n      return False\n    if sum([matrix[j][i] for j in range(n)]) != magic_sum:  # Check if each column sums to the magic sum\n      return False\n  \n  return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Calculates whether the matrix is a magic square.\n\n    Args:\n      matrix: A list of lists representing the matrix.\n\n    Returns:\n      True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the magic sum\n\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False  # Check row sums\n\n    for j in range(n):\n        if sum([matrix[i][j] for i in range(n)]) != magic_sum:\n            return False  # Check column sums\n\n    # Check diagonals\n    if sum([matrix[i][i] for i in range(n)]) != magic_sum:\n        return False\n    if sum([matrix[i][n - 1 - i] for i in range(n)]) != magic_sum:\n        return False\n\n    return True", "matching_cluster_idx": 14}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Calculates whether the matrix is a magic square.\n\n    Args:\n      matrix: A list of lists representing the matrix.\n\n    Returns:\n      True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:  # Check row sums\n            return False\n        if sum([matrix[j][i] for j in range(n)]) != magic_sum:  # Check column sums\n            return False\n\n    if sum([matrix[i][i] for i in range(n)]) != magic_sum:  # Check diagonal sums\n        return False\n    if sum([matrix[i][n-i-1] for i in range(n)]) != magic_sum:  # Check anti-diagonal sums\n        return False\n    \n    return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  Calculates whether the matrix is a magic square.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n\n  Returns:\n    True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  magic_sum = sum(matrix[0])  # Calculate the magic sum\n  for i in range(n):\n    if sum(matrix[i]) != magic_sum:  # Check rows\n      return False\n    if sum([matrix[j][i] for j in range(n)]) != magic_sum:  # Check columns\n      return False\n  if sum([matrix[i][i] for i in range(n)]) != magic_sum:  # Check diagonals\n    return False\n  if sum([matrix[i][n-i-1] for i in range(n)]) != magic_sum:  # Check diagonals\n    return False\n  return True\nmatrix = [[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Checks if a matrix is a magic square.\n\n    A magic square is a square matrix where the sum of each row, column,\n    and diagonal is equal.\n\n    Args:\n        matrix: A list of lists representing the square matrix.\n\n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix) \n    magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:  # Check rows\n            return False\n        if sum([matrix[j][i] for j in range(n)]) != magic_sum:  # Check columns\n            return False\n    \n    if sum([matrix[i][i] for i in range(n)]) != magic_sum:  # Check primary diagonal\n        return False\n    if sum([matrix[i][n-i-1] for i in range(n)]) != magic_sum:  # Check secondary diagonal\n        return False\n\n    return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the magic sum from the first row\n    for i in range(n):\n        if sum(matrix[i]) != magic_sum:\n            return False\n        if sum([matrix[j][i] for j in range(n)]) != magic_sum:\n            return False\n    return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n  \"\"\"\n  Calculates whether the matrix is a magic square.\n\n  Args:\n    matrix: A 2D list representing the matrix.\n\n  Returns:\n    True if the matrix is a magic square, False otherwise.\n  \"\"\"\n  n = len(matrix)\n  total_sum = sum(matrix[0]) \n  for i in range(n):\n    if sum(matrix[i]) != total_sum:\n      return False\n    if sum([matrix[j][i] for j in range(n)]) != total_sum:\n      return False\n  return True", "matching_cluster_idx": 13}, {"solution": "def magic_square_test(matrix):\n    \"\"\"\n    Checks if a given matrix is a magic square.\n\n    Args:\n        matrix: A list of lists representing a square matrix.\n\n    Returns:\n        True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    for col in range(n):\n        if sum([matrix[row][col] for row in range(n)]) != magic_sum:\n            return False\n\n    # Check the diagonals\n    if sum([matrix[i][i] for i in range(n)]) != magic_sum:\n        return False\n    if sum([matrix[i][n - i - 1] for i in range(n)]) != magic_sum:\n        return False\n\n    return True", "matching_cluster_idx": 14}]}, "Mbpp/130": {"dps": 78.32959641255606, "dps_norm": 69.16666666666667, "pass@1": 100.0, "profiled": [{"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n  Args:\n    data: A list of items.\n  Returns:\n    The item with the maximum frequency.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  \n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n  \n  Args:\n      data: A list of items.\n\n  Returns:\n      The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n\n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    data: A list of items.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n      data: A list of integers.\n\n  Returns:\n      The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n\n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n      data: A list of integers.\n\n    Returns:\n      The item with the maximum frequency in the list.\n    \"\"\"\n    frequency = {}\n    for item in data:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    max_item = None\n    max_count = 0\n    for item, count in frequency.items():\n        if count > max_count:\n            max_count = count\n            max_item = item\n    return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n      data: A list of items.\n\n  Returns:\n      The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  return max(counts, key=counts.get)", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(nums):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n        nums: A list of numbers.\n\n    Returns:\n        The item with the maximum frequency.\n    \"\"\"\n    counts = {}\n    for num in nums:\n        if num in counts:\n            counts[num] += 1\n        else:\n            counts[num] = 1\n\n    max_count = 0\n    max_item = None\n    for num, count in counts.items():\n        if count > max_count:\n            max_count = count\n            max_item = num\n    return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n      data: A list of integers.\n\n  Returns:\n      The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  \n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(nums):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for num in nums:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n  \n  max_count = 0\n  max_item = None\n  for num, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = num\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(nums):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for num in nums:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n\n  max_count = 0\n  max_item = None\n  for num, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = num\n  return max_item", "matching_cluster_idx": 3}, {"solution": "from collections import Counter\ndef max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    data: A list of items.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = Counter(data)\n  return counts.most_common(1)[0][0]", "matching_cluster_idx": 4}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    data: A list of items.\n\n  Returns:\n    The item with maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(nums):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The integer with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for num in nums:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n  max_count = 0\n  max_item = None\n  for num, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = num\n  return max_item", "matching_cluster_idx": 3}, {"solution": "from collections import Counter\ndef max_occurrences(data):\n  \"\"\"Finds the item with maximum frequency in a given list.\n\n  Args:\n    data: A list of items.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = Counter(data)\n  return counts.most_common(1)[0][0]", "matching_cluster_idx": 4}, {"solution": "from collections import Counter\ndef max_occurrences(nums):\n  \"\"\"Finds the item with maximum frequency in a list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The item with the maximum frequency.\n  \"\"\"\n  counts = Counter(nums)\n  return counts.most_common(1)[0][0]", "matching_cluster_idx": 4}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    data: A list of integers.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    data: A list of integers.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  max_count = 0\n  max_item = None\n  for item, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = item\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(nums):\n  \"\"\"Finds the item with maximum frequency in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for num in nums:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n  max_count = 0\n  max_item = None\n  for num, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = num\n  return max_item", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(data):\n  \"\"\"Finds the item with maximum frequency in a given list.\n\n  Args:\n    data: A list of items.\n\n  Returns:\n    The item with the maximum frequency.\n  \"\"\"\n  counts = {}\n  for item in data:\n    if item in counts:\n      counts[item] += 1\n    else:\n      counts[item] = 1\n  return max(counts, key=counts.get)", "matching_cluster_idx": 3}, {"solution": "def max_occurrences(nums):\n  \"\"\"\n  Finds the item with maximum frequency in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The item with the maximum frequency in the list.\n  \"\"\"\n  counts = {}\n  for num in nums:\n    if num in counts:\n      counts[num] += 1\n    else:\n      counts[num] = 1\n  max_count = 0\n  max_item = None\n  for num, count in counts.items():\n    if count > max_count:\n      max_count = count\n      max_item = num\n  return max_item", "matching_cluster_idx": 3}]}, "Mbpp/137": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/140": {"dps": 78.33850931677019, "dps_norm": 73.75, "pass@1": 100.0, "profiled": [{"solution": "def extract_singly(lst):\n  \"\"\"\n  Extracts unique elements from a list of lists into a set.\n\n  Args:\n    lst: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set containing all unique numbers from the input list of lists.\n  \"\"\"\n  return set([number for inner_list in lst for number in inner_list])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(data):\n  \"\"\"Flattens a list of lists into a single set of numbers.\n\n  Args:\n    data: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set containing all the numbers from the input lists.\n  \"\"\"\n  return set([number for sublist in data for number in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(nested_list):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    nested_list: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set containing all the unique numbers from the nested list.\n  \"\"\"\n  return set([num for sublist in nested_list for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(list_of_lists):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    list_of_lists: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set containing all the numbers from the input list of lists.\n  \"\"\"\n  return set([num for sublist in list_of_lists for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(list_of_lists):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    list_of_lists: A list of lists containing numbers.\n\n  Returns:\n    A set containing all the unique numbers from the input list of lists.\n  \"\"\"\n  return set([num for sublist in list_of_lists for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(input_list):\n    \"\"\"\n    Flattens a list of lists into a single set of numbers.\n\n    Args:\n      input_list: A list of lists, where each inner list contains numbers.\n\n    Returns:\n      A set containing all the unique numbers from the input list.\n    \"\"\"\n    return set([num for sublist in input_list for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(nested_list):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    nested_list: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set containing all the numbers from the nested list.\n  \"\"\"\n  return set([number for sublist in nested_list for number in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(lst):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    lst: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set containing all the numbers from the input list of lists.\n  \"\"\"\n  return set([num for sublist in lst for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(lst):\n  \"\"\"\n  This function flattens a list of lists into a single set of numbers.\n\n  Args:\n    lst: A list of lists, where each sublist contains integers.\n\n  Returns:\n    A set containing all the unique numbers from the input list of lists.\n  \"\"\"\n  return set([num for sublist in lst for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(nested_list):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n  \n  Args:\n    nested_list: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set containing all the unique numbers from the nested list.\n  \"\"\"\n  return set([num for sublist in nested_list for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(lists):\n    \"\"\"\n    Flattens a list of lists into a single set of numbers.\n\n    Args:\n      lists: A list of lists.\n\n    Returns:\n      A set of numbers extracted from the input lists.\n    \"\"\"\n    return set([num for sublist in lists for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(data):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    data: A list of lists.\n\n  Returns:\n    A set containing all the numbers from the input list of lists.\n  \"\"\"\n  return set([num for sublist in data for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(nested_list):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    nested_list: A list of lists.\n\n  Returns:\n    A set of all the numbers in the nested list.\n  \"\"\"\n  return set([num for sublist in nested_list for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(lst):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    lst: A list of lists, where each inner list contains numbers.\n\n  Returns:\n    A set of all the numbers from the input lists, without duplicates.\n  \"\"\"\n  flat_list = [num for sublist in lst for num in sublist]\n  return set(flat_list)", "matching_cluster_idx": 5}, {"solution": "def extract_singly(nested_list):\n    \"\"\"\n    Flattens a list of lists into a single set of numbers.\n\n    Args:\n        nested_list (list): A list of lists, where each inner list contains numbers.\n\n    Returns:\n        set: A set containing all the unique numbers from the nested list.\n    \"\"\"\n    flattened_list = [num for sublist in nested_list for num in sublist]\n    return set(flattened_list)", "matching_cluster_idx": 5}, {"solution": "def extract_singly(data):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n      data: A list of lists.\n\n  Returns:\n      A set containing all the numbers from the input lists.\n  \"\"\"\n  return set([number for sublist in data for number in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(data):\n    \"\"\"\n    Flattens a list of lists into a single set of numbers.\n\n    Args:\n        data: A list of lists of numbers.\n\n    Returns:\n        A set containing all the numbers from the input list of lists.\n    \"\"\"\n    flattened_set = set()\n    for sublist in data:\n      for number in sublist:\n        flattened_set.add(number)\n    return flattened_set", "matching_cluster_idx": 3}, {"solution": "def extract_singly(nested_list):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    nested_list: A list of lists.\n\n  Returns:\n    A set containing all the unique numbers from the nested list.\n  \"\"\"\n  flat_list = [num for sublist in nested_list for num in sublist]\n  return set(flat_list)", "matching_cluster_idx": 5}, {"solution": "def extract_singly(list_of_lists):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n    list_of_lists: A list of lists containing numbers.\n\n  Returns:\n    A set containing all the unique numbers from the input list of lists.\n  \"\"\"\n  return set([num for sublist in list_of_lists for num in sublist])", "matching_cluster_idx": 5}, {"solution": "def extract_singly(lst):\n  \"\"\"\n  Flattens a list of lists into a single set of numbers.\n\n  Args:\n      lst: A list of lists, where each inner list contains numbers.\n\n  Returns:\n      A set containing all the numbers from the input lists.\n  \"\"\"\n  return set([num for sublist in lst for num in sublist])", "matching_cluster_idx": 5}]}, "Mbpp/141": {"dps": 86.64399092970523, "dps_norm": 46.875, "pass@1": 57.0, "profiled": [{"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        max_index = arr.index(max(arr[: i + 1]))\n        \n        # Flip the subarray from 0 to max_index\n        arr[:max_index + 1] = arr[:max_index + 1][::-1]\n        \n        # Flip the subarray from 0 to i\n        arr[:i + 1] = arr[:i + 1][::-1]\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(nums):\n    n = len(nums)\n    for i in range(n - 1, 0, -1):\n        max_index = nums.index(max(nums[:i+1]))\n        \n        # Flip the sublist from 0 to max_index\n        nums[:max_index+1] = reversed(nums[:max_index+1])\n        \n        # Flip the sublist from 0 to i\n        nums[:i+1] = reversed(nums[:i+1])\n    return nums", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        max_index = arr.index(max(arr[:i+1]))\n        # Flip the subarray from index 0 to max_index\n        arr[0:max_index+1] = arr[0:max_index+1][::-1]\n        # Flip the subarray from index 0 to i\n        arr[0:i+1] = arr[0:i+1][::-1]\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        max_index = arr.index(max(arr[:i+1]))\n        if max_index != i:\n            # Flip the subarray from 0 to max_index\n            arr[:max_index+1] = arr[:max_index+1][::-1]\n            # Flip the subarray from 0 to i\n            arr[:i+1] = arr[:i+1][::-1]\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        max_idx = arr.index(max(arr[:i + 1]))\n        if max_idx != i:\n            # Flip the subarray from 0 to max_idx\n            arr[:max_idx + 1] = arr[:max_idx + 1][::-1]\n            print(f\"Flipped {arr[:max_idx+1]}\")\n            # Flip the subarray from 0 to i\n            arr[:i + 1] = arr[:i + 1][::-1]\n            print(f\"Flipped {arr[:i+1]}\")\n    return arr", "matching_cluster_idx": 2}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        max_index = arr.index(max(arr[:i + 1]))\n        \n        # Flip the subarray from 0 to max_index\n        arr[:max_index + 1] = arr[:max_index + 1][::-1]\n        \n        # Flip the subarray from 0 to i\n        arr[:i + 1] = arr[:i + 1][::-1]\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n  n = len(arr)\n  for i in range(n - 1, 0, -1):\n    max_index = arr.index(max(arr[:i + 1]))\n    if max_index != i:\n      # Flip the subarray from the start to max_index\n      arr[:max_index + 1] = arr[:max_index + 1][::-1]\n      # Flip the subarray from start to i\n      arr[:i + 1] = arr[:i + 1][::-1]\n  return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        max_index = arr.index(max(arr[:i+1]))\n        if max_index != i:\n            # Flip the subarray from 0 to max_index\n            arr[0:max_index+1] = reversed(arr[0:max_index+1])\n            # Flip the subarray from 0 to i\n            arr[0:i+1] = reversed(arr[0:i+1])\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        max_index = arr.index(max(arr[:i+1]))\n        if max_index != i:\n            # Flip the subarray from 0 to max_index\n            arr[:max_index+1] = arr[:max_index+1][::-1]\n            # Flip the subarray from 0 to i\n            arr[:i+1] = arr[:i+1][::-1]\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n  \"\"\"\n  Sorts a list of elements using the Pancake Sort algorithm.\n\n  Args:\n      arr: The list of elements to sort.\n\n  Returns:\n      The sorted list.\n  \"\"\"\n  n = len(arr)\n  for i in range(n-1, 0, -1):\n    max_index = arr.index(max(arr[:i+1]))\n    if max_index != i:\n      # Flip the subarray from 0 to max_index\n      arr[:max_index+1] = arr[:max_index+1][::-1]\n      # Flip the subarray from 0 to i\n      arr[:i+1] = arr[:i+1][::-1]\n  return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n  \"\"\"\n  Sorts a list of elements using the Pancake Sort algorithm.\n\n  Args:\n    arr: A list of elements to sort.\n\n  Returns:\n    The sorted list.\n  \"\"\"\n  n = len(arr)\n  for i in range(n - 1, 0, -1):\n    max_index = arr.index(max(arr[:i+1]))\n    # Flip the subarray from 0 to max_index\n    arr[:max_index+1] = arr[:max_index+1][::-1]\n    # Flip the subarray from 0 to i\n    arr[:i+1] = arr[:i+1][::-1]\n  return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        max_idx = arr.index(max(arr[:i+1]))\n        if max_idx != i:\n            arr = reverse(arr, 0, max_idx)\n            arr = reverse(arr, 0, i)\n    return arr\ndef reverse(arr, start, end):\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n    return arr", "matching_cluster_idx": 2}, {"solution": "def pancake_sort(arr):\n  \"\"\"\n  Sorts a list of elements using the Pancake Sort algorithm.\n\n  Args:\n    arr: A list of elements to be sorted.\n\n  Returns:\n    A sorted list of elements.\n  \"\"\"\n  n = len(arr)\n  for i in range(n-1, 0, -1):\n    # Find the index of the maximum element in the unsorted part\n    max_idx = arr.index(max(arr[:i+1]))\n\n    # Move the maximum element to the beginning\n    if max_idx != i:\n      # Reverse the subarray from 0 to max_idx\n      arr[:max_idx+1] = reversed(arr[:max_idx+1])\n      print(f\"Flipped subarray: {arr}\")  \n\n      # Reverse the subarray from 0 to i\n      arr[:i+1] = reversed(arr[:i+1])\n      print(f\"Flipped subarray: {arr}\")\n\n  return arr\narr = [15, 79, 25, 38, 69]", "matching_cluster_idx": 1}, {"solution": "def pancake_sort(arr):\n    n = len(arr)\n    for i in range(n-1, 0, -1):\n        max_index = arr.index(max(arr[:i+1]))\n        \n        # Flip the subarray from 0 to max_index\n        arr[:max_index+1] = arr[:max_index+1][::-1]\n        \n        # Flip the subarray from 0 to i\n        arr[:i+1] = arr[:i+1][::-1]\n    return arr\narr = [15, 79, 25, 38, 69]", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    \"\"\"\n    Sorts a list of elements using the Pancake Sort algorithm.\n\n    Args:\n      arr: The list of elements to be sorted.\n\n    Returns:\n      The sorted list.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        # Find the index of the maximum element in the unsorted part\n        max_idx = arr.index(max(arr[:i + 1]))\n\n        # Move the maximum element to the beginning\n        if max_idx != i:\n            # Reverse the subarray from 0 to max_idx\n            arr[:max_idx + 1] = reversed(arr[:max_idx + 1])\n            # Reverse the subarray from 0 to i\n            arr[:i + 1] = reversed(arr[:i + 1])\n    return arr\narr = [15, 79, 25, 38, 69]", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n  \"\"\"Sorts a list of elements using the Pancake Sort algorithm.\"\"\"\n  n = len(arr)\n  for i in range(n - 1, 0, -1):\n    max_index = max(range(i + 1), key=lambda j: arr[j])\n    # Flip subarray from 0 to max_index\n    arr[0:max_index+1] = arr[0:max_index+1][::-1]\n    # Flip subarray from 0 to i\n    arr[0:i+1] = arr[0:i+1][::-1]\n  return arr", "matching_cluster_idx": 2}, {"solution": "def pancake_sort(arr):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Args:\n        arr: A list of integers to sort.\n\n    Returns:\n        The sorted list.\n    \"\"\"\n    n = len(arr)\n    for i in range(n - 1, 0, -1):\n        max_index = arr.index(max(arr[:i+1]))  # Find index of max element in the unsorted portion\n        # Flip the subarray from index 0 to max_index\n        arr[:max_index + 1] = reversed(arr[:max_index + 1])\n        # Flip the subarray from index 0 to i\n        arr[:i+1] = reversed(arr[:i+1])\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n  \"\"\"\n  Sorts a list of elements.\n\n  Args:\n      arr: The list to sort.\n\n  Returns:\n      The sorted list.\n  \"\"\"\n\n  n = len(arr)\n  \n  for i in range(n - 1, 0, -1):\n    max_index = arr.index(max(arr[:i+1]))\n    \n    # Flip the subarray from index 0 to max_index\n    arr[:max_index+1] = arr[:max_index+1][::-1]\n    \n    # Flip the subarray from index 0 to i \n    arr[:i+1] = arr[:i+1][::-1]\n\n  return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n    \"\"\"\n    Sorts a list of elements using the Pancake Sort algorithm.\n\n    Args:\n      arr: A list of elements to be sorted.\n\n    Returns:\n      The sorted list.\n    \"\"\"\n    n = len(arr)\n\n    def flip(arr, k):\n      arr[:k + 1] = reversed(arr[:k + 1])  # Flip the subarray from index 0 to k\n\n    for i in range(n - 1, 0, -1):\n        # Find the maximum element in the unsorted subarray\n        max_idx = arr.index(max(arr[:i + 1]))\n\n        # Move the maximum element to the front\n        if max_idx != i:\n          # Flip to bring the maximum element to the top\n          flip(arr, max_idx)\n          # Flip again to move it to the correct position\n          flip(arr, i)\n\n    return arr", "matching_cluster_idx": 3}, {"solution": "def pancake_sort(arr):\n  n = len(arr)\n  for i in range(n - 1, 0, -1):\n    # Find the index of the maximum element in the unsorted subarray\n    max_index = arr.index(max(arr[:i + 1]))\n    \n    # Move the maximum element to its correct position\n    if max_index != i:\n      # Reverse the subarray from index 0 to max_index\n      arr[:max_index + 1] = reversed(arr[:max_index + 1])\n      # Reverse the subarray from index 0 to i \n      arr[:i + 1] = reversed(arr[:i + 1])\n\n  return arr", "matching_cluster_idx": 3}]}, "Mbpp/166": {"dps": 94.39999999999999, "dps_norm": 50.0, "pass@1": 100.0, "profiled": [{"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        The number of pairs of integers in the list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n      nums: A list of integers.\n\n    Returns:\n      The number of pairs of integers in the list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The number of pairs that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that XOR to an even number.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The number of pairs that XOR to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The number of pairs that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n  \n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that xor to an even number.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The number of pairs of integers in the list that xor to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n  \"\"\"\n  Counts the number of pairs of integers in a list that XOR to an even number.\n  \"\"\"\n  count = 0\n  for i in range(len(nums)):\n    for j in range(i + 1, len(nums)):\n      if (nums[i] ^ nums[j]) % 2 == 0:\n        count += 1\n  return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n      nums: A list of integers.\n\n    Returns:\n      The number of pairs of integers in the list that xor to an even number.\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count", "matching_cluster_idx": 1}, {"solution": "def find_even_pair(nums):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n    \n    Args:\n      nums: A list of integers.\n\n    Returns:\n      The number of pairs of integers in the list that xor to an even number.\n    \n    assert find_even_pair([5, 4, 7, 2, 1]) == 4\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n      for j in range(i+1, len(nums)):\n        if (nums[i] ^ nums[j]) % 2 == 0:\n          count += 1\n    return count", "matching_cluster_idx": 1}]}, "Mbpp/170": {"dps": 95.45893719806763, "dps_norm": 97.5, "pass@1": 15.0, "profiled": [{"solution": "def sum_range_list(data, start_index, end_index):\n  \"\"\"\n  Calculates the sum of numbers in a list within a given range.\n\n  Args:\n    data: A list of numbers.\n    start_index: The starting index (inclusive) of the range.\n    end_index: The ending index (inclusive) of the range.\n\n  Returns:\n    The sum of the numbers in the specified range.\n  \"\"\"\n  if start_index < 0 or end_index >= len(data) or start_index > end_index:\n    return 0\n  return sum(data[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start_index, end_index):\n    \"\"\"\n    Finds the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        nums: A list of numbers.\n        start_index: The starting index (inclusive) of the range.\n        end_index: The ending index (inclusive) of the range.\n\n    Returns:\n        The sum of the numbers in the specified range.\n    \"\"\"\n    if start_index < 0 or end_index >= len(nums) or start_index > end_index:\n        return 0  \n    return sum(nums[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start_index, end_index):\n  \"\"\"\n  Calculates the sum of numbers in a list within a specified range.\n\n  Args:\n      nums: A list of numbers.\n      start_index: The starting index (inclusive) of the range.\n      end_index: The ending index (inclusive) of the range.\n\n  Returns:\n      The sum of numbers in the specified range.\n      Returns 0 if the range is invalid.\n  \"\"\"\n  if start_index < 0 or end_index >= len(nums) or start_index > end_index:\n    return 0\n  return sum(nums[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start, end):\n  \"\"\"\n  Finds the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n    nums: A list of numbers.\n    start: The starting index (inclusive).\n    end: The ending index (inclusive).\n\n  Returns:\n    The sum of the numbers in the specified range.\n  \"\"\"\n  return sum(nums[start:end+1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(data, start_index, end_index):\n  \"\"\"\n  Calculates the sum of numbers in a list within a given range.\n\n  Args:\n    data: A list of numbers.\n    start_index: The starting index (inclusive) of the range.\n    end_index: The ending index (inclusive) of the range.\n\n  Returns:\n    The sum of the numbers in the specified range.\n    Returns 0 if the range is invalid.\n  \"\"\"\n  if start_index < 0 or end_index >= len(data) or start_index > end_index:\n    return 0\n  return sum(data[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start_index, end_index):\n  \"\"\"\n  Finds the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n    nums: A list of numbers.\n    start_index: The starting index of the range (inclusive).\n    end_index: The ending index of the range (inclusive).\n\n  Returns:\n    The sum of the numbers in the specified range.\n    Returns 0 if the indices are invalid.\n  \"\"\"\n  if start_index < 0 or end_index >= len(nums) or start_index > end_index:\n    return 0\n  return sum(nums[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start, end):\n  \"\"\"\n  Find the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n      nums: A list of numbers.\n      start: The starting index (inclusive) of the range.\n      end: The ending index (inclusive) of the range.\n\n  Returns:\n      The sum of numbers in the specified range.\n  \"\"\"\n  return sum(nums[start:end+1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start, end):\n  \"\"\"\n  Finds the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n    nums: A list of numbers.\n    start: The starting index (inclusive) of the range.\n    end: The ending index (inclusive) of the range.\n\n  Returns:\n    The sum of the numbers in the specified range.\n  \"\"\"\n  total = 0\n  for i in range(start, end + 1):\n    total += nums[i]\n  return total", "matching_cluster_idx": 4}, {"solution": "def sum_range_list(data, start_index, end_index):\n  \"\"\"\n  This function calculates the sum of numbers in a list within a specified range.\n\n  Args:\n      data: A list of numbers.\n      start_index: The starting index (inclusive) of the range.\n      end_index: The ending index (inclusive) of the range.\n\n  Returns:\n      The sum of numbers within the specified range in the list.\n  \"\"\"\n  if start_index < 0 or end_index >= len(data) or start_index > end_index:\n    return 0  \n  return sum(data[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(lst, start_index, end_index):\n  \"\"\"\n  Calculates the sum of numbers in a list within a specified range.\n\n  Args:\n    lst: The input list of numbers.\n    start_index: The starting index (inclusive) of the range.\n    end_index: The ending index (inclusive) of the range.\n\n  Returns:\n    The sum of numbers in the specified range within the list.\n    Returns 0 if the indices are invalid.\n  \"\"\"\n  if start_index < 0 or end_index >= len(lst) or start_index > end_index:\n    return 0\n  return sum(lst[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start_index, end_index):\n  \"\"\"\n  This function calculates the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n    nums: A list of numbers.\n    start_index: The starting index (inclusive) of the range.\n    end_index: The ending index (inclusive) of the range.\n\n  Returns:\n    The sum of numbers in the specified range.\n  \"\"\"\n  if start_index < 0 or end_index >= len(nums) or start_index > end_index:\n    return 0  # Handle invalid input\n  return sum(nums[start_index:end_index+1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(data, start_index, end_index):\n  \"\"\"\n  Calculates the sum of numbers in a list within a specified range.\n\n  Args:\n    data: A list of numbers.\n    start_index: The starting index of the range (inclusive).\n    end_index: The ending index of the range (inclusive).\n\n  Returns:\n    The sum of the numbers in the specified range.\n  \"\"\"\n  if start_index < 0 or end_index >= len(data) or start_index > end_index:\n    return 0  \n  return sum(data[start_index : end_index + 1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start, end):\n  \"\"\"\n  Find the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n    nums: A list of numbers.\n    start: The starting index (inclusive) of the range.\n    end: The ending index (inclusive) of the range.\n\n  Returns:\n    The sum of the numbers within the specified range.\n  \"\"\"\n  return sum(nums[start:end+1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start, end):\n  \"\"\"\n  Finds the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n    nums: A list of numbers.\n    start: The starting index (inclusive).\n    end: The ending index (inclusive).\n\n  Returns:\n    The sum of the numbers in the specified range.\n  \"\"\"\n  return sum(nums[start:end+1])", "matching_cluster_idx": 7}, {"solution": "def sum_range_list(nums, start_index, end_index):\n  \"\"\"\n  Finds the sum of numbers in a list within a range specified by two indices.\n\n  Args:\n      nums: A list of numbers.\n      start_index: The starting index (inclusive) of the range.\n      end_index: The ending index (inclusive) of the range.\n\n  Returns:\n      The sum of numbers within the specified range in the list.\n  \"\"\"\n  return sum(nums[start_index : end_index + 1])", "matching_cluster_idx": 7}]}, "Mbpp/226": {"dps": 68.21705426356588, "dps_norm": 14.285714285714286, "pass@1": 92.0, "profiled": [{"solution": "def odd_values_string(text):\n  \"\"\"\n  Removes characters with odd index values from a given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with characters at odd indices removed.\n  \"\"\"\n  result = \"\"\n  for i in range(len(text)):\n    if i % 2 == 0:  # Check for even indices\n      result += text[i]\n  return result", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"Removes characters at odd index values from a given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    A new string with characters at odd indices removed.\n  \"\"\"\n\n  new_string = ''\n  for i in range(len(s)):\n    if i % 2 == 0:\n      new_string += s[i]\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(input_string):\n  \"\"\"\n  Removes characters from a string that have odd index values.\n\n  Args:\n    input_string: The string to process.\n\n  Returns:\n    A new string with characters at odd indices removed.\n  \"\"\"\n  return ''.join(input_string[i] for i in range(len(input_string)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(input_string):\n  \"\"\"\n  Removes characters from a string that have odd index values.\n\n  Args:\n    input_string: The string to process.\n\n  Returns:\n    A new string with characters at odd indices removed.\n  \"\"\"\n\n  return ''.join(input_string[i] for i in range(len(input_string)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(string):\n  \"\"\"\n  Removes characters from a string based on their odd index values.\n\n  Args:\n      string: The input string.\n\n  Returns:\n      A new string with characters at odd indices removed.\n  \"\"\"\n  result = ''\n  for i in range(len(string)):\n    if i % 2 == 0:  # Check if the index is even\n      result += string[i]\n  return result", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(string):\n  \"\"\"Removes characters with odd index values from a string.\n\n  Args:\n    string: The input string.\n\n  Returns:\n    The string with characters at odd indices removed.\n  \"\"\"\n  new_string = ''\n  for i in range(len(string)):\n    if i % 2 == 0:  \n      new_string += string[i]\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"\n  Removes characters at odd index values of a given string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      A new string with characters at odd index values removed.\n  \"\"\"\n  new_string = ''\n  for i in range(len(s)):\n    if i % 2 == 0:\n      new_string += s[i]\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(input_string):\n  \"\"\"Removes characters at odd index positions from a string.\n\n  Args:\n    input_string: The string to process.\n\n  Returns:\n    The string with characters at odd index positions removed.\n  \"\"\"\n  return ''.join(input_string[i] for i in range(len(input_string)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(str):\n  \"\"\"\n  This function removes the characters which have odd index values of a given string.\n\n  Args:\n      str: The input string.\n\n  Returns:\n      The string with characters at odd indices removed.\n  \"\"\"\n  new_string = \"\"\n  for i in range(len(str)):\n    if i % 2 == 0:  \n      new_string += str[i]\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"\n  Write a python function to remove the characters which have odd index values of a given string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      A new string with characters at odd indices removed.\n\n  Example:\n  odd_values_string('abcdef') == 'ace'\n  \"\"\"\n  return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(string):\n  \"\"\"\n  Removes characters with odd index values from a given string.\n  \n  Args:\n    string: The input string.\n\n  Returns:\n    The string with characters at odd indices removed.\n  \"\"\"\n  new_string = \"\"\n  for i in range(len(string)):\n    if i % 2 == 0:  # Check if the index is even\n      new_string += string[i]\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"\n  Removes characters with odd index values from a string.\n  \n  Args:\n      s: The input string.\n\n  Returns:\n      A new string with characters at odd indices removed.\n\n  \"\"\"\n  return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"Removes characters from a string at odd indices.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    A new string with characters at odd indices removed.\n  \"\"\"\n  new_string = ''\n  for i in range(len(s)):\n    if i % 2 == 0:  # Check if the index is even\n      new_string += s[i]\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"\n  Removes characters from a string at odd index values.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      The string with characters at odd indices removed.\n  \"\"\"\n  return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"\n  Removes characters with odd indices from a string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with characters at odd indices removed.\n  \"\"\"\n  return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(input_string):\n  \"\"\"\n  Removes characters with odd index values from a given string.\n\n  Args:\n    input_string: The string to process.\n\n  Returns:\n    The string with characters at odd indices removed.\n  \"\"\"\n  return ''.join(input_string[i] for i in range(len(input_string)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"\n  Removes characters from a string at odd indices.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with characters at odd indices removed.\n  \"\"\"\n  new_string = ''\n  for i in range(len(s)):\n    if i % 2 == 0:  \n      new_string += s[i]\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s: str) -> str:\n    \"\"\"\n    Removes characters at odd index values of a given string.\n    \n    Args:\n        s: The input string.\n\n    Returns:\n        The string with characters at odd index values removed.\n    \"\"\"\n    new_string = ''\n    for i in range(len(s)):\n        if i % 2 != 1:\n            new_string += s[i]\n    return new_string", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(s):\n  \"\"\"Removes characters with odd index values from a string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      A string with characters at odd indices removed.\n  \"\"\"\n  return ''.join(s[i] for i in range(len(s)) if i % 2 == 0)", "matching_cluster_idx": 0}, {"solution": "def odd_values_string(str1):\n  \"\"\"\n  Removes characters with odd index values from a string.\n\n  Args:\n      str1: The input string.\n\n  Returns:\n      A new string with characters at odd indices removed.\n  \"\"\"\n  new_string = ''\n  for i in range(len(str1)):\n    if i % 2 == 0:  # Check for even indices\n      new_string += str1[i]\n  return new_string", "matching_cluster_idx": 0}]}, "Mbpp/230": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 99.0, "profiled": [{"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n    text: The string to modify.\n    char: The character to replace the blanks with.\n\n  Returns:\n    The modified string with blanks replaced.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, character):\n  \"\"\"\n  Replaces all blank spaces in a string with a given character.\n\n  Args:\n      text: The input string.\n      character: The character to replace spaces with.\n\n  Returns:\n      The string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", character)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n  Args:\n    text: The input string.\n    char: The character to replace spaces with.\n\n  Returns:\n    The string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n    text: The input string.\n    char: The character to replace the spaces with.\n\n  Returns:\n    The string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  This function takes in a string and character, replaces blank spaces in the string with the character,\n  and returns the string.\n  \n  Args:\n      text: The string to be modified.\n      char: The character to replace the blanks with.\n  \n  Returns:\n      The modified string with blanks replaced.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  This function takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n\n  Args:\n      text: The input string.\n      char: The character to replace blank spaces with.\n\n  Returns:\n      The string with blank spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n      text: The input string.\n      char: The character to replace spaces with.\n\n  Returns:\n      The string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, character):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n    text: The input string.\n    character: The character to replace spaces with.\n\n  Returns:\n    The string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", character)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(string, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n    string: The input string.\n    char: The character to replace blank spaces with.\n\n  Returns:\n    The string with blank spaces replaced by the given character.\n  \"\"\"\n  return string.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces all blank spaces in a string with a given character.\n\n  Args:\n      text: The string to be modified.\n      char: The character to replace the spaces with.\n\n  Returns:\n      The string with spaces replaced by the specified character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  This function takes in a string and a character, \n  replaces blank spaces in the string with the character, \n  and returns the string.\n  \n  Args:\n      text: The string to be modified.\n      char: The character to replace blank spaces with.\n  \n  Returns:\n      The modified string with blank spaces replaced.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"Replaces blank spaces in a string with a given character.\n\n  Args:\n      text: The string to be modified.\n      char: The character to replace the blank spaces with.\n\n  Returns:\n      The string with blank spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(string, character):\n  \"\"\"\n  This function takes in a string and character, replaces blank spaces in the string with the character,\n  and returns the string.\n  \"\"\"\n  return string.replace(\" \", character)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n    text: The string to modify.\n    char: The character to replace the spaces with.\n\n  Returns:\n    The string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(s, c):\n    \"\"\"\n    Replaces blank spaces in a string with a given character.\n\n    Args:\n        s (str): The input string.\n        c (str): The character to replace spaces with.\n\n    Returns:\n        str: The string with spaces replaced by the given character.\n    \"\"\"\n    return s.replace(\" \", c)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n    text: The string to be modified.\n    char: The character to replace blank spaces with.\n\n  Returns:\n    The modified string with blank spaces replaced.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces all blank spaces in a string with a given character.\n\n  Args:\n    text: The input string.\n    char: The character to replace spaces with.\n\n  Returns:\n    The string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(s, char):\n  \"\"\"\n  This function takes a string and character, replaces blank spaces in the string with the character,\n  and returns the string.\n\n  Args:\n      s: The input string.\n      char: The character to replace blank spaces with.\n\n  Returns:\n      The string with all blank spaces replaced by the given character.\n  \"\"\"\n  return s.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(string, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n    string: The string to modify.\n    char: The character to replace blank spaces with.\n\n  Returns:\n    The string with blank spaces replaced by the given character.\n  \"\"\"\n  return string.replace(\" \", char)", "matching_cluster_idx": 7}, {"solution": "def replace_blank(text, char):\n  \"\"\"\n  Replaces blank spaces in a string with a given character.\n\n  Args:\n      text: The string to be modified.\n      char: The character to replace spaces with.\n\n  Returns:\n      The modified string with spaces replaced by the given character.\n  \"\"\"\n  return text.replace(\" \", char)", "matching_cluster_idx": 7}]}, "Mbpp/239": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/240": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/251": {"dps": 91.95402298850576, "dps_norm": 77.77777777777777, "pass@1": 100.0, "profiled": [{"solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in a list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to insert.\n\n    Returns:\n        list: The modified list with the element inserted before each element.\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list and returns the resulting list.\n\n  Args:\n      lst: A list of elements.\n      element: The element to insert before each existing element.\n\n  Returns:\n      A new list with the element inserted before each element of the input list.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(data, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n    data: A list of elements.\n    element: The element to insert.\n\n  Returns:\n    A new list with the element inserted before each element in the original list.\n  \"\"\"\n  result = []\n  for item in data:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n      lst: The list to modify.\n      element: The element to insert.\n\n  Returns:\n      The modified list with the element inserted before each element.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, elem):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n    lst: A list of elements.\n    elem: The element to insert.\n\n  Returns:\n    A new list with the element inserted before each element of the input list.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(elem)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n      lst: The input list.\n      element: The element to insert.\n\n  Returns:\n      A new list with the element inserted before each element in the input list.\n  \"\"\"\n  new_list = []\n  for item in lst:\n    new_list.append(element)\n    new_list.append(item)\n  return new_list", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list and returns the resulting list.\n\n  Args:\n      lst: The input list.\n      element: The element to insert.\n\n  Returns:\n      A new list with the element inserted before each element of the input list.\n  \"\"\"\n  new_lst = []\n  for item in lst:\n    new_lst.append(element)\n    new_lst.append(item)\n  return new_lst", "matching_cluster_idx": 6}, {"solution": "def insert_element(list1, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n  \n  Args:\n    list1: The input list.\n    element: The element to insert.\n  \n  Returns:\n    A new list with the element inserted before each element in the original list.\n  \"\"\"\n  new_list = []\n  for item in list1:\n    new_list.append(element)\n    new_list.append(item)\n  return new_list", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts the given element before each element in the list.\n\n  Args:\n    lst: The input list.\n    element: The element to insert.\n\n  Returns:\n    A new list with the element inserted before each element in the input list.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n      lst: The list to modify.\n      element: The element to insert.\n\n  Returns:\n      A new list with the element inserted before each element in the original list.\n  \"\"\"\n  new_list = []\n  for item in lst:\n    new_list.append(element)\n    new_list.append(item)\n  return new_list", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts the given element before each element in the list.\n\n  Args:\n      lst: The input list.\n      element: The element to insert.\n\n  Returns:\n      The list with the element inserted before each element.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n      lst: The list to modify.\n      element: The element to insert.\n\n  Returns:\n      A new list with the element inserted before each element of the original list.\n  \"\"\"\n  new_lst = []\n  for item in lst:\n    new_lst.append(element)\n    new_lst.append(item)\n  return new_lst", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  This function takes in a list and an element and inserts the element\n  before each element in the list, and returns the resulting list.\n\n  Args:\n    lst: The list to insert the element into.\n    element: The element to insert.\n\n  Returns:\n    A new list with the element inserted before each element in the original list.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n      lst: The input list.\n      element: The element to insert.\n\n  Returns:\n      A new list with the element inserted before each element in the input list.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts the given element before each element in the list.\n\n  Args:\n      lst: The input list.\n      element: The element to insert.\n\n  Returns:\n      A new list with the element inserted before each element in the input list.\n  \"\"\"\n  new_lst = []\n  for item in lst:\n    new_lst.append(element)\n    new_lst.append(item)\n  return new_lst", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n      lst: The input list.\n      element: The element to insert.\n\n  Returns:\n      A new list with the element inserted before each element in the input list.\n  \"\"\"\n  new_list = []\n  for item in lst:\n    new_list.append(element)\n    new_list.append(item)\n  return new_list", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n    \"\"\"\n    This function takes in a list and an element and inserts the element\n    before each element in the list, and returns the resulting list.\n    For example:\n    insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"Inserts the given element before each element in a list.\n\n  Args:\n    lst: The input list.\n    element: The element to be inserted.\n\n  Returns:\n    A new list with the element inserted before each element in the input list.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts an element before each element in a list.\n\n  Args:\n    lst: The input list.\n    element: The element to insert.\n\n  Returns:\n    A new list with the element inserted before each element in the input list.\n  \"\"\"\n  result = []\n  for item in lst:\n    result.append(element)\n    result.append(item)\n  return result", "matching_cluster_idx": 6}, {"solution": "def insert_element(lst, element):\n  \"\"\"\n  Inserts the element before each element in the list and returns the resulting list.\n\n  Args:\n    lst: The input list.\n    element: The element to insert.\n\n  Returns:\n    A new list with the element inserted before each element in the input list.\n  \"\"\"\n  new_lst = []\n  for item in lst:\n    new_lst.append(element)\n    new_lst.append(item)\n  return new_lst", "matching_cluster_idx": 6}]}, "Mbpp/256": {"dps": 73.05936073059361, "dps_norm": 67.05882352941177, "pass@1": 100.0, "profiled": [{"solution": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than a given non-negative number.\n\n    Args:\n        n: A non-negative integer.\n\n    Returns:\n        The count of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Counts the number of prime numbers less than the given non-negative number.\n\n  Args:\n      n: A non-negative integer.\n\n  Returns:\n      The number of prime numbers less than n.\n  \"\"\"\n  count = 0\n  for num in range(2, n):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(num):\n  \"\"\"\n  Counts the number of prime numbers less than the given non-negative number.\n\n  Args:\n    num: A non-negative integer.\n\n  Returns:\n    The number of prime numbers less than num.\n  \"\"\"\n  if num <= 1:\n    return 0\n  primes = [True] * num\n  primes[0] = primes[1] = False\n  for i in range(2, int(num**0.5) + 1):\n    if primes[i]:\n      for j in range(i * i, num, i):\n        primes[j] = False\n  return sum(primes)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    assert count_Primes_nums(5) == 2\n    \"\"\"\n    if n <= 1:\n        return 0\n    prime = [True] * n\n    prime[0] = prime[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if prime[i]:\n            for j in range(i * i, n, i):\n                prime[j] = False\n    return sum(prime)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Counts the number of prime numbers less than n.\n\n  Args:\n      n: A non-negative integer.\n\n  Returns:\n      The number of prime numbers less than n.\n  \"\"\"\n\n  count = 0\n  for num in range(2, n):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Given a non-negative integer n, returns the number of prime numbers less than n.\n\n  Args:\n      n: A non-negative integer.\n\n  Returns:\n      The number of prime numbers less than n.\n  \"\"\"\n  if n <= 1:\n    return 0\n  prime = [True] * n\n  prime[0] = prime[1] = False\n  for i in range(2, int(n**0.5) + 1):\n    if prime[i]:\n      for j in range(i * i, n, i):\n        prime[j] = False\n  return sum(prime)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(num):\n  \"\"\"\n  This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n  \n  For example:\n  count_Primes_nums(5) == 2\n  \"\"\"\n  count = 0\n  for i in range(2, num):\n    is_prime = True\n    for j in range(2, int(i**0.5) + 1):\n      if i % j == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Args:\n      n: A non-negative integer.\n\n    Returns:\n      The number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  This function takes a non-negative number and returns the number of prime numbers less than the given non-negative number.\n  \n  Args:\n      n: A non-negative integer.\n\n  Returns:\n      An integer representing the count of prime numbers less than n.\n  \"\"\"\n\n  if n <= 1:\n    return 0\n  primes = [True] * n\n  primes[0] = primes[1] = False\n  for i in range(2, int(n**0.5) + 1):\n    if primes[i]:\n      for j in range(i * i, n, i):\n        primes[j] = False\n  return sum(primes)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    assert count_Primes_nums(5) == 2\n    \"\"\"\n    if n <= 1:\n        return 0\n    prime = [True] * n\n    prime[0] = prime[1] = False\n    for i in range(2, int(n ** 0.5) + 1):\n        if prime[i]:\n            for j in range(i * i, n, i):\n                prime[j] = False\n    return sum(prime)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Args:\n      n: A non-negative integer.\n\n    Returns:\n      The number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Counts the number of prime numbers less than a given non-negative number.\n\n  Args:\n    n: A non-negative integer.\n\n  Returns:\n    The number of prime numbers less than n.\n  \"\"\"\n  count = 0\n  for num in range(2, n):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    For example:\n    count_Primes_nums(5) == 2\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Counts the number of prime numbers less than the given non-negative number.\n\n  Args:\n    n: A non-negative integer.\n\n  Returns:\n    The number of prime numbers less than n.\n  \"\"\"\n  if n <= 1:\n    return 0\n  primes = [True] * n\n  primes[0] = primes[1] = False\n  for i in range(2, int(n**0.5) + 1):\n    if primes[i]:\n      for j in range(i * i, n, i):\n        primes[j] = False\n  return sum(primes)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than the given non-negative number.\n\n    Args:\n      n: A non-negative integer.\n\n    Returns:\n      The number of prime numbers less than n.\n    \"\"\"\n    if n <= 1:\n      return 0 \n    primes = [True] * n \n    primes[0] = primes[1] = False\n    for i in range(2, int(n**0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n, i):\n                primes[j] = False\n    return sum(primes)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than a given non-negative number.\n\n    Args:\n      n: A non-negative integer.\n\n    Returns:\n      The number of prime numbers less than n.\n    \"\"\"\n    count = 0\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            count += 1\n    return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n  Args:\n      n: A non-negative integer.\n\n  Returns:\n      The number of prime numbers less than n.\n  \"\"\"\n  if n <= 1:\n    return 0\n  primes = [True] * n\n  primes[0] = primes[1] = False\n  for i in range(2, int(n**0.5) + 1):\n    if primes[i]:\n      for j in range(i * i, n, i):\n        primes[j] = False\n  return sum(primes)", "matching_cluster_idx": 14}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Counts the number of prime numbers less than the given non-negative number.\n\n  Args:\n    n: A non-negative integer.\n\n  Returns:\n    The number of prime numbers less than n.\n  \"\"\"\n  count = 0\n  for num in range(2, n):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Counts the number of prime numbers less than a given non-negative number.\n\n  Args:\n    n: A non-negative integer.\n\n  Returns:\n    The number of prime numbers less than n.\n  \"\"\"\n  count = 0\n  for num in range(2, n):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "matching_cluster_idx": 8}, {"solution": "def count_Primes_nums(n):\n  \"\"\"\n  Counts the number of prime numbers less than the given non-negative number.\n\n  Args:\n    n: A non-negative integer.\n\n  Returns:\n    The number of prime numbers less than n.\n  \"\"\"\n  count = 0\n  for num in range(2, n):\n    is_prime = True\n    for i in range(2, int(num**0.5) + 1):\n      if num % i == 0:\n        is_prime = False\n        break\n    if is_prime:\n      count += 1\n  return count", "matching_cluster_idx": 8}]}, "Mbpp/265": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/281": {"dps": 94.25, "dps_norm": 84.0909090909091, "pass@1": 100.0, "profiled": [{"solution": "def all_unique(data):\n  \"\"\"\n  Checks if the elements of a given list are unique.\n\n  Args:\n    data: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(set(data)) == len(data)", "matching_cluster_idx": 8}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  seen = set()\n  for item in lst:\n    if item in seen:\n      return False\n    seen.add(item)\n  return True", "matching_cluster_idx": 9}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if the elements of a given list are unique or not.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements in the list are unique, False otherwise.\n  \"\"\"\n  return len(set(lst)) == len(lst)", "matching_cluster_idx": 8}, {"solution": "def all_unique(list1):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    list1: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(list1) == len(set(list1))", "matching_cluster_idx": 8}, {"solution": "def all_unique(data):\n    \"\"\"\n    Checks if all elements in a list are unique.\n\n    Args:\n        data: A list of elements.\n\n    Returns:\n        True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(set(data)) == len(data)", "matching_cluster_idx": 8}, {"solution": "def all_unique(data):\n  \"\"\"Checks if all elements in a list are unique.\n\n  Args:\n    data: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(set(data)) == len(data)", "matching_cluster_idx": 8}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n      lst: A list of elements.\n\n  Returns:\n      True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(set(lst)) == len(lst)", "matching_cluster_idx": 8}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements in the list are unique, False otherwise.\n  \"\"\"\n  seen = set()\n  for element in lst:\n    if element in seen:\n      return False\n    seen.add(element)\n  return True", "matching_cluster_idx": 9}, {"solution": "def all_unique(list1):\n  \"\"\"\n  Checks if the elements of a given list are unique or not.\n\n  Args:\n    list1: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n\n  seen = set()\n  for element in list1:\n    if element in seen:\n      return False\n    seen.add(element)\n  return True", "matching_cluster_idx": 9}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(set(lst)) == len(lst)", "matching_cluster_idx": 8}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(set(lst)) == len(lst)", "matching_cluster_idx": 8}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if the elements of a given list are unique or not.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements in the list are unique, False otherwise.\n  \"\"\"\n  return len(lst) == len(set(lst))", "matching_cluster_idx": 8}, {"solution": "def all_unique(data):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    data: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  seen = set()\n  for item in data:\n    if item in seen:\n      return False\n    seen.add(item)\n  return True", "matching_cluster_idx": 9}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(set(lst)) == len(lst)", "matching_cluster_idx": 8}, {"solution": "def all_unique(data):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n      data: A list of elements.\n\n  Returns:\n      True if all elements are unique, False otherwise.\n  \"\"\"\n  seen = set()\n  for item in data:\n    if item in seen:\n      return False\n    seen.add(item)\n  return True", "matching_cluster_idx": 9}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(set(lst)) == len(lst)", "matching_cluster_idx": 8}, {"solution": "def all_unique(lst):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(lst) == len(set(lst))", "matching_cluster_idx": 8}, {"solution": "def all_unique(data):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n    data: A list of elements.\n\n  Returns:\n    True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(data) == len(set(data))", "matching_cluster_idx": 8}, {"solution": "def all_unique(data):\n  \"\"\"\n  Checks if all elements in a list are unique.\n\n  Args:\n      data: A list of elements.\n\n  Returns:\n      True if all elements are unique, False otherwise.\n  \"\"\"\n  return len(data) == len(set(data))", "matching_cluster_idx": 8}, {"solution": "def all_unique(data):\n    \"\"\"\n    Checks if all elements in a list are unique.\n\n    Args:\n        data: A list of elements.\n\n    Returns:\n        True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(data) == len(set(data))", "matching_cluster_idx": 8}]}, "Mbpp/296": {"dps": 16.41025641025641, "dps_norm": 58.333333333333336, "pass@1": 99.0, "profiled": [{"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  Counts the number of inversions in an array.\n  An inversion is a pair of elements where the first element is greater than the second element.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    The number of inversions in the array.\n  \"\"\"\n\n  count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        count += 1\n  return count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    Args:\n      arr: A list of integers.\n\n    Returns:\n      The number of inversions in the array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 3}, {"solution": "def merge_sort_and_count(arr):\n    if len(arr) <= 1:\n        return 0, arr\n    \n    mid = len(arr) // 2\n    left_count, left_arr = merge_sort_and_count(arr[:mid])\n    right_count, right_arr = merge_sort_and_count(arr[mid:])\n\n    count = 0\n    i = j = 0\n    merged_arr = []\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] <= right_arr[j]:\n            merged_arr.append(left_arr[i])\n            i += 1\n        else:\n            merged_arr.append(right_arr[j])\n            j += 1\n            count += len(left_arr) - i  # Count inversions\n\n    merged_arr.extend(left_arr[i:])\n    merged_arr.extend(right_arr[j:])\n\n    return count + left_count + right_count, merged_arr\ndef get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n    \n    Args:\n        arr: The input array.\n    Returns:\n        The number of inversions in the array.\n    \"\"\"\n    return merge_sort_and_count(arr)[0]", "matching_cluster_idx": 5}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    An inversion is a pair of elements where the first element is greater \n    than the second element but appears before it in the array.\n\n    Args:\n      arr: A list of integers.\n\n    Returns:\n      The number of inversions in the array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    An inversion is a pair of elements where the first element is greater than the second element \n    and they appear out of order.\n\n    Args:\n      arr: The input array of integers.\n\n    Returns:\n      The number of inversions in the array.\n    \"\"\"\n\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts inversions in an array.\n\n    An inversion is a pair (i, j) where i < j and arr[i] > arr[j].\n\n    Args:\n      arr: The input array.\n\n    Returns:\n      The number of inversions in the array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n      for j in range(i + 1, len(arr)):\n        if arr[i] > arr[j]:\n          count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  This function counts the number of inversions in an array.\n\n  An inversion is a pair of indices (i, j) where i < j and arr[i] > arr[j].\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    The number of inversions in the array.\n  \"\"\"\n  inv_count = 0\n  n = len(arr)\n  for i in range(n):\n    for j in range(i + 1, n):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 3}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    An inversion is a pair of elements (i, j) where i < j and arr[i] > arr[j].\n\n    Args:\n        arr: The input array.\n\n    Returns:\n        The number of inversions in the array.\n    \"\"\"\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 3}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  This function counts the inversions in an array.\n  \n  Args:\n      arr: A list of integers.\n  \n  Returns:\n      The number of inversions in the array.\n  \"\"\"\n  count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        count += 1\n  return count", "matching_cluster_idx": 3}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  This function counts the number of inversions in an array.\n\n  An inversion is a pair (i, j) where i < j and arr[i] > arr[j].\n\n  Args:\n    arr: The input array.\n\n  Returns:\n    The number of inversions in the array.\n  \"\"\"\n  count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        count += 1\n  return count", "matching_cluster_idx": 3}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  Counts the number of inversions in an array.\n\n  Args:\n      arr: A list of integers.\n\n  Returns:\n      The number of inversions in the array.\n  \"\"\"\n\n  count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  Counts inversions in an array.\n  \n  An inversion is a pair of elements (i, j) in an array where i < j and arr[i] > arr[j].\n  \n  Args:\n      arr: A list of numbers.\n  \n  Returns:\n      The number of inversions in the array.\n  \n  Examples:\n      get_Inv_Count([1,20,6,4,5]) == 5\n  \"\"\"\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count", "matching_cluster_idx": 3}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    An inversion is a pair of elements (a, b) where a < b but a appears after b in the array.\n\n    Args:\n        arr: A list of numbers.\n\n    Returns:\n        The number of inversions in the array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  Counts the number of inversions in an array.\n\n  Args:\n      arr: A list of integers.\n\n  Returns:\n      The number of inversions in the array.\n  \"\"\"\n  inv_count = 0\n  for i in range(len(arr)):\n    for j in range(i+1, len(arr)):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  Counts inversions in an array.\n\n  An inversion is a pair of elements where the first element is greater than\n  the second element but appears before it in the array.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    The number of inversions in the array.\n  \"\"\"\n  inversion_count = 0\n  for i in range(len(arr)):\n    for j in range(i + 1, len(arr)):\n      if arr[i] > arr[j]:\n        inversion_count += 1\n  return inversion_count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n    An inversion is a pair of elements (i, j) where i < j but arr[i] > arr[j].\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    An inversion is a pair (i, j) where i < j but arr[i] > arr[j].\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\narr = [1, 20, 6, 4, 5]", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    An inversion is a pair of elements (i, j) where i < j and arr[i] > arr[j].\n\n    Args:\n      arr: The input array.\n\n    Returns:\n      The number of inversions in the array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def get_Inv_Count(arr):\n  \"\"\"\n  Counts the number of inversions in an array.\n\n  An inversion is a pair of elements (i, j) where i < j and arr[i] > arr[j].\n\n  Args:\n      arr: A list of integers.\n\n  Returns:\n      The number of inversions in the array.\n  \"\"\"\n  inv_count = 0\n  n = len(arr)\n  for i in range(n):\n    for j in range(i + 1, n):\n      if arr[i] > arr[j]:\n        inv_count += 1\n  return inv_count", "matching_cluster_idx": 3}, {"solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts inversions in an array.\n    An inversion is a pair (i, j) such that i < j and arr[i] > arr[j].\n\n    Args:\n        arr: The input array.\n\n    Returns:\n        The number of inversions in the array.\n    \"\"\"\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "matching_cluster_idx": 2}]}, "Mbpp/308": {"dps": 94.27586206896552, "dps_norm": 65.83333333333334, "pass@1": 54.0, "profiled": [{"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    n: The number of largest products to find.\n\n  Returns:\n    A list of the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  return sorted(products, reverse=True)[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists,\n  selecting one factor from each list.\n\n  Args:\n      list1: The first list of numbers.\n      list2: The second list of numbers.\n      n: The number of largest products to find.\n\n  Returns:\n      A list of the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  sorted_products = sorted(products, reverse=True)\n  return sorted_products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, \n  selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    n: The number of largest products to find.\n\n  Returns:\n    A list of the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  products.sort(reverse=True)\n  return products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    n: The number of largest products to find.\n\n  Returns:\n    A list containing the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  products.sort(reverse=True)\n  return products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Finds the specified number of largest products from two given lists,\n    selecting one factor from each list.\n\n    Args:\n      list1: The first list of numbers.\n      list2: The second list of numbers.\n      num: The number of largest products to find.\n\n    Returns:\n      A list containing the specified number of largest products.\n    \"\"\"\n    products = [(x * y) for x in list1 for y in list2]\n    products.sort(reverse=True)  \n    return products[:num]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, k):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        k (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the k largest products.\n    \"\"\"\n    products = sorted((x * y for x in list1 for y in list2), reverse=True)[:k]\n    return products", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    n: The number of largest products to find.\n\n  Returns:\n    A list containing the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  products.sort(reverse=True)\n  return products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    n: The number of largest products to find.\n\n  Returns:\n    A list containing the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  return sorted(products, reverse=True)[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1: The first list of numbers.\n        list2: The second list of numbers.\n        n: The number of largest products to find.\n\n    Returns:\n        A list of the n largest products.\n    \"\"\"\n    products = sorted((x*y for x in list1 for y in list2), reverse=True)\n    return products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1: The first list.\n        list2: The second list.\n        n: The number of largest products to find.\n\n    Returns:\n        A list containing the n largest products.\n    \"\"\"\n    products = sorted([x*y for x in list1 for y in list2], reverse=True)\n    return products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, k):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    k: The number of largest products to find.\n\n  Returns:\n    A list containing the k largest products.\n  \"\"\"\n\n  products = sorted([(x*y, x, y) for x in list1 for y in list2], reverse=True)[:k]\n  return [product[0] for product in products]", "matching_cluster_idx": 2}, {"solution": "def large_product(list1, list2, k):\n  \"\"\"\n  Finds the specified number of largest products from two lists, selecting one factor from each.\n\n  Args:\n      list1: The first list of numbers.\n      list2: The second list of numbers.\n      k: The number of largest products to find.\n\n  Returns:\n      A list of the k largest products.\n  \"\"\"\n  # Combine the lists into a list of tuples, where each tuple represents a product\n  products = [(x * y) for x in list1 for y in list2]\n  \n  # Sort the products in descending order\n  products.sort(reverse=True)\n\n  # Return the top k products\n  return products[:k]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists,\n  selecting one factor from each list.\n\n  Args:\n      list1: The first list of numbers.\n      list2: The second list of numbers.\n      n: The number of largest products to find.\n\n  Returns:\n      A list of the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  products.sort(reverse=True)  \n  return products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n    \"\"\"\n    Finds the specified number of largest products from two lists, \n    selecting one factor from each list.\n\n    Args:\n        list1: The first list of numbers.\n        list2: The second list of numbers.\n        n: The number of largest products to find.\n\n    Returns:\n        A list containing the n largest products.\n    \"\"\"\n\n    product_pairs = [(x * y) for x in list1 for y in list2]\n    product_pairs.sort(reverse=True)  # Sort in descending order\n    return product_pairs[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n      list1: The first list of numbers.\n      list2: The second list of numbers.\n      n: The number of largest products to find.\n\n  Returns:\n      A list of the n largest products.\n  \"\"\"\n  \n  product_list = [(x * y) for x in list1 for y in list2]\n  product_list.sort(reverse=True)  \n  return product_list[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    n: The number of largest products to find.\n\n  Returns:\n    A list of the n largest products.\n  \"\"\"\n  products = [(x * y) for x in list1 for y in list2]\n  return sorted(products, reverse=True)[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(nums1, nums2, k):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, \n  selecting one factor from each list.\n\n  Args:\n      nums1: The first list of numbers.\n      nums2: The second list of numbers.\n      k: The number of largest products to find.\n\n  Returns:\n      A list of the k largest products.\n  \"\"\"\n  products = [(x*y) for x in nums1 for y in nums2]\n  products.sort(reverse=True)\n  return products[:k]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, \n  selecting one factor from each list.\n\n  Args:\n      list1: The first list of numbers.\n      list2: The second list of numbers.\n      n: The number of largest products to find.\n\n  Returns:\n      A list of the n largest products.\n  \"\"\"\n\n  product_list = []\n  \n  # Iterate through the lists and calculate products\n  for x in list1:\n    for y in list2:\n      product_list.append(x * y)\n\n  # Sort the products in descending order\n  product_list.sort(reverse=True)\n\n  # Return the first n products\n  return product_list[:n]\nlist1 = [1, 2, 3, 4, 5, 6]\nlist2 = [3, 6, 8, 9, 10, 6]\nn = 3", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n  Args:\n    list1: The first list of numbers.\n    list2: The second list of numbers.\n    n: The number of largest products to find.\n\n  Returns:\n    A list containing the n largest products.\n  \"\"\"\n  \n  products = [(x * y) for x in list1 for y in list2]\n  products.sort(reverse=True)  \n  return products[:n]", "matching_cluster_idx": 3}, {"solution": "def large_product(list1, list2, n):\n  \"\"\"\n  Finds the specified number of largest products from two given lists, \n  selecting one factor from each list.\n\n  Args:\n      list1: The first list of numbers.\n      list2: The second list of numbers.\n      n: The number of largest products to find.\n\n  Returns:\n      A list containing the n largest products.\n  \"\"\"\n  products = [(x*y) for x in list1 for y in list2]\n  products.sort(reverse=True)  \n  return products[:n]", "matching_cluster_idx": 3}]}, "Mbpp/392": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 59.0, "profiled": [{"solution": "def get_max_sum(n):\n    memo = {}\n\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n <= 1:\n            return n\n        memo[n] = max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n        return memo[n]\n\n    return helper(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Find the maximum sum possible using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Args:\n        n: An integer.\n\n    Returns:\n        The maximum sum achievable for the given input n.\n    \"\"\"\n    memo = {}\n\n    def _get_max_sum(n):\n        if n in memo:\n            return memo[n]\n        if n <= 1:\n            return n\n        memo[n] = max(_get_max_sum(n // 2) + _get_max_sum(n // 3) + _get_max_sum(n // 4) + _get_max_sum(n // 5), n)\n        return memo[n]\n\n    return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The maximum sum possible.\n    \"\"\"\n    memo = {}  \n\n    def _get_max_sum(n):\n        if n in memo:\n            return memo[n]\n        if n <= 1:\n            return n\n        memo[n] = max( _get_max_sum(n // 2) + _get_max_sum(n // 3) + _get_max_sum(n // 4) + _get_max_sum(n // 5), n)\n        return memo[n]\n\n    return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Finds the maximum sum possible by using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n      n: An integer.\n\n  Returns:\n      The maximum sum possible.\n  \"\"\"\n  memo = {}  \n\n  def _f(n):\n    if n in memo:\n      return memo[n]\n    if n < 1:\n      return 0\n    memo[n] = max( _f(n//2) + _f(n//3) + _f(n//4) + _f(n//5), n)\n    return memo[n]\n\n  return _f(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Finds the maximum sum possible by using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n  \"\"\"\n  memo = {}\n  \n  def _get_max_sum(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n\n    \n    res = max( _get_max_sum(n//2) + _get_max_sum(n//3) + _get_max_sum(n//4) + _get_max_sum(n//5), n)\n    memo[n] = res\n    return res\n  return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Finds the maximum sum possible using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    memo = {}\n\n    def helper(n):\n        if n in memo:\n            return memo[n]\n        if n <= 1:\n            return n\n        \n        res = max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n        memo[n] = res\n        return res\n\n    return helper(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Find the maximum sum possible using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The maximum sum possible.\n  \"\"\"\n\n  memo = {} \n\n  def _f(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n\n    memo[n] = max(_f(n//2) + _f(n//3) + _f(n//4) + _f(n//5), n)\n    return memo[n]\n\n  return _f(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n  \n  Args:\n    n: An integer.\n\n  Returns:\n    An integer representing the maximum sum.\n  \"\"\"\n  memo = {}\n  \n  def calculate_sum(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n\n    result = max(calculate_sum(n//2) + calculate_sum(n//3) + calculate_sum(n//4) + calculate_sum(n//5), n)\n    memo[n] = result\n    return result\n  \n  return calculate_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The maximum sum possible.\n    \"\"\"\n    memo = {}  \n\n    def _get_max_sum(n):\n      if n in memo:\n        return memo[n]\n      if n <= 1:\n        return n\n      result = max(\n          _get_max_sum(n // 2) + _get_max_sum(n // 3) + _get_max_sum(n // 4) + _get_max_sum(n // 5), n\n      )\n      memo[n] = result\n      return result\n\n    return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n      n: The input integer.\n\n  Returns:\n      The maximum sum possible.\n  \"\"\"\n\n  memo = {0: 0, 1: 1}\n  \n  def helper(n):\n    if n in memo:\n      return memo[n]\n    \n    max_sum = n\n    if n > 1:\n      max_sum = max(max_sum, helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5))\n    memo[n] = max_sum\n    return max_sum\n  \n  return helper(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \n    Args:\n      n: An integer representing the input number.\n\n    Returns:\n      The maximum sum achievable for the given input 'n'.\n    \"\"\"\n    memo = {}\n    def _get_max_sum(n):\n        if n <= 1:\n            return n\n        if n in memo:\n            return memo[n]\n        memo[n] = max(\n            _get_max_sum(n // 2) + _get_max_sum(n // 3) + _get_max_sum(n // 4) + _get_max_sum(n // 5),\n            n\n        )\n        return memo[n]\n\n    return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    \"\"\"\n    cache = {}\n    def _get_max_sum(n):\n      if n <= 1:\n        return n\n      if n in cache:\n        return cache[n]\n      cache[n] = max(_get_max_sum(n//2) + _get_max_sum(n//3) + _get_max_sum(n//4) + _get_max_sum(n//5), n)\n      return cache[n]\n    return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n      n: An integer.\n\n  Returns:\n      The maximum sum achievable.\n\n  \"\"\"\n  memo = {}\n  def helper(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n\n    memo[n] = max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n    return memo[n]\n  return helper(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Finds the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Args:\n      n: An integer.\n\n    Returns:\n      The maximum sum possible.\n    \"\"\"\n\n    memo = {}  # Create a dictionary to store calculated results\n\n    def calculate_sum(n):\n      if n in memo:\n        return memo[n]  # Return cached result if available\n\n      if n <= 1:\n        return n \n      \n      result = max(calculate_sum(n // 2) + calculate_sum(n // 3) + calculate_sum(n // 4) + calculate_sum(n // 5), n)\n      memo[n] = result  # Store the calculated result\n      return result\n    \n    return calculate_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Finds the maximum sum possible using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n    n: The input integer.\n\n  Returns:\n    The maximum sum achievable for the given n.\n  \"\"\"\n  memo = {}\n  def helper(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n\n    memo[n] = max(helper(n//2) + helper(n//3) + helper(n//4) + helper(n//5), n)\n    return memo[n]\n\n  return helper(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    \"\"\"\n    Finds the maximum sum possible by using the given equation \n    f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Args:\n        n: An integer.\n\n    Returns:\n        The maximum sum possible.\n    \"\"\"\n    memo = {}\n\n    def helper(n):\n      if n in memo:\n        return memo[n]\n      if n <= 1:\n        return n\n      result = max(helper(n // 2) + helper(n // 3) + helper(n // 4) + helper(n // 5), n)\n      memo[n] = result\n      return result\n\n    return helper(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n    memo = {}  # Memoization for optimized calculations\n    \n    def calculate_max_sum(num):\n        if num < 1:\n            return 0\n        if num in memo:\n            return memo[num]\n        \n        # Calculate the maximum sum using the equation\n        result = max((calculate_max_sum(num // 2) + calculate_max_sum(num // 3) + calculate_max_sum(num // 4) + calculate_max_sum(num // 5)), num)\n        memo[num] = result \n        return result\n\n    return calculate_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Finds the maximum sum possible using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The maximum sum possible using the given equation.\n  \"\"\"\n  memo = {}  # Memoization dictionary to store computed results\n\n  def _get_max_sum(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n\n    result = max(_get_max_sum(n // 2) + _get_max_sum(n // 3) + _get_max_sum(n // 4) + _get_max_sum(n // 5), n)\n    memo[n] = result\n    return result\n\n  return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Finds the maximum sum possible by using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n    n: An integer.\n\n  Returns:\n    The maximum sum possible.\n  \"\"\"\n  memo = {}  \n\n  def _get_max_sum(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n\n    memo[n] = max(_get_max_sum(n//2) + _get_max_sum(n//3) + _get_max_sum(n//4) + _get_max_sum(n//5), n)\n    return memo[n]\n\n  return _get_max_sum(n)", "matching_cluster_idx": 12}, {"solution": "def get_max_sum(n):\n  \"\"\"\n  Find the maximum sum possible using the equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n  Args:\n      n: The input integer.\n\n  Returns:\n      The maximum sum obtainable using the given equation.\n  \"\"\"\n\n  memo = {}  \n\n  def _get_max_sum(n):\n    if n in memo:\n      return memo[n]\n    if n <= 1:\n      return n \n    memo[n] = max(_get_max_sum(n//2) + _get_max_sum(n//3) + _get_max_sum(n//4) + _get_max_sum(n//5), n)\n    return memo[n]\n\n  return _get_max_sum(n)", "matching_cluster_idx": 12}]}, "Mbpp/395": {"dps": 98.08429118773947, "dps_norm": 75.0, "pass@1": 100.0, "profiled": [{"solution": "def first_non_repeating_character(s):\n    \"\"\"\n    Finds the first non-repeating character in a given string.\n\n    Args:\n      s: The input string.\n\n    Returns:\n      The first non-repeating character, or None if there are no non-repeating characters.\n    \"\"\"\n    char_counts = {}\n    for char in s:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    for char in s:\n        if char_counts[char] == 1:\n            return char\n\n    return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(s):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The first non-repeating character, or None if none exists.\n  \"\"\"\n  char_counts = {}\n  for char in s:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in s:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeated character in a given string.\n\n  Args:\n      string: The input string to search.\n\n  Returns:\n      The first non-repeated character, or None if no such character exists.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in string:\n    if char_counts[char] == 1:\n      return char\n\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(s):\n  \"\"\"\n  Finds the first non-repeating character in a string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      The first non-repeating character, or None if there are no non-repeating characters.\n  \"\"\"\n  char_counts = {}  \n  for char in s:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  \n  for char in s:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(s):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The first non-repeating character in the string, or None if there is none.\n  \"\"\"\n  char_counts = {}\n  for char in s:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in s:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(s: str) -> str:\n  \"\"\"\n  Finds the first non-repeated character in a given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The first non-repeated character in the string, or None if there are no non-repeated characters.\n  \"\"\"\n  char_counts = {}\n  for char in s:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in s:\n    if char_counts[char] == 1:\n      return char\n\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeated character in a given string.\n\n  Args:\n    string: The input string.\n\n  Returns:\n    The first non-repeated character, or None if there are no non-repeated characters.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in string:\n    if char_counts[char] == 1:\n      return char\n\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(s):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      The first non-repeating character, or None if none exists.\n  \"\"\"\n  char_counts = {}\n  for char in s:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in s:\n    if char_counts[char] == 1:\n      return char\n\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(text):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The first non-repeating character, or None if there is none.\n  \"\"\"\n  char_counts = {}\n  for char in text:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in text:\n    if char_counts[char] == 1:\n      return char\n\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(text):\n  \"\"\"\n  Finds the first non-repeated character in a given string.\n\n  Args:\n      text: The string to search.\n\n  Returns:\n      The first non-repeated character, or None if no such character exists.\n  \"\"\"\n  char_counts = {}\n  for char in text:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in text:\n    if char_counts[char] == 1:\n      return char\n\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n  \n  Args:\n    string: The string to search.\n\n  Returns:\n    The first non-repeating character, or None if there are no non-repeating characters.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  \n  for char in string:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeated character in a given string.\n\n  Args:\n    string: The input string.\n\n  Returns:\n    The first non-repeating character, or None if there are no non-repeating characters.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in string:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string: The input string.\n\n    Returns:\n        The first non-repeating character, or None if all characters repeat.\n    \"\"\"\n    char_counts = {}\n    for char in string:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    for char in string:\n        if char_counts[char] == 1:\n            return char\n\n    return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeated character in a given string.\n  Args:\n    string: The string to search.\n  Returns:\n    The first non-repeated character, or None if there are none.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  \n  for char in string:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(s):\n    \"\"\"\n    Finds the first non-repeating character in a given string.\n\n    Args:\n        s: The input string.\n\n    Returns:\n        The first non-repeating character, or None if there are none.\n    \"\"\"\n    char_counts = {}\n    for char in s:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    for char in s:\n        if char_counts[char] == 1:\n            return char\n\n    return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n\n  Args:\n      string: The input string.\n\n  Returns:\n      The first non-repeating character, or None if there are none.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in string:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n\n  Args:\n      string: The input string to search.\n\n  Returns:\n      The first non-repeating character, or None if no such character exists.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n  for char in string:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeating character in a given string.\n  Args:\n    string: The string to search.\n  Returns:\n    The first non-repeating character, or None if there is none.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in string:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(string):\n  \"\"\"\n  Finds the first non-repeated character in a given string.\n  Args:\n    string: The input string.\n  Returns:\n    The first non-repeated character, or None if there is no such character.\n  \"\"\"\n  char_counts = {}\n  for char in string:\n    if char in char_counts:\n      char_counts[char] += 1\n    else:\n      char_counts[char] = 1\n\n  for char in string:\n    if char_counts[char] == 1:\n      return char\n  return None", "matching_cluster_idx": 5}, {"solution": "def first_non_repeating_character(text):\n    \"\"\"\n    Finds the first non-repeating character in a given string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        The first non-repeating character or None if no such character exists.\n    \"\"\"\n    char_counts = {}\n    for char in text:\n        if char in char_counts:\n            char_counts[char] += 1\n        else:\n            char_counts[char] = 1\n\n    for char in text:\n        if char_counts[char] == 1:\n            return char\n\n    return None", "matching_cluster_idx": 5}]}, "Mbpp/405": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 21.0, "profiled": [{"solution": "def check_tuplex(my_tuple, element):\n  \"\"\"Checks if an element exists within a tuple.\n\n  Args:\n    my_tuple: The tuple to search within.\n    element: The element to search for.\n\n  Returns:\n    True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return element in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(tuplex, element):\n  \"\"\"\n  Checks if an element exists within a tuple.\n\n  Args:\n      tuplex: The tuple to search within.\n      element: The element to search for.\n\n  Returns:\n      True if the element is found in the tuple, False otherwise.\n  \"\"\"\n  return element in tuplex", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(t, x):\n  \"\"\"\n  Check if an element exists within a tuple.\n\n  Args:\n      t: The tuple to search.\n      x: The element to search for.\n\n  Returns:\n      True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return x in t", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(tp, el):\n  \"\"\"\n  Checks whether an element exists within a tuple.\n\n  Args:\n    tp: The tuple to search.\n    el: The element to search for.\n\n  Returns:\n    True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return el in tp", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(input_tuple, element):\n  \"\"\"\n  This function checks whether an element exists within a tuple.\n  Args:\n    input_tuple: The tuple to search within.\n    element: The element to search for.\n  Returns:\n    True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return element in input_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(tuplex, element):\n  \"\"\"Checks if an element exists within a tuple.\n\n  Args:\n      tuplex: The tuple to search within.\n      element: The element to search for.\n\n  Returns:\n      True if the element is found in the tuple, False otherwise.\n  \"\"\"\n  return element in tuplex", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, element):\n  \"\"\"Checks if an element exists within a tuple.\n\n  Args:\n    my_tuple: The tuple to search within.\n    element: The element to search for.\n\n  Returns:\n    True if the element is found in the tuple, False otherwise.\n  \"\"\"\n  return element in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, target):\n  \"\"\"\n  Checks if an element exists within a tuple.\n\n  Args:\n    my_tuple: The tuple to search.\n    target: The element to search for.\n\n  Returns:\n    True if the target element exists in the tuple, False otherwise.\n  \"\"\"\n  return target in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(t, e):\n  \"\"\"\n  Checks whether an element exists within a tuple.\n  \n  Args:\n    t: The tuple to search within.\n    e: The element to search for.\n  \n  Returns:\n    True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return e in t", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, element):\n  \"\"\"\n  Checks if an element exists within a tuple.\n\n  Args:\n    my_tuple: The tuple to search.\n    element: The element to search for.\n\n  Returns:\n    True if the element is found in the tuple, False otherwise.\n  \"\"\"\n  return element in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, target):\n  \"\"\"Checks if a target element exists in a tuple.\n\n  Args:\n    my_tuple: The tuple to search within.\n    target: The element to search for.\n\n  Returns:\n    True if the target is found in the tuple, False otherwise.\n  \"\"\"\n  return target in my_tuple\nmy_tuple = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\ntarget = 'r'", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, target):\n  \"\"\"\n  Checks if a target element exists within a tuple.\n\n  Args:\n      my_tuple: The tuple to search within.\n      target: The element to search for.\n\n  Returns:\n      True if the target element is found in the tuple, False otherwise.\n  \"\"\"\n  return target in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(tuple_data, element):\n  \"\"\"\n  Checks if an element exists within a tuple.\n\n  Args:\n      tuple_data: The tuple to search within.\n      element: The element to search for.\n\n  Returns:\n      True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return element in tuple_data\ntuple_data = (\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\")\nelement = 'r'", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, target):\n  \"\"\"\n  Checks if a target element exists in a tuple.\n\n  Args:\n      my_tuple: The tuple to search within.\n      target: The element to search for.\n\n  Returns:\n      True if the target element exists in the tuple, False otherwise.\n  \"\"\"\n  return target in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(tuplex, element):\n  \"\"\"\n  Checks whether an element exists within a tuple.\n\n  Args:\n    tuplex: The tuple to search in.\n    element: The element to search for.\n\n  Returns:\n    True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return element in tuplex", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, target):\n  \"\"\"\n  Checks if an element exists within a tuple.\n\n  Args:\n      my_tuple: The tuple to search in.\n      target: The element to search for.\n\n  Returns:\n      True if the element is found, False otherwise.\n  \"\"\"\n  return target in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(input_tuple, element):\n  \"\"\"\n  Checks whether an element exists within a tuple.\n\n  Args:\n    input_tuple: The tuple to search within.\n    element: The element to search for.\n\n  Returns:\n    True if the element is found in the tuple, False otherwise.\n  \"\"\"\n  return element in input_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(tuplex, element):\n  \"\"\"\n  Checks if an element exists within a tuple.\n  \n  Args:\n      tuplex: The tuple to search within.\n      element: The element to search for.\n\n  Returns:\n      True if the element is present in the tuple, False otherwise.\n  \"\"\"\n  return element in tuplex", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(my_tuple, element):\n    \"\"\"Checks if an element exists within a tuple.\n\n    Args:\n        my_tuple (tuple): The tuple to search within.\n        element: The element to search for.\n\n    Returns:\n        bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    return element in my_tuple", "matching_cluster_idx": 3}, {"solution": "def check_tuplex(t, element):\n  \"\"\"\n  Checks if an element exists within a tuple.\n\n  Args:\n    t: The tuple to search in.\n    element: The element to search for.\n\n  Returns:\n    True if the element exists in the tuple, False otherwise.\n  \"\"\"\n  return element in t", "matching_cluster_idx": 3}]}, "Mbpp/414": {"dps": 91.30434782608695, "dps_norm": 88.88888888888889, "pass@1": 100.0, "profiled": [{"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks whether any value in sequence1 exists in sequence2.\n\n  Args:\n      seq1: The first sequence.\n      seq2: The second sequence.\n\n  Returns:\n      True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for element in seq1:\n    if element in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks whether any value in one sequence exists in another.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if there is overlap, False otherwise.\n  \"\"\"\n  for element in seq1:\n    if element in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks whether any value in one sequence exists in another sequence.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any element in seq1 is present in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in the first sequence exists in the second sequence.\n\n  Args:\n      seq1: The first sequence.\n      seq2: The second sequence.\n\n  Returns:\n      True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks whether any value in seq1 exists in seq2.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for value in seq1:\n    if value in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in seq1 exists in seq2.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for element in seq1:\n    if element in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in sequence1 exists in sequence2.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any element in seq1 is present in seq2, False otherwise.\n  \"\"\"\n  for element in seq1:\n    if element in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Checks whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1: The first sequence.\n        seq2: The second sequence.\n\n    Returns:\n        True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for item in seq1:\n      if item in seq2:\n        return True\n    return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Check whether any value in a sequence exists in another sequence.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in the first sequence exists in the second sequence.\n\n  Args:\n      seq1: The first sequence.\n      seq2: The second sequence.\n\n  Returns:\n      True if any value in seq1 is present in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  This function checks if any value in sequence1 exists in sequence2.\n  \n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n  \n  Returns:\n    True if any value in seq1 is present in seq2, False otherwise.\n  \"\"\"\n  for element in seq1:\n    if element in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Checks whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1: The first sequence.\n        seq2: The second sequence.\n\n    Returns:\n        True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for element in seq1:\n        if element in seq2:\n            return True\n    return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks whether any value in the first sequence exists in the second sequence.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if there is overlap between the sequences, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(sequence1, sequence2):\n  \"\"\"\n  Checks whether any value in one sequence exists in another sequence.\n\n  Args:\n    sequence1: The first sequence.\n    sequence2: The second sequence.\n\n  Returns:\n    True if any value in sequence1 exists in sequence2, False otherwise.\n  \"\"\"\n  for value in sequence1:\n    if value in sequence2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in the first sequence exists in the second sequence.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks whether any value in the first sequence exists in the second sequence.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for value in seq1:\n    if value in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in sequence1 exists in sequence2.\n\n  Args:\n      seq1: The first sequence.\n      seq2: The second sequence.\n\n  Returns:\n      True if any value in seq1 is present in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks whether any value in the first sequence exists in the second sequence.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any value in seq1 exists in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in sequence1 exists in sequence2.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if there's an overlap, False otherwise.\n  \"\"\"\n  for element in seq1:\n    if element in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}, {"solution": "def overlapping(seq1, seq2):\n  \"\"\"\n  Checks if any value in one sequence exists in another sequence.\n\n  Args:\n    seq1: The first sequence.\n    seq2: The second sequence.\n\n  Returns:\n    True if any value in seq1 is present in seq2, False otherwise.\n  \"\"\"\n  for item in seq1:\n    if item in seq2:\n      return True\n  return False", "matching_cluster_idx": 7}]}, "Mbpp/421": {"dps": 15.226337448559672, "dps_norm": 71.42857142857143, "pass@1": 100.0, "profiled": [{"solution": "def concatenate_tuple(tup, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by the given delimiter.\n\n  Args:\n    tup: The input tuple.\n    delimiter: The string to use as a separator between elements. Defaults to \"-\".\n\n  Returns:\n    A string containing all elements of the tuple concatenated by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in tup)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple using a specified delimiter.\n\n  Args:\n    input_tuple: The tuple to concatenate.\n    delimiter: The string to use as a separator between elements. Defaults to \"-\".\n\n  Returns:\n    A string containing all elements of the tuple joined by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by the delimiter.\n\n  Args:\n    input_tuple: A tuple of strings and/or numbers.\n    delimiter: The string to use as a separator between elements.\n\n  Returns:\n    A string with all tuple elements joined by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple using a specified delimiter.\n\n  Args:\n    input_tuple: A tuple of elements to concatenate.\n    delimiter: The string to use as a separator between elements. Defaults to \"-\".\n\n  Returns:\n    A string containing all elements of the tuple joined by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"Concatenates each element of a tuple by the given delimiter.\n\n  Args:\n    input_tuple: A tuple of strings and/or numbers.\n    delimiter: The string to use as a separator.\n\n  Returns:\n    A string with all tuple elements concatenated by the delimiter.\n  \"\"\"\n\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(tup, delimiter=\"-\"):\n    \"\"\"\n    Concatenates each element of a tuple by the delimiter.\n\n    Args:\n        tup: A tuple of elements to concatenate.\n        delimiter: The string to use as a delimiter between elements.\n\n    Returns:\n        A string containing the concatenated elements.\n    \"\"\"\n    return delimiter.join(str(x) for x in tup)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(tuple_data, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by the specified delimiter.\n\n  Args:\n    tuple_data: A tuple of elements to concatenate.\n    delimiter: The string to use as a delimiter between elements.\n\n  Returns:\n    A string containing all elements of the tuple concatenated by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in tuple_data)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by the delimiter.\n\n  Args:\n    input_tuple: The tuple to concatenate.\n    delimiter: The string to use as a delimiter between elements. \n\n  Returns:\n    A string with all elements of the tuple concatenated by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"Concatenates each element of a tuple using a delimiter.\n\n  Args:\n    input_tuple: A tuple containing various elements.\n    delimiter: The string to use as a separator between elements. Defaults to \"-\".\n\n  Returns:\n    A string containing the concatenated elements.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple using a delimiter.\n\n  Args:\n    input_tuple: The tuple to concatenate.\n    delimiter: The string to use as a separator between elements. Defaults to \"-\".\n\n  Returns:\n    A string containing all elements of the tuple concatenated with the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by a given delimiter.\n\n  Args:\n    input_tuple: The tuple to be concatenated.\n    delimiter: The string to use as a separator between elements.\n\n  Returns:\n    A string containing the concatenated tuple elements.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(t, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple using a delimiter.\n\n  Args:\n      t: The tuple to concatenate.\n      delimiter: The delimiter to use between elements.\n\n  Returns:\n      A string containing the concatenated elements.\n  \"\"\"\n  return delimiter.join(str(x) for x in t)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(tuple_data, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by a given delimiter.\n\n  Args:\n    tuple_data: A tuple of elements to concatenate.\n    delimiter: The string to use as a separator between elements.\n\n  Returns:\n    A string with all elements of the tuple concatenated by the delimiter.\n  \"\"\"\n  return delimiter.join(str(x) for x in tuple_data)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by a specified delimiter.\n\n  Args:\n    input_tuple: The tuple to concatenate.\n    delimiter: The string to use as a separator between elements. Defaults to \"-\".\n\n  Returns:\n    A string containing the concatenated tuple elements.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(t, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by the delimiter.\n\n  Args:\n    t: The input tuple.\n    delimiter: The delimiter to use. Defaults to '-'.\n\n  Returns:\n    A string containing the concatenated elements.\n  \"\"\"\n  return delimiter.join(str(x) for x in t)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(my_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by the delimiter.\n\n  Args:\n      my_tuple: The tuple to concatenate.\n      delimiter: The string to use as a delimiter.\n\n  Returns:\n      A string containing the concatenated elements.\n  \"\"\"\n  return delimiter.join(str(element) for element in my_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by a specified delimiter.\n\n  Args:\n      input_tuple: The tuple to concatenate.\n      delimiter: The string to use as a separator between elements.\n\n  Returns:\n      A string with all elements concatenated by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple using the provided delimiter.\n\n  Args:\n    input_tuple: The tuple to concatenate.\n    delimiter: The delimiter to use. Defaults to \"-\".\n\n  Returns:\n    A string with all elements concatenated by the delimiter.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"\n  Concatenates each element of a tuple by the given delimiter.\n\n  Args:\n    input_tuple: A tuple of elements to concatenate.\n    delimiter: The string used to separate elements.\n\n  Returns:\n    A string containing the concatenated elements.\n  \"\"\"\n  return delimiter.join(str(element) for element in input_tuple)", "matching_cluster_idx": 4}, {"solution": "def concatenate_tuple(input_tuple, delimiter=\"-\"):\n  \"\"\"Concatenates each element of a tuple by the given delimiter.\n\n  Args:\n      input_tuple: The tuple to concatenate.\n      delimiter: The delimiter to use between elements. Defaults to \"-\".\n\n  Returns:\n      A string with all tuple elements concatenated by the delimiter.\n  \"\"\"\n  return delimiter.join(str(x) for x in input_tuple)", "matching_cluster_idx": 4}]}, "Mbpp/424": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def extract_rear(input_tuple):\n  \"\"\"\n  Extract only the rear index element of each string in the given tuple.\n\n  Args:\n      input_tuple: A tuple of strings.\n\n  Returns:\n      A list containing the rear index element of each string in the input tuple.\n  \"\"\"\n  return [s[-1] for s in input_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(text_tuple):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n    text_tuple: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the tuple.\n  \"\"\"\n  return [s[-1] for s in text_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(strings):\n  \"\"\"\n  Extracts only the rear index element of each string in the given tuple.\n\n  Args:\n      strings: A tuple of strings.\n\n  Returns:\n      A list of the rear index elements of each string.\n  \"\"\"\n  return [s[-1] for s in strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(strings):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n      strings: A tuple of strings.\n\n  Returns:\n      A list of rear index elements.\n  \"\"\"\n  return [string[-1] for string in strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(str_tuple):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n      str_tuple: A tuple of strings.\n\n  Returns:\n      A list containing the rear index element of each string in the tuple.\n  \"\"\"\n  return [s[-1] for s in str_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(input_tuple):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n      input_tuple: A tuple of strings.\n\n  Returns:\n      A list containing the rear index elements of each string in the tuple.\n  \"\"\"\n  return [s[-1] for s in input_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(input_tuple):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n    input_tuple: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the input tuple.\n  \"\"\"\n  return [string[-1] for string in input_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(tuple_of_strings):\n  \"\"\"\n  Extracts only the rear index element of each string in the given tuple.\n\n  Args:\n      tuple_of_strings: A tuple of strings.\n\n  Returns:\n      A list of the rear index elements of each string in the tuple.\n  \"\"\"\n  return [string[-1] for string in tuple_of_strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(input_tuple):\n  \"\"\"\n  Extracts only the rear index element of each string in the given tuple.\n\n  Args:\n    input_tuple: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the input tuple.\n  \"\"\"\n  return [s[-1] for s in input_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(string_tuple):\n  \"\"\"\n  Extracts only the rear index element of each string in the given tuple.\n\n  Args:\n    string_tuple: A tuple of strings.\n\n  Returns:\n    A list containing the rear index elements of each string in the tuple.\n  \"\"\"\n  return [s[-1] for s in string_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(strings):\n  \"\"\"\n  Extracts the rear index element of each string in a tuple.\n\n  Args:\n    strings: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the input tuple.\n  \"\"\"\n  return [string[-1] for string in strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(string_tuple):\n  \"\"\"\n  Extracts the rear index element of each string in a given tuple.\n\n  Args:\n    string_tuple: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the tuple.\n  \"\"\"\n  return [string[-1] for string in string_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(string_tuple):\n  \"\"\"\n  Extracts only the rear index element of each string in the given tuple.\n\n  Args:\n    string_tuple: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the input tuple.\n  \"\"\"\n  return [s[-1] for s in string_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(tuple_of_strings):\n  \"\"\"\n  Extract only the rear index element of each string in the given tuple.\n\n  Args:\n    tuple_of_strings: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the tuple.\n  \"\"\"\n  return [string[-1] for string in tuple_of_strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(strings):\n  \"\"\"\n  Extracts only the rear index element of each string in the given tuple.\n\n  Args:\n    strings: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the tuple.\n  \"\"\"\n  return [string[-1] for string in strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(strings):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n    strings: A tuple of strings.\n\n  Returns:\n    A list containing the rear index element of each string in the tuple.\n  \"\"\"\n  return [string[-1] for string in strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(strings):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n      strings: A tuple of strings.\n\n  Returns:\n      A list containing the rear index element of each string in the input tuple.\n  \"\"\"\n  return [string[-1] for string in strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(text_tuple):\n  \"\"\"\n  Extracts only the rear index element of each string in the given tuple.\n\n  Args:\n    text_tuple: A tuple of strings.\n\n  Returns:\n    A list of rear index elements from the input tuple.\n  \"\"\"\n  return [text[-1] for text in text_tuple]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(tuple_of_strings):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n    \n    Args:\n      tuple_of_strings: A tuple of strings.\n\n    Returns:\n      A list of rear index elements from each string in the input tuple.\n    \n    assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n    \"\"\"\n    return [s[-1] for s in tuple_of_strings]", "matching_cluster_idx": 4}, {"solution": "def extract_rear(string_tuple):\n  \"\"\"\n  Extracts the rear index element of each string in the given tuple.\n\n  Args:\n    string_tuple: A tuple of strings.\n\n  Returns:\n    A list of rear index elements.\n  \"\"\"\n  return [string[-1] for string in string_tuple]", "matching_cluster_idx": 4}]}, "Mbpp/425": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def count_element_in_list(lst, element):\n  \"\"\"\n  Counts the number of sublists in a list of lists that contain a particular element.\n\n  Args:\n    lst: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in lst:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(lst, element):\n  \"\"\"Counts the number of sublists containing a particular element.\n\n  Args:\n      lst: A list of lists.\n      element: The element to count.\n\n  Returns:\n      The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in lst:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(data, element):\n    \"\"\"\n    Counts the number of sublists containing a particular element.\n\n    Args:\n      data: A list of lists.\n      element: The element to count.\n\n    Returns:\n      The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in data:\n      if element in sublist:\n        count += 1\n    return count\ndata = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nelement = 1", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(matrix, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n    matrix: A list of lists.\n    element: The element to search for.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in matrix:\n    if element in sublist:\n      count += 1\n  return count\nmatrix = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(nested_list, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n      nested_list: A list of lists.\n      element: The element to count.\n\n  Returns:\n      The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in nested_list:\n    if element in sublist:\n      count += 1\n  return count\nnested_list = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nelement = 1", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(list_of_lists, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n    list_of_lists: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in list_of_lists:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(nested_list, element):\n    \"\"\"\n    Counts the number of sublists containing a particular element.\n\n    Args:\n      nested_list: A list of lists.\n      element: The element to count.\n\n    Returns:\n      The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in nested_list:\n      if element in sublist:\n        count += 1\n    return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(matrix, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element in a list of lists.\n\n  Args:\n    matrix: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in matrix:\n    if element in sublist:\n      count += 1\n  return count\nmatrix = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nelement = 1", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(matrix, element):\n    \"\"\"\n    Counts the number of sublists containing a particular element.\n\n    Args:\n        matrix (list of lists): A 2D list of integers.\n        element (int): The element to count.\n\n    Returns:\n        int: The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in matrix:\n      if element in sublist:\n        count += 1\n    return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(data, target):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n      data: A list of lists.\n      target: The element to count.\n\n  Returns:\n      The number of sublists containing the target element.\n  \"\"\"\n  count = 0\n  for sublist in data:\n    if target in sublist:\n      count += 1\n  return count\ndata = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\ntarget = 1", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(nested_list, element):\n  \"\"\"Counts the number of sublists containing a particular element.\n\n  Args:\n    nested_list: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in nested_list:\n    if element in sublist:\n      count += 1\n  return count\nnested_list = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nelement = 1", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(lst, element):\n  \"\"\"\n  Counts the number of sublists in a list of lists that contain a particular element.\n\n  Args:\n    lst: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in lst:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(list_of_lists, target_element):\n  \"\"\"Counts the number of sublists containing a particular element.\n\n  Args:\n      list_of_lists: A list of lists.\n      target_element: The element to search for.\n\n  Returns:\n      The number of sublists containing the target element.\n  \"\"\"\n  count = 0\n  for sublist in list_of_lists:\n    if target_element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(list_of_lists, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n    list_of_lists: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in list_of_lists:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(nested_list, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n    nested_list: A list of lists.\n    element: The element to search for.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in nested_list:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(data, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n    data: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in data:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(matrix, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n    matrix: A list of lists.\n    element: The element to count.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in matrix:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(matrix, element):\n  \"\"\"\n  Counts the number of sublists containing a particular element.\n\n  Args:\n    matrix: A list of lists.\n    element: The element to search for.\n\n  Returns:\n    The number of sublists containing the element.\n  \"\"\"\n  count = 0\n  for sublist in matrix:\n    if element in sublist:\n      count += 1\n  return count", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(matrix, element):\n    \"\"\"\n    Counts the number of sublists in a matrix that contain a particular element.\n\n    Args:\n        matrix: A list of lists (2D list).\n        element: The element to search for.\n\n    Returns:\n        The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in matrix:\n        if element in sublist:\n            count += 1\n    return count\nmatrix = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nelement = 1", "matching_cluster_idx": 4}, {"solution": "def count_element_in_list(matrix, element):\n    \"\"\"\n    Counts the number of sublists containing a particular element in a given matrix.\n\n    Args:\n      matrix: A list of lists (matrix).\n      element: The element to count.\n\n    Returns:\n      The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in matrix:\n        if element in sublist:\n            count += 1\n    return count\nmatrix = [[1, 3], [5, 7], [1, 11], [1, 15, 7]]\nelement = 1", "matching_cluster_idx": 4}]}, "Mbpp/428": {"dps": 25.619834710743802, "dps_norm": 44.44444444444444, "pass@1": 100.0, "profiled": [{"solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    n = len(arr)\n    # Start with a large gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements a[0..gap-1] are already in gapped order\n        # keep adding one more element until the entire array is gap sorted\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            # shift earlier gap-sorted elements up until the correct location for `temp` is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using shell sort.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        The sorted list of integers.\n    \"\"\"\n    n = len(arr)\n    \n    # Start with a large gap, then reduce the gap\n    gap = n // 2\n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements a[0..gap-1] are already in gapped order\n        # keep adding one more element until the entire array is gap sorted\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            # shift earlier gap-sorted elements up until the correct location for\n            # temp is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using the shell sort algorithm.\n\n    Args:\n        arr: The array to be sorted.\n\n    Returns:\n        The sorted array.\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n  \"\"\"Sorts the given array using Shell sort.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sorted list.\n  \"\"\"\n  n = len(arr)\n  gap = n // 2\n  while gap > 0:\n    for i in range(gap, n):\n      temp = arr[i]\n      j = i\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    gap //= 2\n  return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n  \"\"\"\n  Sorts the given array using shell sort algorithm.\n\n  Args:\n    arr: The array to be sorted.\n\n  Returns:\n    The sorted array.\n  \"\"\"\n  n = len(arr)\n  gap = n // 2\n  while gap > 0:\n    for i in range(gap, n):\n      temp = arr[i]\n      j = i\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    gap //= 2\n\n  return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n  \"\"\"\n  Sorts the given array using Shell Sort.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A new sorted list of integers.\n  \"\"\"\n  n = len(arr)\n  gap = n // 2\n  while gap > 0:\n    # Perform insertion sort for each gap\n    for i in range(gap, n):\n      temp = arr[i]\n      j = i\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    gap //= 2\n  return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(array):\n    n = len(array)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j - gap] > temp:\n                array[j] = array[j - gap]\n                j -= gap\n            array[j] = temp\n        gap //= 2\n    return array", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n  \"\"\"Sorts the given array using Shell sort algorithm.\n\n  Args:\n    arr: The array to be sorted.\n\n  Returns:\n    The sorted array.\n  \"\"\"\n  n = len(arr)\n  # Start with a large gap, then reduce the gap\n  gap = n // 2\n  while gap > 0:\n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements a[0..gap-1] are already in gapped order\n    # keep adding one more element until the entire array is gap sorted\n    for i in range(gap, n):\n      temp = arr[i]\n      j = i\n      # Shift earlier gap-elements up until the correct location for temp is found\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    gap //= 2  # reduce the gap\n  return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n  n = len(arr)\n  gap = n // 2\n  while gap > 0:\n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements a[0..gap-1] are already in gapped order \n    # keep adding one more element until the entire array is gap sorted\n    for i in range(gap, n):\n      temp = arr[i]\n      j = i\n      # Shift earlier gap-sorted elements up until the correct location for `temp` is found\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    # reduce the gap\n    gap //= 2\n  return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2  \n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2 \n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(array):\n    n = len(array)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = array[i]\n            j = i\n            while j >= gap and array[j - gap] > temp:\n                array[j] = array[j - gap]\n                j -= gap\n            array[j] = temp\n        gap //= 2\n    return array", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n  n = len(arr)\n  gap = n // 2\n  while gap > 0:\n    for i in range(gap, n):\n      temp = arr[i]\n      j = i\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    gap //= 2\n  return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    \"\"\"Sorts an array using Shell sort.\"\"\"\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        # Sort subarrays based on the gap\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n  \"\"\"\n  Sorts the given array using Shell sort.\n  \n  Args:\n      arr: The array to be sorted.\n\n  Returns:\n      The sorted array.\n  \"\"\"\n  n = len(arr)\n  # Start with a large gap, then reduce the gap\n  gap = n // 2\n  while gap > 0:\n    # Do a gapped insertion sort for this gap size.\n    # The first gap elements a[0..gap-1] are already in gapped order\n    # keep adding one more element until the entire array is gap sorted\n    for i in range(gap, n):\n      # add a[i] to the elements that have been gap sorted\n      # save a[i] in temp and make a hole at position i\n      temp = arr[i]\n      # shift earlier gap-sorted elements up until the correct location for a[i] is found\n      j = i\n      while j >= gap and arr[j - gap] > temp:\n        arr[j] = arr[j - gap]\n        j -= gap\n      arr[j] = temp\n    gap //= 2\n\n  return arr", "matching_cluster_idx": 3}, {"solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2 \n    while gap > 0:\n        # Do a gapped insertion sort for this gap size.\n        # The first gap elements a[0..gap-1] are already in gapped order \n        # keep adding one more element until the entire array is gap sorted\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\narr = [12, 23, 4, 5, 3, 2, 12, 81, 56, 95]", "matching_cluster_idx": 3}]}, "Mbpp/433": {"dps": 75.26595744680851, "dps_norm": 83.0, "pass@1": 100.0, "profiled": [{"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks if a number is greater than all elements in a given array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to compare.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks if a number is greater than all elements in an array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to check.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(nums, num):\n  \"\"\"\n  Checks whether the entered number is greater than the elements of the given array.\n\n  Args:\n      nums: A list of integers.\n      num: An integer to compare against.\n\n  Returns:\n      True if num is greater than all elements in nums, False otherwise.\n  \"\"\"\n  for element in nums:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks if a number is greater than all elements in an array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to compare.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than all elements in the given array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to compare with the elements in the array.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than the elements of the given array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to check.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def check_greater(nums, num):\n  \"\"\"\n  Checks if a number is greater than all elements in an array.\n\n  Args:\n    nums: A list of numbers.\n    num: The number to compare.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for n in nums:\n    if num <= n:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(nums, num):\n    \"\"\"\n    Checks if the entered number is greater than all elements in the given array.\n\n    Args:\n        nums: A list of numbers.\n        num: The number to compare.\n\n    Returns:\n        True if num is greater than all elements in nums, False otherwise.\n    \"\"\"\n    return all(num > n for n in nums)", "matching_cluster_idx": 2}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks if a number is greater than all elements in an array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to check.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(numbers, target):\n  \"\"\"\n  Checks whether the entered number is greater than all elements of the given array.\n\n  Args:\n    numbers: A list of numbers.\n    target: The number to check.\n\n  Returns:\n    True if the target is greater than all elements in the list, False otherwise.\n  \"\"\"\n  for number in numbers:\n    if target <= number:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than the elements of the given array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to check against the array elements.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than the elements of the given array.\n\n  Args:\n      arr: A list of numbers.\n      num: The number to check.\n\n  Returns:\n      True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than the elements of the given array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to compare.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(array, num):\n  \"\"\"\n  Checks if a number is greater than all elements in an array.\n\n  Args:\n    array: A list of numbers.\n    num: The number to compare against.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in array:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(nums, target):\n  \"\"\"\n  Checks if a given number is greater than all elements in an array.\n\n  Args:\n    nums: A list of numbers.\n    target: The number to check against.\n\n  Returns:\n    True if the target number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  return all(target > num for num in nums)", "matching_cluster_idx": 2}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than all elements of the given array.\n\n  Args:\n    arr: A list of numbers.\n    num: A number to check.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  return all(num > x for x in arr)", "matching_cluster_idx": 2}, {"solution": "def check_greater(nums, num):\n  \"\"\"\n  Checks if a number is greater than all elements in a given array.\n\n  Args:\n    nums: A list of integers.\n    num: An integer to compare with the array elements.\n\n  Returns:\n    True if num is greater than all elements in nums, False otherwise.\n  \"\"\"\n  for n in nums:\n    if num <= n:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than all the elements of the given array.\n\n  Args:\n    arr: A list of numbers.\n    num: The number to check against.\n\n  Returns:\n    True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(arr, num):\n  \"\"\"\n  Checks whether the entered number is greater than all elements in the given array.\n\n  Args:\n      arr: A list of numbers.\n      num: The number to check.\n\n  Returns:\n      True if num is greater than all elements in arr, False otherwise.\n  \"\"\"\n  for element in arr:\n    if num <= element:\n      return False\n  return True", "matching_cluster_idx": 3}, {"solution": "def check_greater(array, number):\n  \"\"\"\n  Checks whether the entered number is greater than all elements in the given array.\n\n  Args:\n      array: A list of numbers.\n      number: The number to check against.\n\n  Returns:\n      True if the number is greater than all elements in the array, False otherwise.\n  \"\"\"\n  for element in array:\n    if number <= element:\n      return False\n  return True", "matching_cluster_idx": 4}]}, "Mbpp/437": {"dps": 54.411764705882355, "dps_norm": 19.0, "pass@1": 24.0, "profiled": [{"solution": "def remove_odd(text):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  result = \"\"\n  for i in range(len(text)):\n    if (i + 1) % 2 == 0:\n      result += text[i]\n  return result", "matching_cluster_idx": -1}, {"solution": "def remove_odd(text):\n  \"\"\"Removes odd characters from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(text) if (i+1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(text) if (i+1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(text) if (i+1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n    \"\"\"\n    Removes odd characters from a string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        The string with odd characters removed.\n    \"\"\"\n    result = \"\"\n    for i in range(len(text)):\n        if (i+1) % 2 == 0:\n            result += text[i]\n    return result", "matching_cluster_idx": -1}, {"solution": "def remove_odd(s):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  new_string = ''.join([char for i, char in enumerate(s) if (i+1) % 2 == 0])\n  return new_string", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  new_text = \"\".join([char for i, char in enumerate(text) if (i+1) % 2 == 0])\n  return new_text", "matching_cluster_idx": 0}, {"solution": "def remove_odd(s):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with all odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(s) if (i+1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(s):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      The string with odd characters removed.\n  \"\"\"\n  return \"\".join([char for i, char in enumerate(s) if (i + 1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n    \"\"\"\n    Removes odd characters from a string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        The string with odd characters removed.\n    \"\"\"\n    result = ''.join([char for i, char in enumerate(text) if (i+1) % 2 == 0])\n    return result", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n  \"\"\"\n  Removes odd characters in a string.\n\n  Args:\n    text: The string to remove odd characters from.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(text) if (i+1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(s):\n  \"\"\"Removes odd characters from a string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n\n  result = ''.join([char for i, char in enumerate(s) if (i+1) % 2 == 0])\n  return result", "matching_cluster_idx": 0}, {"solution": "def remove_odd(s):\n  \"\"\"\n  Removes odd characters from a string.\n  For example, remove_odd(\"python\") == \"yhn\"\n  \"\"\"\n  result = \"\"\n  for i in range(len(s)):\n    if (i + 1) % 2 == 0:  \n      result += s[i]\n  return result", "matching_cluster_idx": -1}, {"solution": "def remove_odd(text):\n  \"\"\"Removes odd characters from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(text) if (i+1)%2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n  \"\"\"\n  Removes odd characters from a string.\n  \n  Args:\n      text: The input string.\n  \n  Returns:\n      The string with odd characters removed.\n  \"\"\"\n  return \"\".join([char for i, char in enumerate(text) if (i + 1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(s):\n  \"\"\"Removes odd characters from a string.\n\n  Args:\n    s: The string to remove odd characters from.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  result = \"\"\n  for i in range(len(s)):\n    if (i+1) % 2 == 0:\n      result += s[i]\n  return result", "matching_cluster_idx": -1}, {"solution": "def remove_odd(s):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n    s: The string to remove odd characters from.\n\n  Returns:\n    The string with odd characters removed.\n  \"\"\"\n  result = ''\n  for i in range(len(s)):\n    if (i+1) % 2 == 0:\n      result += s[i]\n  return result", "matching_cluster_idx": -1}, {"solution": "def remove_odd(string):\n  \"\"\"\n  Removes odd characters from a string.\n\n  Args:\n      string: The input string.\n\n  Returns:\n      A new string with only the even-indexed characters.\n  \"\"\"\n  return string[1::2]", "matching_cluster_idx": 4}, {"solution": "def remove_odd(text):\n  \"\"\"\n  This function removes all odd characters from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(text) if (i+1) % 2 == 0])", "matching_cluster_idx": 0}, {"solution": "def remove_odd(text):\n  \"\"\"\n  Removes odd characters in a string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with odd characters removed.\n  \"\"\"\n  return ''.join([char for i, char in enumerate(text) if (i+1) % 2 == 0])", "matching_cluster_idx": 0}]}, "Mbpp/440": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/446": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/451": {"dps": 97.28813559322033, "dps_norm": 99.0, "pass@1": 75.0, "profiled": [{"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Write a function to remove all whitespaces from the given string.\n  assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 3}, {"solution": "def remove_whitespaces(s):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return s.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    \"\"\"\n    return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n  assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(s: str) -> str:\n    \"\"\"\n    Write a function to remove all whitespaces from the given string.\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n    \"\"\"\n    return s.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n    text: The string to remove whitespaces from.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n  \n  Args:\n    text: The input string.\n    \n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n      text: The string to remove whitespaces from.\n\n  Returns:\n      The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"Removes all whitespaces from the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n  \n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(' ', '')", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(s):\n  \"\"\"\n  Removes all whitespaces from the given string.\n  \n  Args:\n    s: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return s.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n      text: The string to remove whitespaces from.\n\n  Returns:\n      The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(s):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return s.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n  \n  Args:\n      text: The input string.\n  \n  Returns:\n      The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"\n  Removes all whitespaces from the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"Removes all whitespaces from the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_whitespaces(text):\n  \"\"\"Removes all whitespaces from the given string.\n  \n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}]}, "Mbpp/456": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverses each string in a given list of string values.\n\n    Args:\n      string_list: A list of strings.\n\n    Returns:\n      A new list with each string reversed.\n    \"\"\"\n    return [s[::-1] for s in string_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(string_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    string_list: A list of strings.\n\n  Returns:\n    A new list with each string in the input list reversed.\n  \"\"\"\n  return [string[::-1] for string in string_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(strings):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    A new list with each string reversed.\n  \"\"\"\n  return [s[::-1] for s in strings]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(input_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    input_list: A list of string values.\n\n  Returns:\n    A new list with each string reversed.\n  \"\"\"\n  return [string[::-1] for string in input_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(input_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n      input_list: A list of strings.\n\n  Returns:\n      A list of reversed strings.\n  \"\"\"\n  return [s[::-1] for s in input_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(list_of_strings):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    list_of_strings: A list of string values.\n\n  Returns:\n    A new list with each string in the input list reversed.\n  \"\"\"\n  reversed_list = []\n  for string in list_of_strings:\n    reversed_list.append(string[::-1])\n  return reversed_list", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(list_of_strings):\n    \"\"\"\n    Reverses each string in a given list of string values.\n\n    Args:\n      list_of_strings: A list of string values.\n\n    Returns:\n      A new list with each string reversed.\n    \"\"\"\n    return [string[::-1] for string in list_of_strings]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(string_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n  \n  Args:\n      string_list: A list of strings.\n\n  Returns:\n      A new list with each string reversed.\n  \"\"\"\n  return [s[::-1] for s in string_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(input_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    input_list: A list of strings.\n\n  Returns:\n    A list of reversed strings.\n  \"\"\"\n  return [s[::-1] for s in input_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(str_list):\n  \"\"\"Reverses each string in a given list of string values.\n\n  Args:\n      str_list: A list of strings.\n\n  Returns:\n      A new list with each string reversed.\n  \"\"\"\n  return [s[::-1] for s in str_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(string_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    string_list: A list of strings.\n\n  Returns:\n    A list of strings with each string reversed.\n  \"\"\"\n  reversed_list = [s[::-1] for s in string_list]\n  return reversed_list", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(input_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    input_list: A list of strings.\n\n  Returns:\n    A new list with each string reversed.\n  \"\"\"\n  return [s[::-1] for s in input_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(strings):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    A new list with each string in the input list reversed.\n  \"\"\"\n  return [s[::-1] for s in strings]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(strings):\n  \"\"\"Reverses each string in a given list of string values.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    A new list with each string reversed.\n  \"\"\"\n  return [s[::-1] for s in strings]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(string_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n      string_list: A list of strings.\n\n  Returns:\n      A new list with each string reversed.\n  \"\"\"\n  return [string[::-1] for string in string_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(string_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    string_list: A list of strings.\n\n  Returns:\n    A new list with each string in the input list reversed.\n  \"\"\"\n  return [string[::-1] for string in string_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(string_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n    string_list: A list of strings.\n\n  Returns:\n    A new list with each string reversed.\n  \"\"\"\n  return [s[::-1] for s in string_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(str_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n      str_list: A list of strings.\n\n  Returns:\n      A new list with each string reversed.\n  \"\"\"\n  return [string[::-1] for string in str_list]", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(list_of_strings):\n  \"\"\"\n  Reverses each string in a given list of string values.\n\n  Args:\n      list_of_strings: A list of strings.\n\n  Returns:\n      A new list with each string reversed.\n  \"\"\"\n  reversed_list = [string[::-1] for string in list_of_strings]\n  return reversed_list", "matching_cluster_idx": 4}, {"solution": "def reverse_string_list(str_list):\n  \"\"\"\n  Reverses each string in a given list of string values.\n  \n  Args:\n    str_list: A list of string values.\n  Returns:\n    A new list with each string reversed.\n  \"\"\"\n  return [s[::-1] for s in str_list]", "matching_cluster_idx": 4}]}, "Mbpp/460": {"dps": 48.07692307692307, "dps_norm": 80.0, "pass@1": 100.0, "profiled": [{"solution": "def Extract(list_of_lists):\n  \"\"\"\n  This function extracts the first element of each sublist in a given list.\n  \n  Args:\n    list_of_lists: A list of lists.\n\n  Returns:\n    A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in list_of_lists]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  This function extracts the first element of each sublist in a given list.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  This function extracts the first element of each sublist in a given list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  Returns a list containing the first element of each sublist in the input list.\n  \n  Args:\n      lst: A list of lists.\n  \n  Returns:\n      A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  Get the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  Gets the first element of each sublist.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(input_list):\n  \"\"\"\n  Extracts the first element of each sublist in a list of lists.\n\n  Args:\n    input_list: A list of lists.\n\n  Returns:\n    A list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in input_list]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  This function gets the first element of each sublist in a given list.\n\n  Args:\n      lst: A list of sublists.\n\n  Returns:\n      A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  This function takes a list of lists and returns a new list containing the first element of each sublist.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  Extracts the first element of each sublist in a list of lists.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A new list containing the first elements of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  Extracts the first element of each sublist in a given list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(list_of_lists):\n  \"\"\"\n  Extracts the first element of each sublist.\n\n  Args:\n    list_of_lists: A list of lists.\n\n  Returns:\n    A list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in list_of_lists]", "matching_cluster_idx": 3}, {"solution": "def Extract(data):\n  \"\"\"\n  This function returns a list of the first elements of each sublist in a given list.\n\n  Args:\n    data: A list of lists.\n\n  Returns:\n    A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in data]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"Extracts the first element of each sublist in a list of lists.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"Extracts the first element from each sublist in a given list.\"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  This function extracts the first element of each sublist in a given list.\n\n  Args:\n    lst: A list of sublists.\n\n  Returns:\n    A new list containing the first elements of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  Extracts the first element of each sublist in a given list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  Returns a list containing the first element of each sublist in a given list.\n  \n  Args:\n    lst: A list of sublists.\n  \n  Returns:\n    A new list containing the first elements of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}, {"solution": "def Extract(nested_list):\n  \"\"\"\n  Extracts the first element of each sublist in a nested list.\n\n  Args:\n    nested_list: A list of lists.\n\n  Returns:\n    A list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in nested_list]", "matching_cluster_idx": 3}, {"solution": "def Extract(lst):\n  \"\"\"\n  This function returns a new list containing the first element of each sublist in the input list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A new list containing the first element of each sublist.\n  \"\"\"\n  return [sublist[0] for sublist in lst]", "matching_cluster_idx": 3}]}, "Mbpp/474": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  This function replaces all occurrences of 'old_char' with 'new_char' in a string.\n\n  Args:\n      text: The input string.\n      old_char: The character to be replaced.\n      new_char: The character to replace with.\n\n  Returns:\n      The modified string with replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"Replaces all occurrences of a character in a string with a new character.\n\n  Args:\n    text: The string to be modified.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The string with all occurrences of old_char replaced by new_char.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of an old character with a new character in a string.\n\n  Args:\n    text: The input string.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of a given character in a string with a new character.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to replace.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of an old character with a new character in a string.\n\n  Args:\n    text: The string to be modified.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with old characters replaced.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"Replaces all occurrences of 'old_char' with 'new_char' in 'text'.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to replace.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of an old character with a new character in a string.\n\n  Args:\n    text: The input string.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The string with the characters replaced.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of a given character in a string with another character.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to replace.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"Replaces all occurrences of a character in a string with another character.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to replace.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of an old character in a string with a new character.\n  \n  Args:\n    text: The input string.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The string with the replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(s, old, new):\n  \"\"\"Replaces all occurrences of 'old' with 'new' in a string.\n\n  Args:\n    s: The input string.\n    old: The character to be replaced.\n    new: The character to replace with.\n\n  Returns:\n    The string with all occurrences of 'old' replaced by 'new'.\n  \"\"\"\n  return s.replace(old, new)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of an old character with a new character in a string.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to replace.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with the replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"Replaces all occurrences of an old character with a new character in a string.\n\n  Args:\n    text: The string to be modified.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with all occurrences of old_char replaced by new_char.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(str, old_char, new_char):\n  \"\"\"Replaces all occurrences of one character with another in a string.\n\n  Args:\n    str: The input string.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The string with all occurrences of old_char replaced by new_char.\n  \"\"\"\n  return str.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  This function replaces all occurrences of a specific character in a string with a new character.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with all instances of old_char replaced by new_char.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of a character in a string with another character.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to replace.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with all occurrences of old_char replaced by new_char.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of an old character with a new character in a string.\n\n  Args:\n      text: The string to modify.\n      old_char: The character to be replaced.\n      new_char: The character to replace with.\n\n  Returns:\n      The modified string with all occurrences of old_char replaced by new_char.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"Replaces all occurrences of a specific character in a string with a new character.\n\n  Args:\n    text: The input string.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The string with the replaced characters.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"\n  Replaces all occurrences of a character in a string with another character.\n\n  Args:\n    text: The string to modify.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The modified string with all occurrences of old_char replaced by new_char.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}, {"solution": "def replace_char(text, old_char, new_char):\n  \"\"\"Replaces all occurrences of an old character with a new character in a string.\n\n  Args:\n    text: The input string.\n    old_char: The character to be replaced.\n    new_char: The character to replace with.\n\n  Returns:\n    The string with the replacements made.\n  \"\"\"\n  return text.replace(old_char, new_char)", "matching_cluster_idx": 6}]}, "Mbpp/476": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def big_sum(nums):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest numbers in the array.\n  \"\"\"\n  if not nums:\n    return 0  # Handle empty array case\n  return max(nums) + min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest values in a given array.\n  \n  Args:\n    arr: A list of numbers.\n  \n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest values in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  if len(arr) == 0:\n    return 0  \n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest value in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  This function finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest value in the array.\n  \"\"\"\n  if len(arr) == 0:\n    return 0\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  This function finds the sum of the largest and smallest values in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  if len(arr) < 2:\n    raise ValueError(\"Array must have at least two elements.\")\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n  \n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest value in the array.\n\n  \"\"\"\n  if len(arr) < 2:\n    return None  # Handle cases with less than two elements\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  This function takes an array of numbers and returns the sum of the largest and smallest value.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest value in the array.\n\n  Raises:\n    ValueError: If the input is not a list.\n  \"\"\"\n  if not isinstance(arr, list):\n    raise ValueError(\"Input must be a list.\")\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  This function takes an array of numbers as input\n  and returns the sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  if len(arr) == 0:\n    return 0  # Handle empty array case\n\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n  \n  Args:\n      arr: A list of numbers.\n  \n  Returns:\n      The sum of the largest and smallest value in the array.\n  \n  \"\"\"\n  if len(arr) == 0:\n    return 0\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(nums):\n  \"\"\"\n  This function finds the sum of the largest and smallest value in a given array.\n  \n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      The sum of the largest and smallest values in the input list.\n  \"\"\"\n  if len(nums) == 0:\n    return 0\n  return max(nums) + min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  This function finds the sum of the largest and smallest value in a given array.\n\n  Args:\n      arr: A list of numbers.\n\n  Returns:\n      The sum of the largest and smallest value in the array.\n\n  \"\"\"\n  if len(arr) == 0:\n    return 0\n  else:\n    return max(arr) + min(arr)", "matching_cluster_idx": 5}, {"solution": "def big_sum(arr):\n  \"\"\"\n  Finds the sum of the largest and smallest value in a given array.\n  \n  Args:\n    arr: A list of numbers.\n  \n  Returns:\n    The sum of the largest and smallest values in the array.\n  \"\"\"\n  if len(arr) == 0:\n    return 0  # Handle empty array case\n  return max(arr) + min(arr)", "matching_cluster_idx": 5}]}, "Mbpp/477": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def is_lower(s: str) -> str:\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return s.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  Converts the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(str1):\n  \"\"\"\n  Convert the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return str1.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  Convert the given string to lower case.\n\n  Args:\n      text: The string to convert.\n\n  Returns:\n      The lowercase version of the string.\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    assert is_lower(\"InValid\") == \"invalid\"\n    \"\"\"\n    return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(s):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return s.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"Converts the given string to lowercase.\n\n  Args:\n    text: The string to convert.\n\n  Returns:\n    The lowercase version of the string.\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  This function converts a string to lowercase.\n\n  Args:\n    text: The string to be converted.\n\n  Returns:\n    The lowercase version of the input string.\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(input_string):\n  \"\"\"\n  This function converts the given string to lower case.\n\n  Args:\n    input_string: The string to be converted to lowercase.\n\n  Returns:\n    The lowercase version of the input string.\n  \"\"\"\n  return input_string.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(str):\n  return str.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(string):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return string.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n  assert is_lower(\"InValid\") == \"invalid\"\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"Converts the given string to lower case.\n\n  Args:\n    text: The string to be converted.\n\n  Returns:\n    The lowercase version of the string.\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  This function converts the given string to lower case.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The input string in lowercase.\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(s):\n  \"\"\"Converts the given string to lower case.\"\"\"\n  return s.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(s):\n  \"\"\"\n  Converts the given string to lower case.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The input string converted to lower case.\n  \"\"\"\n  return s.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  Convert the given string to lower case.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The lower case version of the input string.\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}, {"solution": "def is_lower(text):\n  \"\"\"\n  Write a python function to convert the given string to lower case.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The input string in lower case.\n  \"\"\"\n  return text.lower()", "matching_cluster_idx": 4}]}, "Mbpp/563": {"dps": 14.071038251366122, "dps_norm": 45.0, "pass@1": 47.0, "profiled": [{"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string.\n  \"\"\"\n  result = []\n  current_value = \"\"\n  in_quotes = False\n  for char in text:\n    if char == '\"':\n      in_quotes = not in_quotes\n      if in_quotes:\n        current_value = \"\"\n      else:\n        result.append(current_value)\n    elif in_quotes:\n      current_value += char\n  return result", "matching_cluster_idx": 6}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n      text: The string to extract values from.\n\n  Returns:\n      A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings, each representing a value extracted between quotation marks.\n  \"\"\"\n  result = []\n  current_value = \"\"\n  in_quotes = False\n  for char in text:\n    if char == '\"':\n      in_quotes = not in_quotes\n      if in_quotes:\n        current_value += char\n      else:\n        result.append(current_value[1:])\n        current_value = \"\"\n    else:\n      if in_quotes:\n        current_value += char\n  return result", "matching_cluster_idx": 6}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string, each value enclosed in quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        in_quotes = True\n        start = i + 1\n      else:\n        in_quotes = False\n        result.append(text[start:i])\n    \n  return result", "matching_cluster_idx": 5}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n      text: The string to extract values from.\n\n  Returns:\n      A list of strings, each representing a value between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        in_quotes = True\n        start = i + 1\n      else:\n        in_quotes = False\n        result.append(text[start:i])\n  return result", "matching_cluster_idx": 5}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        start = i + 1\n        in_quotes = True\n      else:\n        result.append(text[start:i])\n        in_quotes = False\n  return result", "matching_cluster_idx": 5}, {"solution": "def extract_values(text):\n  \"\"\"Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string, each enclosed in quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        start = i + 1\n        in_quotes = True\n      else:\n        result.append(text[start:i])\n        in_quotes = False\n  return result", "matching_cluster_idx": 5}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The string to extract values from.\n\n  Returns:\n    A list of strings, where each string is a value enclosed in quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        in_quotes = True\n        start = i + 1\n      else:\n        in_quotes = False\n        result.append(text[start:i])\n  return result", "matching_cluster_idx": 5}, {"solution": "def extract_values(text):\n  \"\"\"Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A list of strings extracted from the input string.\n    \"\"\"\n    result = []\n    current_value = \"\"\n    in_quotes = False\n    for char in text:\n        if char == '\"':\n            in_quotes = not in_quotes\n            if in_quotes:\n                current_value = \"\"\n            else:\n                result.append(current_value)\n        elif in_quotes:\n            current_value += char\n    return result", "matching_cluster_idx": 6}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string.\n  \"\"\"\n  values = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      values.append(text[start:i])\n  return values", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings extracted from the input string.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n      text: The input string.\n\n    Returns:\n      A list of strings extracted from the input string.\n    \"\"\"\n    result = []\n    start = 0\n    in_quotes = False\n    for i, char in enumerate(text):\n        if char == '\"' and not in_quotes:\n            in_quotes = True\n            start = i + 1\n        elif char == '\"' and in_quotes:\n            in_quotes = False\n            result.append(text[start:i])\n    return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        list: A list of strings extracted from quotation marks.\n    \"\"\"\n    values = []\n    start = 0\n    in_quotes = False\n    for i, char in enumerate(text):\n        if char == '\"' and not in_quotes:\n            in_quotes = True\n            start = i + 1\n        elif char == '\"' and in_quotes:\n            in_quotes = False\n            values.append(text[start:i])\n    return values", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings, each representing a value extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}, {"solution": "def extract_values(text):\n  \"\"\"\n  Extracts values between quotation marks from a string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 3}]}, "Mbpp/572": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/578": {"dps": 58.41269841269841, "dps_norm": 63.63636363636363, "pass@1": 95.0, "profiled": [{"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves 3 lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing elements from list1, list2, and list3 interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing all elements from the three input lists interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n\n  Returns:\n      A new list containing the interleaved elements.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n\n  Returns:\n      A new list containing the elements of the three input lists interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"Interleaves three lists of the same length into a single flat list.\"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"Interleaves 3 lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing elements from list1, list2, and list3 interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves three lists of the same length into a single flat list.\n\n    Args:\n        list1: The first list.\n        list2: The second list.\n        list3: The third list.\n\n    Returns:\n        A new list containing the elements of the three input lists interleaved.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing all elements from the input lists interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves 3 lists of the same length into a single flat list.\n  \n  Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n  \n  Returns:\n      A new list containing all elements from the input lists interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"Interleaves three lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing elements from list1, list2, and list3 interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n\n  Returns:\n      A new list containing the elements of the three input lists interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing all elements from the input lists interleaved.\n\n  Raises:\n    ValueError: If the input lists are not of equal length.\n  \"\"\"\n  if len(list1) != len(list2) or len(list1) != len(list3):\n    raise ValueError(\"Input lists must have the same length.\")\n\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves 3 lists of the same length into a single flat list.\n\n    Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n\n    Returns:\n      A new list containing all elements from the input lists interleaved.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves 3 lists of the same length into a single flat list.\n\n  Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n\n  Returns:\n      A new list containing all elements from the three input lists, interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.append(list1[i])\n    interleaved_list.append(list2[i])\n    interleaved_list.append(list3[i])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n\n  Returns:\n      A new list containing the elements of the input lists interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"Interleaves three lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing all elements from list1, list2, and list3 interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list\nlist1 = [1,2,3,4,5,6,7]\nlist2 = [10,20,30,40,50,60,70]\nlist3 = [100,200,300,400,500,600,700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"Interleaves three lists of the same length into a single flat list.\"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.append(list1[i])\n    interleaved_list.append(list2[i])\n    interleaved_list.append(list3[i])\n  return interleaved_list", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"Interleaves 3 lists of the same length into a single flat list.\n\n    Args:\n      list1: The first list.\n      list2: The second list.\n      list3: The third list.\n\n    Returns:\n      A new list containing elements from list1, list2, and list3 interleaved.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves 3 lists of the same length into a single flat list.\n\n    Args:\n        list1: The first list.\n        list2: The second list.\n        list3: The third list.\n\n    Returns:\n        A new list containing all elements from the input lists interleaved.\n    \"\"\"\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.extend([list1[i], list2[i], list3[i]])\n    return interleaved_list\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]", "matching_cluster_idx": 6}, {"solution": "def interleave_lists(list1, list2, list3):\n  \"\"\"\n  Interleaves three lists of the same length into a single flat list.\n\n  Args:\n    list1: The first list.\n    list2: The second list.\n    list3: The third list.\n\n  Returns:\n    A new list containing elements from list1, list2, and list3 interleaved.\n  \"\"\"\n  interleaved_list = []\n  for i in range(len(list1)):\n    interleaved_list.extend([list1[i], list2[i], list3[i]])\n  return interleaved_list", "matching_cluster_idx": 6}]}, "Mbpp/586": {"dps": 98.83040935672514, "dps_norm": 87.5, "pass@1": 92.0, "profiled": [{"solution": "def split_Arr(arr, n):\n  \"\"\"\n  Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The input list.\n    n: The index at which to split the list.\n\n  Returns:\n    A new list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr,n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n    \n    Args:\n      arr: The list to be split.\n      n: The index at which to split the list.\n\n    Returns:\n      A new list with the first part appended to the end.\n    \"\"\"\n    return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"\n  Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The input list.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr: The list to be split.\n        n: The index at which to split the list.\n\n    Returns:\n        The modified list with the first part appended to the end.\n    \"\"\"\n    return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr: The list to be split.\n        n: The index at which to split the list.\n\n    Returns:\n        The modified list.\n    \"\"\"\n    return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n      arr: The list to be split.\n      n: The index at which to split the list.\n\n  Returns:\n      The modified list with the first part appended to the end.\n  \"\"\"\n  first_part = arr[:n]\n  second_part = arr[n:]\n  return second_part + first_part", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The list to split.\n    n: The index at which to split the list.\n\n  Returns:\n    The list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"\n  Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n      arr: The list to split.\n      n: The index at which to split the list.\n\n  Returns:\n      The modified list.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: The modified list with the first part appended to the end.\n    \"\"\"\n    first_part = arr[:n]\n    second_part = arr[n:]\n    return second_part + first_part", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The input list.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"\n  Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The input list.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The list to be split.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The list to be split.\n    n: The index at which to split the list.\n\n  Returns:\n    A new list with the first part appended to the end.\n\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n      arr: The input list.\n      n: The index at which to split the list.\n\n  Returns:\n      The modified list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"\n  Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The list to be split.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"\n  Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The list to be split.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"\n  Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The list to be split.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The input list.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n  first_part = arr[:n]\n  second_part = arr[n:]\n  return second_part + first_part", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The input list.\n    n: The index to split at.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}, {"solution": "def split_Arr(arr, n):\n  \"\"\"Splits a list at the nth element and adds the first part to the end.\n\n  Args:\n    arr: The list to be split.\n    n: The index at which to split the list.\n\n  Returns:\n    The modified list with the first part appended to the end.\n  \"\"\"\n\n  return arr[n:] + arr[:n]", "matching_cluster_idx": 6}]}, "Mbpp/587": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def list_tuple(data):\n  \"\"\"\n  This function converts a list to a tuple.\n\n  Args:\n      data: A list of elements.\n\n  Returns:\n      A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(data)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(my_list):\n  \"\"\"Converts a list to a tuple.\n\n  Args:\n    my_list: A list of elements.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(my_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n    lst: A list.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"\n  This function converts a list to a tuple.\n\n  Args:\n    lst: A list.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(input_list):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n    input_list: A list of elements.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(input_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(list_data):\n  \"\"\"\n  Converts a list to a tuple.\n  \"\"\"\n  return tuple(list_data)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(input_list):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n    input_list: A list of elements.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(input_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"Converts a list to a tuple.\n  Args:\n    lst: A list.\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(data):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n      data: A list of elements.\n\n  Returns:\n      A tuple containing the elements of the input list.\n  \"\"\"\n  return tuple(data)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"Converts a list to a tuple.\"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(input_list):\n  \"\"\"Converts a list to a tuple.\n\n  Args:\n      input_list: The list to be converted.\n\n  Returns:\n      A tuple containing the elements of the input list.\n  \"\"\"\n  return tuple(input_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(input_list):\n  \"\"\"Converts a list to a tuple.\n\n  Args:\n    input_list: A list of elements.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(input_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(input_list):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n    input_list: The list to be converted.\n\n  Returns:\n    A tuple containing the elements of the input list.\n  \"\"\"\n  return tuple(input_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"Converts a list to a tuple.\n\n  Args:\n    lst: A list.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(input_list):\n  \"\"\"Converts a list to a tuple.\n\n  Args:\n    input_list: A list of values.\n\n  Returns:\n    A tuple containing the same values as the input list.\n  \"\"\"\n  return tuple(input_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(my_list):\n  \"\"\"Converts a list to a tuple.\n\n  Args:\n      my_list: A list of elements.\n\n  Returns:\n      A tuple containing the elements from the input list.\n  \"\"\"\n  return tuple(my_list)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"\n  Converts a list to a tuple.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}, {"solution": "def list_tuple(lst):\n  \"\"\"\n  Converts a list to a tuple.\n\n  Args:\n    lst: A list of elements.\n\n  Returns:\n    A tuple containing the same elements as the input list.\n  \"\"\"\n  return tuple(lst)", "matching_cluster_idx": 3}]}, "Mbpp/588": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  \n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  This function finds the difference between the largest and smallest value in a given list.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  # Handle cases with less than two elements\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest values in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest values in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  # Handle cases with less than 2 elements\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n  Args:\n    nums: A list of numbers.\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  \n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest values in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest values in the list. \n  \"\"\"\n  if len(nums) < 2:\n    return 0  # Handle cases with less than two elements\n  else:\n    return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  # Handle cases with less than two numbers\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"Finds the difference between the largest and smallest values in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest values in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest values in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  # Handle cases with less than 2 elements\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest values in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest values in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  \n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  This function finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  \n  else:\n    return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      The difference between the largest and smallest values in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  \n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  This function finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  # Handle cases with less than two elements\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a given list.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      The difference between the largest and smallest value in the list.\n  \"\"\"\n  return max(nums) - min(nums)", "matching_cluster_idx": 5}, {"solution": "def big_diff(nums):\n  \"\"\"\n  Finds the difference between the largest and smallest value in a list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    The difference between the largest and smallest value in the list.\n  \"\"\"\n  if len(nums) < 2:\n    return 0  \n  return max(nums) - min(nums)", "matching_cluster_idx": 5}]}, "Mbpp/592": {"dps": null, "dps_norm": null, "pass@1": 2.0, "profiled": []}, "Mbpp/597": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/604": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def reverse_words(text):\n  \"\"\"Reverses words separated by spaces in a given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with the words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(reversed(words))", "matching_cluster_idx": 4}, {"solution": "def reverse_words(s):\n  \"\"\"\n  Reverses words separated by spaces in a given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = s.split()\n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(s):\n  \"\"\"\n  Reverses words separated by spaces in a given string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = s.split()\n  return ' '.join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"\n  Reverses the order of words in a string separated by spaces.\n\n  Args:\n    text: The string to reverse.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = text.split()  \n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(s: str) -> str:\n  \"\"\"\n  Reverses the order of words in a string separated by spaces.\n\n  Args:\n      s (str): The input string.\n\n  Returns:\n      str: The string with words in reversed order.\n  \"\"\"\n  words = s.split()\n  return ' '.join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(s):\n  \"\"\"\n  Reverses words separated by spaces in a given string.\n\n  Args:\n      s: The input string.\n\n  Returns:\n      The string with the words reversed.\n  \"\"\"\n  words = s.split()  \n  return \" \".join(reversed(words))", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n    \"\"\"\n    Reverses words separated by spaces in a string.\n\n    Args:\n      text: The input string.\n\n    Returns:\n      The string with words reversed.\n    \"\"\"\n    words = text.split()\n    return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"Reverses the order of words in a string separated by spaces.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"\n  Reverses the order of words in a string.\n\n  Args:\n      text: The string to reverse the words in.\n\n  Returns:\n      The string with the words in reversed order.\n  \"\"\"\n  words = text.split()\n  return \" \".join(reversed(words))", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"\n  Reverses the order of words in a string separated by spaces.\n  \"\"\"\n  words = text.split()\n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n    \"\"\"Reverses words separated by spaces in a string.\n\n    Args:\n        text: The string to reverse.\n\n    Returns:\n        The string with words reversed.\n    \"\"\"\n    words = text.split()\n    return \" \".join(reversed(words))", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"\n  Reverses the order of words in a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(reversed(words))", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"Reverses words in a string separated by spaces.\n\n  Args:\n    text: The string to reverse.\n\n  Returns:\n    The string with the words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"\n  Reverses the order of words in a string separated by spaces.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"Reverses the words in a string separated by spaces.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(s):\n  \"\"\"\n  Reverses the order of words in a string.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with the words reversed.\n  \"\"\"\n  words = s.split()\n  return \" \".join(reversed(words))", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"\n  Reverses the order of words in a string separated by spaces.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(reversed(words))", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"Reverses words separated by spaces in a given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = text.split()\n  return \" \".join(words[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(s):\n  \"\"\"\n  Reverses words in a string separated by spaces.\n\n  Args:\n    s: The input string.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  return ' '.join(s.split()[::-1])", "matching_cluster_idx": 4}, {"solution": "def reverse_words(text):\n  \"\"\"\n  Reverses the order of words in a string.\n\n  Args:\n    text: The string to reverse words in.\n\n  Returns:\n    The string with words reversed.\n  \"\"\"\n  words = text.split()\n  return ' '.join(words[::-1])", "matching_cluster_idx": 4}]}, "Mbpp/610": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/611": {"dps": 95.1840490797546, "dps_norm": 98.33333333333333, "pass@1": 94.0, "profiled": [{"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (zero-based).\n\n  Returns:\n    The maximum value in the nth column.\n\n  Raises:\n    IndexError: If the column index is out of range.\n  \"\"\"\n  max_value = float('-inf')  \n  for row in matrix:\n    if len(row) <= n:\n      raise IndexError(\"Column index out of range\")\n    max_value = max(max_value, row[n])\n  return max_value", "matching_cluster_idx": 3}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n      n: The index of the column to find the maximum value in.\n\n  Returns:\n      The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]  \n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, returns the max of the n'th column.\n\n  Args:\n    matrix: A list of lists representing a matrix.\n    n: The index of the column to find the maximum value in.\n\n  Returns:\n    The maximum value in the n'th column of the matrix.\n\n  Raises:\n    IndexError: If n is out of range.\n  \"\"\"\n  max_value = matrix[0][n]\n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, returns the max of the n'th column.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (0-indexed).\n\n  Returns:\n    The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]\n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n    matrix: A list of lists representing a matrix.\n    n: The index of the column (starting from 0).\n\n  Returns:\n    The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]  # Initialize with the first element of the column\n  for row in matrix:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value\nmatrix = [[5, 6, 7], [1, 3, 5], [8, 9, 19]]\nn = 2\nmax_value = max_of_nth(matrix, n)", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, return the max of the n'th column.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n      n: The index of the column (zero-based).\n\n  Returns:\n      The maximum value in the n'th column of the matrix.\n  \"\"\"\n  max_value = matrix[0][n] \n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, returns the max of the n'th column.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column to find the maximum value in.\n\n  Returns:\n    The maximum value in the n'th column.\n  \"\"\"\n  max_value = matrix[0][n]\n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (zero-based).\n\n  Returns:\n    The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]  \n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (zero-based).\n\n  Returns:\n    The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]  \n  for row in matrix:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists returns the max of the n'th column.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n      n: The index of the column to find the maximum value in.\n\n  Returns:\n      The maximum value in the n'th column.\n\n  Raises:\n      IndexError: If n is out of bounds for the matrix.\n  \"\"\"\n  max_value = matrix[0][n]\n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists returns the max of the n'th column.\n  \n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (zero-based).\n  \n  Returns:\n    The maximum value in the nth column of the matrix.\n  \"\"\"\n  max_value = matrix[0][n]\n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, return the max of the n'th column.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n      n: The index of the column (zero-based)\n\n  Returns:\n      The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]\n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (0-based).\n\n  Returns:\n    The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]  \n  for row in matrix[1:]:\n    max_value = max(max_value, row[n])\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n      n: The index of the column (starting from 0).\n\n  Returns:\n      The maximum value in the nth column.\n  \"\"\"\n  max_value = matrix[0][n]  \n  for row in matrix[1:]:\n    max_value = max(max_value, row[n])\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, return the max of the n'th column.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (zero-based).\n\n  Returns:\n    The maximum value in the nth column.\n\n  Examples:\n    max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n  \"\"\"\n  max_value = matrix[0][n]\n  for i in range(1, len(matrix)):\n    if matrix[i][n] > max_value:\n      max_value = matrix[i][n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists returns the max of the n'th column.\n  assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\n  \"\"\"\n  max_value = matrix[0][n]  \n  for row in matrix:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value\nmatrix = [[5, 6, 7], [1, 3, 5], [8, 9, 19]]\nn = 2", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, return the max of the n'th column.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column to find the maximum value in.\n\n  Returns:\n    The maximum value in the n'th column of the matrix.\n\n  Raises:\n    IndexError: If n is out of bounds for the matrix.\n  \"\"\"\n  max_value = matrix[0][n]\n  for row in matrix:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Finds the maximum value in the nth column of a matrix.\n\n  Args:\n      matrix: A list of lists representing the matrix.\n      n: The index of the column (starting from 0).\n\n  Returns:\n      The maximum value in the nth column.\n  \"\"\"\n  max_value = float('-inf')  \n  for row in matrix:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, returns the max of the n'th column.\n  \n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column to find the maximum value in.\n\n  Returns:\n    The maximum value in the nth column of the matrix.\n  \"\"\"\n  max_value = matrix[0][n]  \n  for row in matrix[1:]:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}, {"solution": "def max_of_nth(matrix, n):\n  \"\"\"\n  Given a matrix represented as a list of lists, returns the max of the n'th column.\n\n  Args:\n    matrix: A list of lists representing the matrix.\n    n: The index of the column (zero-indexed) to find the maximum value in.\n\n  Returns:\n    The maximum value in the nth column of the matrix.\n  \"\"\"\n  max_value = float('-inf')  \n  for row in matrix:\n    if row[n] > max_value:\n      max_value = row[n]\n  return max_value", "matching_cluster_idx": 5}]}, "Mbpp/631": {"dps": null, "dps_norm": null, "pass@1": 2.0, "profiled": []}, "Mbpp/632": {"dps": 95.0093808630394, "dps_norm": 95.71428571428571, "pass@1": 95.0, "profiled": [{"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The list with all zeroes moved to the end.\n  \"\"\"\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index]\n      non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n    \"\"\"\n    Moves all zeroes to the end of a list while preserving order of other elements.\n\n    Args:\n      nums: A list of integers.\n\n    Returns:\n      The modified list with zeroes moved to the end.\n    \"\"\"\n    non_zero_index = 0 \n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[non_zero_index] = nums[i]\n            non_zero_index += 1\n    \n    while non_zero_index < len(nums):\n        nums[non_zero_index] = 0\n        non_zero_index += 1\n    \n    return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n  \"\"\"\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  while non_zero_index < len(nums):\n    nums[non_zero_index] = 0\n    non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(arr):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n\n  Args:\n    arr: A list of integers.\n\n  Returns:\n    A new list with all zeroes moved to the end.\n  \"\"\"\n  non_zero_elements = [x for x in arr if x != 0]\n  return non_zero_elements + [0] * arr.count(0)", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The list with all zeroes moved to the end.\n  \"\"\"\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  for i in range(non_zero_index, len(nums)):\n    nums[i] = 0\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"Moves all zeroes to the end of the given list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The modified list with zeroes moved to the end.\n  \"\"\"\n  non_zero_index = 0 \n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  for i in range(non_zero_index, len(nums)):\n    nums[i] = 0\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"Moves all zeroes to the end of a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The list with zeroes moved to the end.\n  \"\"\"\n  non_zero_indices = [i for i, x in enumerate(nums) if x != 0]\n  return [nums[i] for i in non_zero_indices] + [nums[i] for i in range(len(nums)) if i not in non_zero_indices]", "matching_cluster_idx": 0}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      The list with all zeroes moved to the end.\n  \"\"\"\n  non_zeroes = []\n  for num in nums:\n    if num != 0:\n      non_zeroes.append(num)\n  return non_zeroes + [0] * nums.count(0)", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The list with all zeroes moved to the end.\n  \"\"\"\n\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  while non_zero_index < len(nums):\n    nums[non_zero_index] = 0\n    non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"Moves all zeroes to the end of a list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    A new list with all zeroes moved to the end.\n  \"\"\"\n  non_zero_nums = []\n  for num in nums:\n    if num != 0:\n      non_zero_nums.append(num)\n  non_zero_nums.extend([0] * nums.count(0))\n  return non_zero_nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The list with zeroes moved to the end while maintaining the order of non-zero elements.\n  \"\"\"\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  while non_zero_index < len(nums):\n    nums[non_zero_index] = 0\n    non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n    \"\"\"\n    Moves all zeroes to the end of the given list.\n\n    Args:\n      nums: A list of integers.\n\n    Returns:\n      The modified list with zeroes moved to the end.\n    \"\"\"\n    non_zero_index = 0\n    for i in range(len(nums)):\n        if nums[i] != 0:\n            nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index]\n            non_zero_index += 1\n    return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(arr):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n  \n  Args:\n      arr: A list of integers.\n      \n  Returns:\n      A new list with zeroes moved to the end.\n  \"\"\"\n  non_zero_elements = []\n  zero_elements = []\n  for element in arr:\n    if element != 0:\n      non_zero_elements.append(element)\n    else:\n      zero_elements.append(element)\n  return non_zero_elements + zero_elements", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The list with all zeroes moved to the end.\n  \"\"\"\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  while non_zero_index < len(nums):\n    nums[non_zero_index] = 0\n    non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n    \"\"\"\n    Moves all zeroes to the end of the given list.\n    \n    Args:\n        nums: A list of integers.\n\n    Returns:\n        A new list with all zeroes moved to the end.\n    \"\"\"\n    non_zero_nums = []\n    for num in nums:\n      if num != 0:\n        non_zero_nums.append(num)\n    return non_zero_nums + [0] * nums.count(0)", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list while preserving the order of other elements.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The modified list with zeroes moved to the end.\n  \"\"\"\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index], nums[i] = nums[i], nums[non_zero_index]\n      non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list while maintaining the relative order of other elements.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The list with zeroes moved to the end.\n  \"\"\"\n  result = []\n  non_zero_count = 0\n  for num in nums:\n    if num != 0:\n      result.append(num)\n      non_zero_count += 1\n  for _ in range(len(nums) - non_zero_count):\n    result.append(0)\n  return result", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n  \"\"\"\n  non_zero_index = 0  \n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]  \n      non_zero_index += 1\n  while non_zero_index < len(nums):\n    nums[non_zero_index] = 0\n    non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n  \n  Args:\n      nums: A list of integers.\n  \n  Returns:\n      The modified list with all zeroes moved to the end.\n  \"\"\"\n  non_zero_index = 0 \n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  for i in range(non_zero_index, len(nums)):\n    nums[i] = 0\n  return nums", "matching_cluster_idx": 6}, {"solution": "def move_zero(nums):\n  \"\"\"\n  Moves all zeroes to the end of the given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The list with all zeroes moved to the end.\n  \"\"\"\n  non_zero_index = 0\n  for i in range(len(nums)):\n    if nums[i] != 0:\n      nums[non_zero_index] = nums[i]\n      non_zero_index += 1\n  while non_zero_index < len(nums):\n    nums[non_zero_index] = 0\n    non_zero_index += 1\n  return nums", "matching_cluster_idx": 6}]}, "Mbpp/633": {"dps": 94.3089430894309, "dps_norm": 50.0, "pass@1": 19.0, "profiled": [{"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of XOR of all pairs of numbers in the given list.\n\n  Args:\n    nums: A list of integers.\n    n: The length of the list.\n\n  Returns:\n    The sum of XOR of all pairs of numbers in the list.\n\n  Example:\n  pair_xor_Sum([5,9,7,6],4) == 47\n  \"\"\"\n  sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      sum += nums[i] ^ nums[j]\n  return sum\nnums = [5, 9, 7, 6]\nn = len(nums)", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of xor of all pairs of numbers in the given list.\n\n  Args:\n    nums: A list of integers.\n    n: The number of elements to consider from the list.\n\n  Returns:\n    The sum of xor of all pairs of numbers in the list.\n\n  Raises:\n    ValueError: If n is greater than the length of the list.\n\n  \"\"\"\n  if n > len(nums):\n    raise ValueError(\"n cannot be greater than the length of the list.\")\n\n  xor_sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      xor_sum += nums[i] ^ nums[j]  \n  return xor_sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of XOR of all pairs of numbers in the given list.\n\n  Args:\n    nums: A list of integers.\n    n: The length of the input list.\n\n  Returns:\n    The sum of XOR of all pairs of numbers in the list.\n  \"\"\"\n  xor_sum = 0\n  for i in range(n):\n    for j in range(i + 1, n):\n      xor_sum += nums[i] ^ nums[j]\n  return xor_sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of XOR of all pairs of numbers in the given list.\n  \n  Args:\n    nums: A list of integers.\n    n: The number of elements to consider (used for slicing the list if it's longer).\n  \n  Returns:\n    The sum of XOR of all pairs of numbers.\n  \"\"\"\n  total_xor_sum = 0\n  for i in range(n):\n    for j in range(i + 1, n):\n      total_xor_sum += nums[i] ^ nums[j]\n  return total_xor_sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of xor of all pairs of numbers in the given list.\n\n  Args:\n      nums: A list of integers.\n      n: The size of the list.\n\n  Returns:\n      The sum of xor of all pairs of numbers in the list.\n  \"\"\"\n  sum_xor = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      sum_xor += nums[i] ^ nums[j]\n  return sum_xor\nnums = [5,9,7,6]\nn = len(nums)", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Calculates the sum of XOR of all pairs of numbers in a list.\n\n  Args:\n    nums: A list of integers.\n    n: The length of the list.\n\n  Returns:\n    The sum of XOR of all pairs of numbers in the list.\n  \"\"\"\n  sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      sum += nums[i] ^ nums[j]\n  return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Finds the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n      nums: A list of numbers.\n      n: An integer representing the size of the list.\n\n    Returns:\n      The sum of xor of all pairs of numbers in the list.\n\n    Example:\n      pair_xor_Sum([5,9,7,6],4) == 47\n    \"\"\"\n\n    sum = 0\n    for i in range(n):\n      for j in range(i+1, n):\n        sum += nums[i] ^ nums[j]\n    return sum\nnums = [5,9,7,6]\nn = len(nums)", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Finds the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n        nums: A list of integers.\n        n: The length of the list.\n\n    Returns:\n        The sum of xor of all pairs of numbers in the list.\n    \"\"\"\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += nums[i] ^ nums[j]\n    return xor_sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(arr, n):\n  \"\"\"\n  Finds the sum of XOR of all pairs of numbers in the given list.\n\n  Args:\n    arr: The list of numbers.\n    n: The size of the list.\n\n  Returns:\n    The sum of XOR of all pairs of numbers in the list.\n  \"\"\"\n  sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      sum += arr[i] ^ arr[j]\n  return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(arr, n):\n  \"\"\"\n  Find the sum of xor of all pairs of numbers in the given list.\n\n  Args:\n    arr: A list of numbers.\n    n: The size of the list.\n\n  Returns:\n    The sum of xor of all pairs of numbers in the list.\n  \"\"\"\n  sum = 0\n  for i in range(n):\n    for j in range(i + 1, n):\n      sum += arr[i] ^ arr[j]\n  return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of XOR of all pairs of numbers in the given list.\n\n  Args:\n    nums: A list of integers.\n    n: The length of the list.\n\n  Returns:\n    The sum of XOR of all pairs of numbers in the list.\n  \"\"\"\n  xor_sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      xor_sum += nums[i] ^ nums[j]\n  return xor_sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Finds the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        nums: A list of integers.\n        n: An integer representing the size of the list.\n\n    Returns:\n        The sum of XOR of all pairs of numbers in the list.\n    \"\"\"\n\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += nums[i] ^ nums[j]\n    return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(arr, n):\n    \"\"\"\n    This function calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        arr: A list of integers.\n        n: The length of the list.\n\n    Returns:\n        The sum of XOR of all pairs in the list.\n    \"\"\"\n\n    xor_sum = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\narr = [5, 9, 7, 6]\nn = len(arr)", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of xor of all pairs of numbers in the given list.\n\n  Args:\n    nums: A list of integers.\n    n: The size of the list.\n\n  Returns:\n    The sum of xor of all pairs of numbers in the list.\n  \"\"\"\n  sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      sum += nums[i] ^ nums[j]\n  return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Find the sum of xor of all pairs of numbers in the given list.\n\n  Args:\n      nums: A list of integers.\n      n: An integer representing the size of the list.\n\n  Returns:\n      The sum of xor of all pairs of numbers in the list.\n  \"\"\"\n\n  sum = 0\n  for i in range(n):\n    for j in range(i + 1, n):\n      sum += nums[i] ^ nums[j]\n  return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Finds the sum of XOR of all pairs of numbers in the given list.\n\n  Args:\n    nums: A list of integers.\n    n: The size of the list.\n\n  Returns:\n    The sum of XOR of all pairs of numbers in the list.\n  \"\"\"\n\n  sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      sum += nums[i] ^ nums[j]\n  return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(arr, n):\n  \"\"\"\n  Finds the sum of XOR of all pairs of numbers in the given list.\n\n  Args:\n    arr: A list of integers.\n    n: An integer, representing the length of the list.\n\n  Returns:\n    An integer representing the sum of XOR of all pairs.\n  \"\"\"\n  sum_xor = 0\n  for i in range(n):\n    for j in range(i + 1, n):\n      sum_xor += arr[i] ^ arr[j]\n  return sum_xor\narr = [5, 9, 7, 6]\nn = len(arr)", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(arr,n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in a list.\n\n    Args:\n        arr: A list of integers.\n        n: An integer representing the size of the list.\n\n    Returns:\n        The sum of XOR of all pairs of numbers in the list.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n      for j in range(i+1,n):\n        sum += arr[i] ^ arr[j]\n    return sum", "matching_cluster_idx": 2}, {"solution": "def pair_xor_Sum(nums, n):\n  \"\"\"\n  Calculates the sum of XOR of all pairs of numbers in a list.\n\n  Args:\n    nums: A list of integers.\n    n: The size of the list.\n\n  Returns:\n    The sum of XOR of all pairs of numbers in the list.\n\n  \"\"\"\n  sum = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      sum += nums[i] ^ nums[j]\n  return sum", "matching_cluster_idx": 2}]}, "Mbpp/644": {"dps": 91.6223404255319, "dps_norm": 90.33333333333333, "pass@1": 83.0, "profiled": [{"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n    arr: The input array.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses an array upto a given position.\n\n    Args:\n      arr: The array to reverse.\n      k: The position up to which to reverse the array.\n\n    Returns:\n      The reversed array.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]  \n    return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"Reverses an array up to a given position.\n\n    Args:\n        arr: The array to be reversed.\n        k: The position up to which the array should be reversed.\n\n    Returns:\n        The reversed array.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]\n    return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n      arr: The array to be reversed.\n      k: The position up to which the array should be reversed.\n\n  Returns:\n      The reversed array.\n\n  Examples:\n      reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\n  \"\"\"\n  arr[:k] = arr[:k][::-1] \n  return arr\nk = 4", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses an array upto a given position.\n\n    Args:\n        arr: The input array.\n        k: The position upto which the array should be reversed.\n\n    Returns:\n        The reversed array.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]  \n    return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr,k):\n    \"\"\"\n    Reverses an array up to a given position.\n\n    Args:\n      arr: The input array.\n      k: The position up to which to reverse the array.\n\n    Returns:\n      The reversed array.\n    \"\"\"\n    arr[:k] = arr[:k][::-1]\n    return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"Reverses an array up to a given position.\n\n  Args:\n    arr: The array to be reversed.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array upto a given position.\n\n  Args:\n      arr: The array to reverse.\n      k: The position up to which the array should be reversed.\n\n  Returns:\n      The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n    arr: The input array.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The reversed array.\n  \"\"\"\n  \n  left = 0\n  right = k - 1 \n  while left < right:\n    arr[left], arr[right] = arr[right], arr[left]\n    left += 1\n    right -= 1\n  return arr", "matching_cluster_idx": 7}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n    arr: The input array.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n    arr: The array to be reversed.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]  \n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n    arr: The array to be reversed.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]  \n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses an array upto a given position.\n    \n    Args:\n      arr: The array to be reversed.\n      k: The position (index) up to which the array should be reversed.\n    \n    Returns:\n      The reversed array.\n\n    \"\"\"\n    arr[:k] = arr[:k][::-1]\n    return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr,k):\n  \"\"\"\n  Reverses an array upto a given position.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n    arr: The input array.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The modified array with elements reversed up to the given position.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses an array up to a given position.\n\n    Args:\n        arr (list): The input array.\n        k (int): The position up to which the array should be reversed.\n\n    Returns:\n        list: The modified array with elements reversed up to the given position.\n    \"\"\"\n    \n    arr[:k] = arr[:k][::-1]\n    return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n      arr: The array to be reversed.\n      k: The position up to which the array should be reversed.\n\n  Returns:\n      The reversed array.\n  \"\"\"\n  return arr[:k][::-1] + arr[k:]\nk = 4", "matching_cluster_idx": 10}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array up to a given position.\n\n  Args:\n    arr: The input array.\n    k: The position up to which the array should be reversed.\n\n  Returns:\n    The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr\nk = 4", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(arr, k):\n  \"\"\"\n  Reverses an array upto a given position.\n\n  Args:\n      arr: The array to reverse.\n      k: The position up to which the array should be reversed.\n\n  Returns:\n      The reversed array.\n  \"\"\"\n  arr[:k] = arr[:k][::-1]\n  return arr", "matching_cluster_idx": 13}, {"solution": "def reverse_Array_Upto_K(nums, k):\n    \"\"\"\n    Reverses an array up to a given position.\n\n    Args:\n      nums: The array to be reversed.\n      k: The position (index) up to which to reverse the array.\n\n    Returns:\n      The reversed array.\n    \"\"\"\n    nums[:k] = nums[:k][::-1]  \n    return nums", "matching_cluster_idx": 13}]}, "Mbpp/720": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def add_dict_to_tuple(tup, dictionary):\n  \"\"\"\n  Adds a dictionary to the tuple.\n\n  Args:\n      tup: The tuple to add the dictionary to.\n      dictionary: The dictionary to add to the tuple.\n\n  Returns:\n      A tuple containing all elements of the original tuple and the dictionary.\n  \"\"\"\n  return tup + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(input_tuple, input_dict):\n  \"\"\"Adds a dictionary to the end of a tuple.\n\n  Args:\n    input_tuple: The tuple to modify.\n    input_dict: The dictionary to add.\n\n  Returns:\n    A new tuple containing the original tuple and the dictionary.\n  \"\"\"\n  return input_tuple + (input_dict,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tup, dict_):\n    \"\"\"\n    Adds a dictionary to the end of a tuple.\n\n    Args:\n        tup: The input tuple.\n        dict_: The dictionary to add.\n\n    Returns:\n        A new tuple with the dictionary appended.\n    \"\"\"\n    return tup + (dict_,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dic):\n    \"\"\"\n    Adds a dictionary to a tuple.\n    Args:\n        tp: The input tuple.\n        dic: The input dictionary.\n    Returns:\n        A new tuple containing the original tuple elements and the dictionary.\n    \"\"\"\n    return tp + (dic,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dictionary):\n  \"\"\"\n  Adds a dictionary to the end of a tuple.\n\n  Args:\n    tp: The input tuple.\n    dictionary: The dictionary to add.\n\n  Returns:\n    A new tuple with the dictionary appended.\n  \"\"\"\n  return tp + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dic):\n  \"\"\"\n  Adds a dictionary to the end of a tuple.\n\n  Args:\n    tp: A tuple.\n    dic: A dictionary.\n\n  Returns:\n    A new tuple containing all elements of the input tuple, followed by the input dictionary.\n  \"\"\"\n  return tp + (dic,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tup, dictionary):\n  \"\"\"\n  Adds a dictionary to a tuple.\n  \n  Args:\n      tup: The tuple to add the dictionary to.\n      dictionary: The dictionary to add.\n  \n  Returns:\n      A new tuple containing the original tuple and the dictionary.\n  \"\"\"\n  return tup + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dictionary):\n  \"\"\"\n  Adds a dictionary to the tuple.\n\n  Args:\n    tp: The tuple.\n    dictionary: The dictionary.\n\n  Returns:\n    A tuple containing the original tuple elements followed by the dictionary.\n  \"\"\"\n  return tp + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tuple1, dictionary1):\n  \"\"\"Adds a dictionary to the end of a tuple.\n\n  Args:\n    tuple1: The input tuple.\n    dictionary1: The input dictionary.\n\n  Returns:\n    A tuple with the original tuple elements followed by the dictionary.\n  \"\"\"\n  return tuple1 + (dictionary1,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dict1):\n  \"\"\"\n  Adds a dictionary to the end of a tuple.\n\n  Args:\n      tp (tuple): The input tuple.\n      dict1 (dict): The dictionary to add.\n\n  Returns:\n      tuple: The tuple with the dictionary added.\n  \"\"\"\n  return tp + (dict1,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dictionary):\n  \"\"\"\n  Adds a dictionary to the end of a tuple.\n\n  Args:\n      tp: The tuple to add the dictionary to.\n      dictionary: The dictionary to add.\n\n  Returns:\n      A new tuple with the dictionary appended.\n  \"\"\"\n  return tp + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tup, dictionary):\n  \"\"\"\n  This function adds a dictionary to the end of a tuple.\n  Args:\n    tup: The input tuple.\n    dictionary: The dictionary to be added.\n  Returns:\n    A new tuple with the dictionary appended.\n  \"\"\"\n  return tup + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tup, dict):\n    \"\"\"Adds a dictionary to the end of a tuple.\n\n    Args:\n      tup: The input tuple.\n      dict: The dictionary to add.\n\n    Returns:\n      A tuple with the original tuple and the dictionary added.\n    \"\"\"\n    return tup + (dict,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dictionary):\n  \"\"\"\n  Adds a dictionary to the end of a tuple.\n\n  Args:\n      tp: The tuple to which the dictionary will be added.\n      dictionary: The dictionary to add.\n\n  Returns:\n      A new tuple containing all elements of the input tuple followed by the input dictionary.\n  \"\"\"\n  return tp + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tup, dictionary):\n  \"\"\"\n  Adds a dictionary to the end of a tuple.\n\n  Args:\n    tup: The tuple to add the dictionary to.\n    dictionary: The dictionary to add to the tuple.\n\n  Returns:\n    A new tuple with the dictionary appended.\n  \"\"\"\n  return tup + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tuple1, dictionary1):\n  \"\"\"\n  Adds a dictionary to the tuple.\n  The output should be a tuple.\n\n  Args:\n      tuple1: The input tuple.\n      dictionary1: The input dictionary.\n\n  Returns:\n      A tuple with the original tuple elements and the dictionary.\n  \"\"\"\n  return tuple1 + (dictionary1,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, d):\n  \"\"\"\n  This function takes a tuple and a dictionary as input\n  and returns a new tuple with the dictionary appended.\n  \"\"\"\n  return tp + (d,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dic):\n  \"\"\"\n  This function adds a dictionary to the tuple.\n\n  Args:\n    tp: A tuple.\n    dic: A dictionary.\n\n  Returns:\n    A new tuple containing the original tuple and the dictionary.\n  \"\"\"\n  return tp + (dic,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tpl, dictionary):\n  \"\"\"\n  Adds a dictionary to the end of a tuple.\n\n  Args:\n    tpl: The input tuple.\n    dictionary: The dictionary to add.\n\n  Returns:\n    A new tuple containing the original tuple elements followed by the dictionary.\n  \"\"\"\n  return tpl + (dictionary,)", "matching_cluster_idx": 4}, {"solution": "def add_dict_to_tuple(tp, dictionary):\n  \"\"\"\n  Adds a dictionary to the tuple.\n\n  Args:\n    tp: A tuple.\n    dictionary: A dictionary.\n\n  Returns:\n    A tuple with the dictionary appended.\n  \"\"\"\n  return tp + (dictionary,)", "matching_cluster_idx": 4}]}, "Mbpp/725": {"dps": 33.19672131147541, "dps_norm": 38.75, "pass@1": 39.0, "profiled": [{"solution": "def extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" from a given string.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        list: A list of strings extracted between quotation marks.\n    \"\"\"\n    result = []\n    current_quote = ''\n    in_quotes = False\n    for char in text:\n        if char == '\"':\n            in_quotes = not in_quotes\n            if in_quotes:\n                current_quote += char\n            else:\n                result.append(current_quote[1:])  # Remove the initial quote\n                current_quote = ''\n        elif in_quotes:\n            current_quote += char\n    return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        in_quotes = True\n        start = i + 1\n      else:\n        in_quotes = False\n        result.append(text[start:i])\n  return result", "matching_cluster_idx": 2}, {"solution": "import re\ndef extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings extracted between quotation marks.\n  \"\"\"\n  return re.findall(r'\"([^\"]*)\"', text)", "matching_cluster_idx": 5}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 1}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  current_quote = \"\"\n  in_quote = False\n  for char in text:\n    if char == '\"':\n      in_quote = not in_quote\n      if in_quote:\n        current_quote += char\n      else:\n        result.append(current_quote[1:])  \n        current_quote = \"\"\n    else:\n      if in_quote:\n        current_quote += char\n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        start = i + 1\n        in_quotes = True\n      else:\n        result.append(text[start:i])\n        in_quotes = False\n    \n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  in_quotes = False\n  current_value = \"\"\n  for char in text:\n    if char == '\"':\n      in_quotes = not in_quotes\n      if in_quotes:\n        current_value = \"\"\n      else:\n        result.append(current_value)\n    elif in_quotes:\n      current_value += char\n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string, between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  return result", "matching_cluster_idx": 1}, {"solution": "def extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A list of strings extracted from the input string.\n    \"\"\"\n    result = []\n    start = -1\n    for i, char in enumerate(text):\n        if char == '\"':\n            if start == -1:\n                start = i + 1\n            else:\n                result.append(text[start:i])\n                start = -1\n    return result", "matching_cluster_idx": 2}, {"solution": "import re\ndef extract_quotation(text):\n  \"\"\"Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from the input string, \n    each representing a value enclosed in quotation marks.\n  \"\"\"\n  return re.findall(r'\"([^\"]*)\"', text)", "matching_cluster_idx": 6}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted from quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        start = i + 1\n        in_quotes = True\n      else:\n        result.append(text[start:i])\n        in_quotes = False\n    \n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n      text: The input string.\n\n    Returns:\n      A list of strings extracted from the input string.\n    \"\"\"\n    result = []\n    start = 0\n    in_quotes = False\n    for i, char in enumerate(text):\n        if char == '\"' and not in_quotes:\n            in_quotes = True\n            start = i + 1\n        elif char == '\"' and in_quotes:\n            in_quotes = False\n            result.append(text[start:i])\n    return result", "matching_cluster_idx": 1}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  current_word = \"\"\n  in_quotes = False\n  for char in text:\n    if char == '\"':\n      in_quotes = not in_quotes\n      if in_quotes:\n        current_word += char\n      else:\n        result.append(current_word[1:])  # Remove leading quote\n        current_word = \"\"\n    elif in_quotes:\n      current_word += char\n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n      text: The input string.\n\n    Returns:\n      A list of strings extracted between quotation marks.\n    \"\"\"\n    result = []\n    start = -1\n    for i, char in enumerate(text):\n      if char == '\"':\n        if start == -1:\n          start = i + 1\n        else:\n          result.append(text[start:i])\n          start = -1\n    return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      start = i + 1\n      in_quotes = True\n    elif char == '\"' and in_quotes:\n      result.append(text[start:i])\n      in_quotes = False\n      start = 0\n  return result", "matching_cluster_idx": 1}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extract values between quotation marks \" \" of the given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  in_quotes = False\n  current_quote = \"\"\n  for char in text:\n    if char == '\"':\n      in_quotes = not in_quotes\n      if in_quotes:\n        current_quote += char\n      else:\n        result.append(current_quote[1:])\n        current_quote = \"\"\n    elif in_quotes:\n      current_quote += char\n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        start = i + 1\n        in_quotes = True\n      else:\n        result.append(text[start:i])\n        in_quotes = False\n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        A list of strings extracted from quotation marks.\n    \"\"\"\n    result = []\n    current_quote = \"\"\n    in_quotes = False\n    for char in text:\n        if char == '\"':\n            in_quotes = not in_quotes\n            if in_quotes:\n                current_quote += char\n            else:\n                result.append(current_quote[1:])  \n                current_quote = \"\"\n        elif in_quotes:\n            current_quote += char\n    return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      A list of strings, each representing a value enclosed in quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n  for i, char in enumerate(text):\n    if char == '\"':\n      if not in_quotes:\n        start = i + 1\n        in_quotes = True\n      else:\n        result.append(text[start:i])\n        in_quotes = False\n    elif in_quotes:\n      pass  # Keep iterating while inside quotes\n  return result", "matching_cluster_idx": 2}, {"solution": "def extract_quotation(text):\n  \"\"\"\n  Extracts values between quotation marks \" \" of the given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    A list of strings extracted between quotation marks.\n  \"\"\"\n  result = []\n  start = 0\n  in_quotes = False\n\n  for i, char in enumerate(text):\n    if char == '\"' and not in_quotes:\n      in_quotes = True\n      start = i + 1\n    elif char == '\"' and in_quotes:\n      in_quotes = False\n      result.append(text[start:i])\n  \n  return result", "matching_cluster_idx": 1}]}, "Mbpp/732": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 80.0, "profiled": [{"solution": "def replace_specialchar(text):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in a string.\n\n    Args:\n        text: The input string.\n\n    Returns:\n        The modified string with replaced characters.\n    \"\"\"\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n      text: The input string.\n\n    Returns:\n      The string with spaces, commas, and dots replaced by colons.\n    \"\"\"\n    return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon in a given string.\n\n  Args:\n    text: The string to be modified.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n  assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\n  \"\"\"\n  return text.replace(\" \",\":\").replace(\",\",\":\").replace(\".\",\":\")\ntext = 'Python language, Programming language.'", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced with colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"Replaces all occurrences of spaces, commas, or dots with a colon.\"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replace all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n    text: The string to replace characters in.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n      text: The string to be modified.\n\n  Returns:\n      The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replace all occurrences of spaces, commas, or dots with a colon in a given string.\n  \n  Args:\n    text: The input string.\n  \n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon in a given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  This function replaces all occurrences of spaces, commas, or dots with a colon in a given string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon in a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replace all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"\n  Replaces all occurrences of spaces, commas, or dots with a colon.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(' ', ':').replace(',', ':').replace('.', ':')", "matching_cluster_idx": 9}, {"solution": "def replace_specialchar(text):\n  \"\"\"Replaces all occurrences of spaces, commas, or dots with a colon.\n  \n  Args:\n    text: The input string.\n\n  Returns:\n    The string with spaces, commas, and dots replaced by colons.\n  \"\"\"\n  return text.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "matching_cluster_idx": 9}]}, "Mbpp/740": {"dps": 93.2909090909091, "dps_norm": 92.22222222222223, "pass@1": 94.0, "profiled": [{"solution": "def tuple_to_dict(tpl):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tpl: A tuple of even length.\n\n  Returns:\n    A dictionary where keys are every other element of the tuple and values are the\n    elements following them.\n  \"\"\"\n  return dict(zip(tpl[::2], tpl[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(t):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n      t: The input tuple.\n\n  Returns:\n      A dictionary with keys from every other element and values from the \n      following element in the tuple.\n  \"\"\"\n  return dict(zip(t[::2], t[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tpl):\n  \"\"\"\n  Convert the given tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tpl: The input tuple.\n\n  Returns:\n    A dictionary where the keys are the first elements of each adjacent pair \n    and the values are the second elements.\n  \"\"\"\n  return dict(zip(tpl[::2], tpl[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tup):\n  \"\"\"\n  Convert the given tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n      tup: The input tuple.\n\n  Returns:\n      A dictionary where keys are the first element of each pair and values are the second element.\n  \"\"\"\n  return dict(zip(tup[::2], tup[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tpl):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n      tpl: The input tuple.\n\n  Returns:\n      A dictionary where the keys are every other element and the values are\n      the elements that follow them.\n  \"\"\"\n  return dict(zip(tpl[::2], tpl[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(data_tuple):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n      data_tuple: A tuple containing elements to be converted to key-value pairs.\n\n  Returns:\n      A dictionary where keys are elements at even indices and values are elements at odd indices.\n      \n  Raises:\n      ValueError: If the input tuple has an odd number of elements.\n\n  \"\"\"\n  if len(data_tuple) % 2 != 0:\n    raise ValueError(\"Input tuple must have an even number of elements.\")\n  return dict(zip(data_tuple[::2], data_tuple[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(t):\n    \"\"\"\n    Write a function to convert the given tuple to a key-value dictionary\n    using adjacent elements.\n    assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    result = {}\n    for i in range(0, len(t), 2):\n        result[t[i]] = t[i + 1]\n    return result", "matching_cluster_idx": 5}, {"solution": "def tuple_to_dict(tp):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tp: A tuple of even length.\n\n  Returns:\n    A dictionary where keys are elements at even indices and values are\n    elements at odd indices.\n  \"\"\"\n  return dict(zip(tp[::2], tp[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tpl):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tpl: A tuple of even length.\n\n  Returns:\n    A dictionary where the first element of each pair is the key and the second element is the value.\n  \"\"\"\n  return dict(zip(tpl[::2], tpl[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tp):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tp: A tuple of integers.\n\n  Returns:\n    A dictionary where keys are every other element in the tuple and values are the \n    following adjacent elements.\n  \"\"\"\n  return dict(zip(tp[::2], tp[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tup):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tup: A tuple of even length.\n\n  Returns:\n    A dictionary where the key is the first element of each pair and the value is the second.\n  \"\"\"\n  return dict(zip(tup[::2], tup[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tp):\n  \"\"\"\n  Converts a tuple to a dictionary where adjacent elements are key-value pairs.\n\n  Args:\n    tp: The input tuple.\n\n  Returns:\n    A dictionary created from the tuple.\n  \"\"\"\n  return dict(zip(tp[::2], tp[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tpl):\n  \"\"\"\n  Converts a tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tpl: The input tuple.\n\n  Returns:\n    A dictionary where keys are every other element in the tuple and values are the\n    next elements.\n  \"\"\"\n  return dict(zip(tpl[::2], tpl[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tp):\n  \"\"\"\n  Write a function to convert the given tuple to a key-value dictionary using adjacent elements. \n\n  Args:\n    tp: A tuple of even length.\n\n  Returns:\n    A dictionary where keys are from index 0, 2, 4...  and values are from index 1, 3, 5...\n  \"\"\"\n  return {tp[i]: tp[i + 1] for i in range(0, len(tp), 2)}", "matching_cluster_idx": 5}, {"solution": "def tuple_to_dict(tpl):\n  \"\"\"\n  Convert the given tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    tpl: A tuple of even length.\n\n  Returns:\n    A dictionary where keys are every other element of the tuple and values are the \n    following elements.\n  \"\"\"\n  return dict(zip(tpl[::2], tpl[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tup):\n  \"\"\"\n  Convert the given tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n      tup: The input tuple.\n\n  Returns:\n      A dictionary with keys from even indices and values from odd indices.\n  \"\"\"\n  return dict(zip(tup[::2], tup[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(tp):\n  \"\"\"\n  Convert the given tuple to a key-value dictionary using adjacent elements. \n  \n  Args:\n      tp: A tuple of even length.\n      \n  Returns:\n      A dictionary where the keys are the first elements of each pair and the values are the second elements of each pair.\n  \n  Raises:\n      ValueError: If the tuple has odd length.\n  \"\"\"\n  if len(tp) % 2 != 0:\n    raise ValueError(\"Tuple length must be even\")\n  return dict(zip(tp[::2], tp[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(input_tuple):\n  \"\"\"\n  Convert the given tuple to a key-value dictionary using adjacent elements.\n\n  Args:\n    input_tuple: A tuple of even length.\n\n  Returns:\n    A dictionary where keys are the first element of each pair and values are the second.\n  \"\"\"\n  result_dict = {}\n  for i in range(0, len(input_tuple), 2):\n    result_dict[input_tuple[i]] = input_tuple[i + 1]\n  return result_dict", "matching_cluster_idx": 5}, {"solution": "def tuple_to_dict(tpl):\n  \"\"\"\n  Converts a tuple to a dictionary using adjacent elements as key-value pairs.\n\n  Args:\n    tpl: A tuple.\n\n  Returns:\n    A dictionary with keys from even indices and values from odd indices.\n\n  Raises:\n    ValueError: If the tuple has an odd number of elements.\n  \"\"\"\n  if len(tpl) % 2 != 0:\n    raise ValueError(\"Tuple must have an even number of elements.\")\n  return dict(zip(tpl[::2], tpl[1::2]))", "matching_cluster_idx": 8}, {"solution": "def tuple_to_dict(t):\n  \"\"\"\n  Converts a tuple to a dictionary using adjacent elements as key-value pairs.\n\n  Args:\n    t: The input tuple.\n\n  Returns:\n    A dictionary where the keys are every other element of the tuple and the values are \n    the elements next to them.\n  \"\"\"\n\n  result = {}\n  for i in range(0, len(t), 2):\n    if i + 1 < len(t):\n      result[t[i]] = t[i + 1]\n  return result", "matching_cluster_idx": 3}]}, "Mbpp/744": {"dps": 69.34931506849315, "dps_norm": 78.33333333333333, "pass@1": 100.0, "profiled": [{"solution": "def check_none(my_tuple):\n  \"\"\"\n  This function checks if a given tuple contains any None values.\n\n  Args:\n    my_tuple: The tuple to be checked.\n\n  Returns:\n    True if the tuple contains a None value, False otherwise.\n  \"\"\"\n  for element in my_tuple:\n    if element is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(data):\n  \"\"\"\n  Checks if a tuple contains any None values.\n\n  Args:\n      data: The tuple to check.\n\n  Returns:\n      True if the tuple contains a None value, False otherwise.\n  \"\"\"\n  for item in data:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(data_tuple):\n  \"\"\"\n  Checks if a tuple contains any None values.\n\n  Args:\n    data_tuple: The tuple to check.\n\n  Returns:\n    True if the tuple contains any None values, False otherwise.\n  \"\"\"\n  for item in data_tuple:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(data):\n  \"\"\"\n  Check if the given tuple has any none value or not.\n\n  Args:\n    data: A tuple.\n\n  Returns:\n    True if the tuple contains None, False otherwise.\n  \"\"\"\n  return any(x is None for x in data)", "matching_cluster_idx": 2}, {"solution": "def check_none(data):\n  \"\"\"\n  Check if the given tuple has any None value or not.\n\n  Args:\n      data: A tuple of values.\n\n  Returns:\n      True if the tuple contains a None value, False otherwise.\n  \"\"\"\n  for item in data:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(tup):\n  \"\"\"\n  Check if the given tuple has any None value or not.\n  \"\"\"\n  for item in tup:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(tp):\n  \"\"\"\n  Checks if a tuple contains any None values.\n\n  Args:\n    tp: The tuple to be checked.\n\n  Returns:\n    True if the tuple contains a None value, False otherwise.\n  \"\"\"\n  for item in tp:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(data):\n  \"\"\"\n  Checks if a given tuple has any None values.\n\n  Args:\n    data: A tuple of any data type.\n\n  Returns:\n    True if the tuple contains a None value, False otherwise.\n  \"\"\"\n  for item in data:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(data):\n  \"\"\"\n  Checks if the given tuple has any None values.\n  \"\"\"\n  for item in data:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(tup):\n  \"\"\"\n  Checks if the given tuple has any None value or not.\n\n  Args:\n    tup: The tuple to check.\n\n  Returns:\n    True if the tuple contains a None value, False otherwise.\n  \"\"\"\n  for item in tup:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(input_tuple):\n  \"\"\"\n  Checks if the given tuple has any None values.\n\n  Args:\n    input_tuple: The tuple to check.\n\n  Returns:\n    True if the tuple contains None, False otherwise.\n  \"\"\"\n  for item in input_tuple:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(tup):\n  \"\"\"\n  Checks if a tuple contains any None values.\n\n  Args:\n      tup: The tuple to be checked.\n\n  Returns:\n      True if the tuple contains None, False otherwise.\n  \"\"\"\n  for element in tup:\n    if element is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(tup):\n  \"\"\"\n  Checks if the given tuple has any None value or not.\n\n  Args:\n    tup: A tuple.\n\n  Returns:\n    True if the tuple contains None, False otherwise.\n  \"\"\"\n  for element in tup:\n    if element is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(my_tuple):\n  \"\"\"\n  This function checks if a given tuple contains any None values.\n\n  Args:\n    my_tuple: A tuple of elements.\n\n  Returns:\n    True if the tuple contains None, False otherwise.\n  \"\"\"\n  for element in my_tuple:\n    if element is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(data):\n  \"\"\"\n  Checks if the given tuple has any None value or not.\n  \n  Args:\n    data: A tuple.\n\n  Returns:\n    True if the tuple contains None, False otherwise.\n  \"\"\"\n  for element in data:\n    if element is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(tuple_data):\n  \"\"\"\n  Check if the given tuple has any None value or not.\n  \"\"\"\n  for element in tuple_data:\n    if element is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(data):\n    \"\"\"\n    Checks if a tuple has any None values.\n\n    Args:\n        data (tuple): The tuple to check.\n\n    Returns:\n        bool: True if the tuple contains a None value, False otherwise.\n    \"\"\"\n    return any(x is None for x in data)", "matching_cluster_idx": 2}, {"solution": "def check_none(tp):\n  \"\"\"\n  Checks if a tuple has any None values.\n\n  Args:\n    tp: A tuple.\n\n  Returns:\n    True if the tuple contains any None values, False otherwise.\n  \"\"\"\n  for element in tp:\n    if element is None:\n      return True\n  return False", "matching_cluster_idx": 4}, {"solution": "def check_none(tup):\n  \"\"\"\n  Checks if the given tuple has any None value or not.\n  \"\"\"\n  return any(item is None for item in tup)", "matching_cluster_idx": 2}, {"solution": "def check_none(my_tuple):\n  \"\"\"\n  Checks if a tuple contains any None values.\n\n  Args:\n    my_tuple: A tuple to be checked.\n\n  Returns:\n    True if the tuple contains any None values, False otherwise.\n  \"\"\"\n  for item in my_tuple:\n    if item is None:\n      return True\n  return False", "matching_cluster_idx": 4}]}, "Mbpp/750": {"dps": 52.38095238095238, "dps_norm": 50.0, "pass@1": 100.0, "profiled": [{"solution": "def add_tuple(list1, tup1):\n  \"\"\"\n  Adds the given tuple to the given list.\n\n  Args:\n      list1: A list.\n      tup1: A tuple.\n\n  Returns:\n      A new list with the tuple's elements added to the end of the list.\n  \"\"\"\n  return list1 + list(tup1)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the given tuple to the given list.\n\n  Args:\n      lst: The list to add the tuple to.\n      tup: The tuple to add to the list.\n\n  Returns:\n      A new list with the tuple elements appended.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the given tuple to the given list.\n\n  Args:\n    lst: A list.\n    tup: A tuple.\n\n  Returns:\n    A new list with the tuple elements added to the end of the list.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(list1, tup1):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n  assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n  \"\"\"\n  return list1 + list(tup1)\nlist1 = [5, 6, 7]\ntup1 = (9, 10)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the elements of a tuple to the end of a list.\n\n  Args:\n    lst: A list.\n    tup: A tuple.\n\n  Returns:\n    A new list with the elements of the tuple added to the end of the original list.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n  assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the given tuple to the given list.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the given tuple to the given list.\n\n  Args:\n      lst: The list to add the tuple to.\n      tup: The tuple to add to the list.\n\n  Returns:\n      A new list with the tuple elements appended.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n\n  Args:\n    lst: A list of numbers.\n    tup: A tuple of numbers.\n\n  Returns:\n    A new list containing all elements from the input list and tuple.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Add the given tuple to the given list.\n\n  Args:\n    lst: A list of numbers.\n    tup: A tuple of numbers.\n\n  Returns:\n    A new list containing all the elements of the list and the tuple.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n  assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the given tuple to the given list.\n\n  Args:\n    lst: The list to add the tuple to.\n    tup: The tuple to add to the list.\n\n  Returns:\n    The list with the tuple added.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the given tuple to the given list.\n  assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n    \n    Args:\n      lst: A list.\n      tup: A tuple.\n    Returns:\n      A new list with the tuple's elements added to the end of the original list.\n    \"\"\"\n    return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n  assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Adds the given tuple to the given list.\n\n  Args:\n    lst: A list.\n    tup: A tuple.\n\n  Returns:\n    A new list with the tuple elements appended to the original list.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  Write a function to add the given tuple to the given list.\n  assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"Adds the elements of a tuple to the end of a list.\n\n  Args:\n    lst: The list to add the tuple to.\n    tup: The tuple to add.\n\n  Returns:\n    The list with the tuple's elements appended.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(list1, tup1):\n  \"\"\"\n  Adds the elements of a tuple to the end of a list.\n\n  Args:\n      list1: The list to add the tuple to.\n      tup1: The tuple to add.\n\n  Returns:\n      The list with the tuple's elements appended.\n  \"\"\"\n  return list1 + list(tup1)", "matching_cluster_idx": 2}, {"solution": "def add_tuple(lst, tup):\n  \"\"\"\n  This function adds the given tuple to the given list.\n\n  Args:\n    lst: A list.\n    tup: A tuple.\n\n  Returns:\n    A new list containing all elements of the list and the tuple.\n  \"\"\"\n  return lst + list(tup)", "matching_cluster_idx": 2}]}, "Mbpp/753": {"dps": 92.51677852348993, "dps_norm": 73.75, "pass@1": 95.0, "profiled": [{"solution": "def min_k(tuples, k):\n  \"\"\"\n  Finds the minimum k records from a tuple list.\n\n  Args:\n    tuples: A list of tuples. Each tuple represents a record with two elements:\n      a name (string) and a value (integer).\n    k: The number of minimum records to find.\n\n  Returns:\n    A list of the k records with the minimum values.\n  \"\"\"\n  return sorted(tuples, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(records, k):\n  \"\"\"\n  Finds the minimum k records from a list of tuples.\n\n  Args:\n    records: A list of tuples, where each tuple represents a record with two elements.\n    k: The number of minimum records to find.\n\n  Returns:\n    A list of the k minimum records, sorted by the second element (value) of each tuple.\n  \"\"\"\n  return sorted(records, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(tuples, k):\n  \"\"\"Finds the minimum k records from a tuple list.\n\n  Args:\n    tuples: A list of tuples where each tuple has two elements.\n    k: The number of minimum records to find.\n\n  Returns:\n    A list of the k tuples with the smallest second element.\n  \"\"\"\n  return sorted(tuples, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a tuple list.\n\n  Args:\n    data: A list of tuples.\n    k: The number of minimum records to return.\n\n  Returns:\n    A list of the k tuples with the smallest values.\n  \"\"\"\n  return sorted(data, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a tuple list.\n\n  Args:\n      data: A list of tuples where each tuple represents a record.\n      k: The number of minimum records to return.\n\n  Returns:\n      A list of the k minimum records.\n  \"\"\"\n  return sorted(data, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a list of tuples.\n\n  Args:\n    data: A list of tuples, where each tuple represents a record.\n    k: The number of minimum records to return.\n\n  Returns:\n    A list of the k minimum records.\n  \"\"\"\n  return sorted(data, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a tuple list, sorted by the second element.\n\n  Args:\n    data: A list of tuples.\n    k: The number of minimum records to return.\n\n  Returns:\n    A list of the k minimum records.\n  \"\"\"\n  return sorted(data, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a list of tuples, ordered by the second element (numerical value).\n\n  Args:\n    data: A list of tuples, where each tuple contains a string and an integer.\n    k: The number of minimum records to return.\n\n  Returns:\n    A list of the k tuples with the smallest second elements.\n  \"\"\"\n  return sorted(data, key=lambda item: item[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(records, k):\n  \"\"\"\n  Finds the minimum k records from a tuple list.\n\n  Args:\n    records: A list of tuples, where each tuple represents a record.\n    k: The number of minimum records to find.\n\n  Returns:\n    A list of the k minimum records.\n  \"\"\"\n  return sorted(records, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(records, k):\n  \"\"\"\n  Finds the minimum k records from a list of tuples.\n\n  Args:\n      records: A list of tuples, where each tuple represents a record with two elements.\n      k: The number of minimum records to return.\n\n  Returns:\n      A list of the k minimum records.\n\n  \"\"\"\n  return sorted(records, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(tuple_list, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        tuple_list: A list of tuples, where each tuple represents a record.\n        k: The number of minimum records to find.\n\n    Returns:\n        A list of the k minimum records.\n    \"\"\"\n    return sorted(tuple_list, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a list of tuples.\n\n  Args:\n    data: A list of tuples, where each tuple represents a record with two elements.\n    k: The number of minimum records to return.\n\n  Returns:\n    A list of the k smallest records, sorted by the second element (value).\n  \"\"\"\n  return sorted(data, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(lst, k):\n    \"\"\"\n    Finds the minimum k records from a tuple list.\n\n    Args:\n        lst: A list of tuples.\n        k: The number of minimum records to return.\n\n    Returns:\n        A list of the k minimum records.\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(tuples, k):\n    \"\"\"\n    Finds the minimum k records from a tuple list.\n\n    Args:\n        tuples: A list of tuples.\n        k: The number of minimum records to return.\n\n    Returns:\n        A list of the k minimum records.\n    \"\"\"\n    return sorted(tuples, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(lst, k):\n  \"\"\"Finds the minimum k records from a tuple list.\n\n  Args:\n    lst: A list of tuples, where each tuple represents a record.\n    k: The number of minimum records to find.\n\n  Returns:\n    A list of the k minimum records, sorted by the second element (value).\n  \"\"\"\n  return sorted(lst, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a list of tuples.\n\n  Args:\n      data: A list of tuples. Each tuple contains a name and a numerical value.\n      k: The number of minimum records to return.\n\n  Returns:\n      A list of the k records with the smallest values.\n  \"\"\"\n  return sorted(data, key=lambda item: item[1])[:k]", "matching_cluster_idx": 1}, {"solution": "def min_k(data, k):\n  \"\"\"\n  Finds the minimum k records from a tuple list.\n\n  Args:\n    data: A list of tuples, where each tuple represents a record.\n    k: The number of minimum records to return.\n\n  Returns:\n    A list of the k minimum records.\n  \"\"\"\n  return sorted(data, key=lambda item: item[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n    \"\"\"Finds the minimum k records from a tuple list based on the second element of each tuple.\n\n    Args:\n      data: A list of tuples where each tuple represents a record with a name (string) and a value (integer).\n      k: The number of minimum records to return.\n\n    Returns:\n      A list of the k minimum records.\n    \"\"\"\n    return sorted(data, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(records, k):\n  \"\"\"\n  Finds the minimum k records from a tuple list, sorted by the second element (the numerical value).\n\n  Args:\n    records: A list of tuples, where each tuple contains a name (string) and a numerical value.\n    k: The number of minimum records to return.\n\n  Returns:\n    A list of the k tuples with the smallest numerical values.\n  \"\"\"\n  return sorted(records, key=lambda record: record[1])[:k]", "matching_cluster_idx": 2}, {"solution": "def min_k(data, k):\n  \"\"\"Finds the minimum k records from a tuple list.\n\n  Args:\n    data: A list of tuples, where each tuple represents a record.\n    k: The number of minimum records to find.\n\n  Returns:\n    A list of the k minimum records.\n  \"\"\"\n  return sorted(data, key=lambda x: x[1])[:k]", "matching_cluster_idx": 2}]}, "Mbpp/754": {"dps": null, "dps_norm": null, "pass@1": 0.0, "profiled": []}, "Mbpp/755": {"dps": null, "dps_norm": null, "pass@1": 1.0, "profiled": []}, "Mbpp/757": {"dps": 82.71028037383178, "dps_norm": 23.076923076923077, "pass@1": 100.0, "profiled": [{"solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Counts the pairs of reverse strings in the given string list.\n\n    Args:\n        string_list: A list of strings.\n\n    Returns:\n        The number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n      strings: A list of strings.\n\n  Returns:\n      The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(string_list):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    string_list: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(string_list)):\n    for j in range(i + 1, len(string_list)):\n      if string_list[i] == string_list[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Counts the pairs of reverse strings in the given string list.\n\n    Args:\n        string_list: A list of strings.\n\n    Returns:\n        The number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in a given list of strings.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(words):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(words)):\n    for j in range(i + 1, len(words)):\n      if words[i] == words[j][::-1]:  \n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(str_list):\n    \"\"\"\n    Counts the pairs of reverse strings in the given string list. \n\n    Args:\n      str_list: A list of strings.\n\n    Returns:\n      The number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(str_list)):\n        for j in range(i + 1, len(str_list)):\n            if str_list[i] == str_list[j][::-1]:\n                count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(string_list):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    string_list: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(string_list)):\n    for j in range(i + 1, len(string_list)):\n      if string_list[i] == string_list[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:  # Check if strings are reverse of each other\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list. \n  \n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(words):\n  \"\"\"\n  Counts the pairs of reverse strings in a list of strings.\n\n  Args:\n    words: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(words)):\n    for j in range(i + 1, len(words)):\n      if words[i] == words[j][::-1]:  # Check if strings are reverse of each other\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strings):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list.\n\n  Args:\n    strings: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strings)):\n    for j in range(i + 1, len(strings)):\n      if strings[i] == strings[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Counts the number of pairs of reverse strings in the given string list.\n\n    Args:\n      string_list: A list of strings.\n\n    Returns:\n      The number of pairs of reverse strings.\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i + 1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def count_reverse_pairs(strs):\n  \"\"\"\n  Counts the pairs of reverse strings in the given string list. \n\n  Args:\n    strs: A list of strings.\n\n  Returns:\n    The number of pairs of reverse strings in the list.\n  \"\"\"\n  count = 0\n  for i in range(len(strs)):\n    for j in range(i + 1, len(strs)):\n      if strs[i] == strs[j][::-1]:\n        count += 1\n  return count", "matching_cluster_idx": 2}]}, "Mbpp/758": {"dps": 72.49034749034749, "dps_norm": 78.125, "pass@1": 69.0, "profiled": [{"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the occurrences of lists within a list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n  \"\"\"\n  result = {}\n  for sublist in lst:\n    sublist_tuple = tuple(sublist)  \n    if sublist_tuple in result:\n      result[sublist_tuple] += 1\n    else:\n      result[sublist_tuple] = 1\n  return result", "matching_cluster_idx": 6}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the occurrences of lists within a list.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n  \"\"\"\n  sublist_counts = {}\n  for sublist in lst:\n    sublist_tuple = tuple(sublist)\n    if sublist_tuple in sublist_counts:\n      sublist_counts[sublist_tuple] += 1\n    else:\n      sublist_counts[sublist_tuple] = 1\n  return sublist_counts", "matching_cluster_idx": 6}, {"solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts lists within a list.\n\n    Args:\n        lst: A list of lists.\n\n    Returns:\n        A dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurrences in the original list.\n    \"\"\"\n    result = {}\n    for sublist in lst:\n      tuple_sublist = tuple(sublist)  \n      if tuple_sublist in result:\n        result[tuple_sublist] += 1\n      else:\n        result[tuple_sublist] = 1\n    return result", "matching_cluster_idx": 6}, {"solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts the occurrences of each unique sublist within a list.\n\n    Args:\n        lst: A list of lists.\n\n    Returns:\n        A dictionary where the keys are tuples representing unique sublists \n        and the values are their corresponding occurrence counts.\n    \"\"\"\n    result = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)  \n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result", "matching_cluster_idx": 6}, {"solution": "def unique_sublists(input_list):\n    \"\"\"\n    Counts occurrences of lists within a list.\n\n    Args:\n        input_list: A list of lists.\n\n    Returns:\n        A dictionary where each key is a tuple representing a sublist and \n        the value is the number of times it occurs in the input list.\n    \"\"\"\n    sublist_counts = {}\n    for sublist in input_list:\n        sublist_tuple = tuple(sublist)  \n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts", "matching_cluster_idx": 6}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the occurrences of lists within a list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where keys are tuples representing the lists and values\n    are their respective counts.\n  \"\"\"\n  counts = {}\n  for sublist in lst:\n    # Convert the list to a tuple for hashing\n    tuple_sublist = tuple(sublist)\n    if tuple_sublist in counts:\n      counts[tuple_sublist] += 1\n    else:\n      counts[tuple_sublist] = 1\n  return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts lists within a list.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A dictionary where keys are tuples representing the unique sublists, \n      and values are the number of occurrences of each sublist.\n  \"\"\"\n  sublist_counts = {}\n  for sublist in lst:\n    # Convert the sublist to a tuple for hashability\n    sublist_tuple = tuple(sublist) \n    if sublist_tuple in sublist_counts:\n      sublist_counts[sublist_tuple] += 1\n    else:\n      sublist_counts[sublist_tuple] = 1\n  return sublist_counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the occurrences of each sublist within a list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where keys are tuples representing unique sublists, \n    and values are their counts.\n  \"\"\"\n  counts = {}\n  for sublist in lst:\n    sublist_tuple = tuple(sublist)  # Convert to tuple for hashability\n    if sublist_tuple in counts:\n      counts[sublist_tuple] += 1\n    else:\n      counts[sublist_tuple] = 1\n  return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    \n    Args:\n      lst: A list of lists.\n\n    Returns:\n      A dictionary where keys are tuples representing the sublists and values are the number of occurrences.\n\n    Examples:\n    unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n\n    \"\"\"\n    result = {}\n    for sublist in lst:\n        tuple_sublist = tuple(sublist)\n        if tuple_sublist in result:\n            result[tuple_sublist] += 1\n        else:\n            result[tuple_sublist] = 1\n    return result", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the occurrences of lists within a list and returns a dictionary.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A dictionary where keys are tuples representing the sublists and\n      values are the number of times each sublist appears in the original list.\n  \"\"\"\n  result = {}\n  for sublist in lst:\n    sublist_tuple = tuple(sublist)  # Convert list to tuple for hashability\n    if sublist_tuple in result:\n      result[sublist_tuple] += 1\n    else:\n      result[sublist_tuple] = 1\n  return result", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(nested_list):\n  \"\"\"\n  Counts the occurrences of unique lists within a given list.\n\n  Args:\n    nested_list: A list of lists.\n\n  Returns:\n    A dictionary where keys are tuples representing lists and values are their counts.\n  \"\"\"\n  counts = {}\n  for sublist in nested_list:\n    tuple_sublist = tuple(sublist)  \n    if tuple_sublist in counts:\n      counts[tuple_sublist] += 1\n    else:\n      counts[tuple_sublist] = 1\n  return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts lists within a list.\n\n    Args:\n      lst: A list of lists.\n\n    Returns:\n      A dictionary where every list is converted to a tuple and the value of \n      such tuple is the number of its occurrences in the original list.\n    \"\"\"\n    counts = {}\n    for sublist in lst:\n        tuple_key = tuple(sublist)  \n        if tuple_key in counts:\n            counts[tuple_key] += 1\n        else:\n            counts[tuple_key] = 1\n    return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the number of occurrences of each list (converted to tuples) within a list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where keys are tuples representing the unique lists \n    and values are their counts.\n  \"\"\"\n  counts = {}\n  for sublist in lst:\n    # Convert the sublist to a tuple for keying in the dictionary\n    key = tuple(sublist)\n    if key in counts:\n      counts[key] += 1\n    else:\n      counts[key] = 1\n  return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(data):\n    \"\"\"\n    Counts the occurrences of lists within a list.\n\n    Args:\n        data: A list of lists.\n\n    Returns:\n        A dictionary where keys are tuples representing lists and values are\n        their occurrence counts.\n    \"\"\"\n    result = {}\n    for sublist in data:\n        # Convert the list to a tuple for hashability\n        tuple_form = tuple(sublist)\n        if tuple_form in result:\n            result[tuple_form] += 1\n        else:\n            result[tuple_form] = 1\n    return result", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. \n    The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Args:\n      lst: A list of lists.\n\n    Returns:\n      A dictionary where keys are tuples representing the lists and values are their counts.\n\n    For example:\n    unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) \n      == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    counts = {}\n    for sublist in lst:\n        counts[tuple(sublist)] = counts.get(tuple(sublist), 0) + 1\n    return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(input_list):\n  \"\"\"\n  Counts the occurrences of lists within a list.\n\n  Args:\n    input_list: A list of lists.\n\n  Returns:\n    A dictionary where every list is converted to a tuple and the value \n    of such tuple is the number of its occurrences in the original list.\n  \"\"\"\n  counts = {}\n  for sublist in input_list:\n    sublist_tuple = tuple(sublist)  # Convert list to tuple for hashability\n    if sublist_tuple in counts:\n      counts[sublist_tuple] += 1\n    else:\n      counts[sublist_tuple] = 1\n  return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts lists within a list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where keys are tuples of elements from the sublists and\n    values are the number of times each tuple appears in the input list.\n  \"\"\"\n  counts = {}\n  for sublist in lst:\n    tuple_sublist = tuple(sublist) \n    if tuple_sublist in counts:\n      counts[tuple_sublist] += 1\n    else:\n      counts[tuple_sublist] = 1\n  return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the occurrences of lists within a list.\n\n  Args:\n    lst: A list of lists.\n\n  Returns:\n    A dictionary where keys are tuples representing the sublists and values are their counts.\n  \"\"\"\n  result = {}\n  for sublist in lst:\n    # Convert the sublist to a tuple to ensure hashability\n    sublist_tuple = tuple(sublist)\n    if sublist_tuple in result:\n      result[sublist_tuple] += 1\n    else:\n      result[sublist_tuple] = 1\n  return result", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n  \"\"\"\n  Counts the occurrences of lists within a list.\n\n  Args:\n      lst: A list of lists.\n\n  Returns:\n      A dictionary where each key is a tuple representation of a sublist \n      and the value is its number of occurrences in the input list.\n  \"\"\"\n  counts = {}\n  for sublist in lst:\n    # Convert the sublist to a tuple for key comparison\n    tuple_sublist = tuple(sublist)\n    if tuple_sublist in counts:\n      counts[tuple_sublist] += 1\n    else:\n      counts[tuple_sublist] = 1\n  return counts", "matching_cluster_idx": 5}, {"solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts lists within a list and returns a dictionary of unique lists and their counts.\n\n    Args:\n        lst: A list of lists.\n\n    Returns:\n        A dictionary where keys are tuples representing unique lists, and values are the counts of their occurrences.\n    \"\"\"\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)  # Convert list to tuple for immutability\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts", "matching_cluster_idx": 5}]}, "Mbpp/760": {"dps": 99.27007299270073, "dps_norm": 87.5, "pass@1": 97.0, "profiled": [{"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks whether a list of numbers contains only one distinct element or not.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Check whether a list of numbers contains only one distinct element or not.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks whether a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n    \"\"\"\n    Checks if a list of numbers contains only one distinct element or not.\n\n    Args:\n        nums: A list of numbers.\n\n    Returns:\n        True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Check whether a list of numbers contains only one distinct element or not.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(numbers):\n  \"\"\"\n  Checks whether a list of numbers contains only one distinct element or not.\n\n  Args:\n    numbers: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(numbers)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  This function checks whether a list of numbers contains only one distinct element or not.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}, {"solution": "def unique_Element(nums):\n  \"\"\"\n  Checks if a list of numbers contains only one distinct element.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if the list contains only one distinct element, False otherwise.\n  \"\"\"\n  return len(set(nums)) == 1", "matching_cluster_idx": 6}]}, "Mbpp/764": {"dps": 88.88888888888889, "dps_norm": 50.0, "pass@1": 100.0, "profiled": [{"solution": "def number_ctr(text):\n  \"\"\"\n  Counts the number of digits in a given string.\n  \"\"\"\n  count = 0\n  for char in text:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(string):\n  \"\"\"Counts the number of digits in a given string.\n\n  Args:\n      string: The string to count digits in.\n\n  Returns:\n      The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in string:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(text):\n  \"\"\"Counts the number of digits in a given string.\n\n  Args:\n    text: The string to count the digits in.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in text:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(input_string):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n      input_string: The string to analyze.\n\n  Returns:\n      The number of digits in the input string.\n  \"\"\"\n  count = 0\n  for char in input_string:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(str1):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n    str1: The input string.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in str1:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(str1):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n    str1: The input string.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in str1:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(s):\n  \"\"\"\n  Counts the number of digits in a given string.\n  \"\"\"\n  count = 0\n  for char in s:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(input_str):\n  \"\"\"Counts the number of digits in a given string.\n\n  Args:\n      input_str: The string to count digits in.\n\n  Returns:\n      The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in input_str:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(text):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in text:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(str1):\n  \"\"\"Counts the number of digits in a given string.\n\n  Args:\n    str1: The input string.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in str1:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(text):\n  \"\"\"Counts the number of digits in a given string.\n  \n  Args:\n    text: The string to be analyzed.\n  \n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in text:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(input_string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Args:\n      input_string: The string to be analyzed.\n\n    Returns:\n      The number of digits found in the string.\n    \"\"\"\n    count = 0\n    for char in input_string:\n        if char.isdigit():\n            count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(text):\n  \"\"\"Counts the number of digits in a given string.\n\n  Args:\n    text: The string to count digits in.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in text:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(string):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n    string: The input string.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in string:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(input_string):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n    input_string: The string to count digits in.\n\n  Returns:\n    The number of digits in the input string.\n  \"\"\"\n  count = 0\n  for char in input_string:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(str1):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n      str1: The input string.\n\n  Returns:\n      The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in str1:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(string):\n  \"\"\"Counts the number of digits in a given string.\n\n  Args:\n    string: The input string.\n\n  Returns:\n    The number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in string:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(string):\n    \"\"\"Counts the number of digits in a given string.\"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(str1):\n  \"\"\"\n  Counts the number of digits in a given string.\n\n  Args:\n    str1: A string to be analyzed.\n\n  Returns:\n    An integer representing the number of digits in the string.\n  \"\"\"\n  count = 0\n  for char in str1:\n    if char.isdigit():\n      count += 1\n  return count", "matching_cluster_idx": 2}, {"solution": "def number_ctr(str1):\n    \"\"\"Counts the number of digits in a given string.\n\n    Args:\n        str1: The input string.\n\n    Returns:\n        The number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in str1:\n      if char.isdigit():\n        count += 1\n    return count", "matching_cluster_idx": 2}]}, "Mbpp/766": {"dps": 79.48598130841121, "dps_norm": 75.0, "pass@1": 100.0, "profiled": [{"solution": "def pair_wise(arr):\n  \"\"\"\n  Write a function to return a list of all pairs of consecutive items in a given list.\n\n  assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n  \"\"\"\n  return list(zip(arr[:-1], arr[1:]))", "matching_cluster_idx": 4}, {"solution": "def pair_wise(lst):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    lst: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]", "matching_cluster_idx": 3}, {"solution": "def pair_wise(data):\n  \"\"\"\n  Write a function to return a list of all pairs of consecutive items in a given list.\n  assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n  \"\"\"\n  return list(zip(data[:-1], data[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(nums):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    A list of tuples, where each tuple contains a pair of consecutive items from the input list.\n  \"\"\"\n  return list(zip(nums[:-1], nums[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(arr):\n  \"\"\"\n  Return a list of all pairs of consecutive items in a given list.\n\n  Args:\n      arr: The input list.\n\n  Returns:\n      A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  pairs = []\n  for i in range(len(arr) - 1):\n    pairs.append((arr[i], arr[i + 1]))\n  return pairs", "matching_cluster_idx": 2}, {"solution": "def pair_wise(input_list):\n  \"\"\"\n  This function returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n      input_list: A list of items.\n\n  Returns:\n      A list of tuples, where each tuple represents a pair of consecutive items from the input list.\n  \"\"\"\n  pairs = []\n  for i in range(len(input_list) - 1):\n    pairs.append((input_list[i], input_list[i + 1]))\n  return pairs", "matching_cluster_idx": 2}, {"solution": "def pair_wise(arr):\n  \"\"\"\n  This function returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    arr: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items from the input list.\n  \"\"\"\n  return list(zip(arr[:-1], arr[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(data):\n    \"\"\"\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(data[i], data[i + 1]) for i in range(len(data) - 1)]", "matching_cluster_idx": 3}, {"solution": "def pair_wise(input_list):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    input_list: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple contains a pair of consecutive items from the input list.\n  \"\"\"\n  return list(zip(input_list, input_list[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(items):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n  \n  Args:\n    items: A list of items.\n  \n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  pairs = []\n  for i in range(len(items) - 1):\n    pairs.append((items[i], items[i+1]))\n  return pairs", "matching_cluster_idx": 2}, {"solution": "def pair_wise(lst):\n  \"\"\"\n  Write a function to return a list of all pairs of consecutive items in a given list.\n  assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n  \"\"\"\n  return list(zip(lst, lst[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(items):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    items: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  return [(items[i], items[i+1]) for i in range(len(items)-1)]", "matching_cluster_idx": 3}, {"solution": "def pair_wise(nums):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items from the input list.\n  \"\"\"\n  return list(zip(nums, nums[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(data):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n  \n  Args:\n    data: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items from the input list.\n  \"\"\"\n  pairs = []\n  for i in range(len(data)-1):\n    pairs.append((data[i], data[i+1]))\n  return pairs", "matching_cluster_idx": 2}, {"solution": "def pair_wise(lst):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n  \n  For example:\n  pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n  \"\"\"\n  pairs = []\n  for i in range(len(lst) - 1):\n    pairs.append((lst[i], lst[i+1]))\n  return pairs", "matching_cluster_idx": 2}, {"solution": "def pair_wise(lst):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    lst: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items in the input list.\n  \"\"\"\n  return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]", "matching_cluster_idx": 3}, {"solution": "def pair_wise(lst):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    lst: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  return list(zip(lst, lst[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(data):\n  \"\"\"\n  Returns a list of all pairs of consecutive items in a given list.\n\n  Args:\n    data: A list of items.\n\n  Returns:\n    A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  pairs = []\n  for i in range(len(data) - 1):\n    pairs.append((data[i], data[i+1]))\n  return pairs", "matching_cluster_idx": 2}, {"solution": "def pair_wise(nums):\n  \"\"\"\n  Return a list of all pairs of consecutive items in a given list.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  return list(zip(nums, nums[1:]))", "matching_cluster_idx": 5}, {"solution": "def pair_wise(data):\n  \"\"\"\n  Return a list of all pairs of consecutive items in a given list.\n  \n  Args:\n      data: A list of items.\n\n  Returns:\n      A list of tuples, where each tuple represents a pair of consecutive items.\n  \"\"\"\n  pairs = []\n  for i in range(len(data) - 1):\n    pairs.append((data[i], data[i+1]))\n  return pairs", "matching_cluster_idx": 2}]}, "Mbpp/775": {"dps": 94.39999999999999, "dps_norm": 71.42857142857143, "pass@1": 100.0, "profiled": [{"solution": "def odd_position(nums):\n  \"\"\"\n  Checks if every odd index contains an odd number in a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(data):\n  \"\"\"Checks if every odd index in a list contains an odd number.\n\n  Args:\n    data: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(data), 2):\n    if data[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n  \"\"\"\n  Checks if every odd index in a list contains an odd number.\n\n  Args:\n      nums: A list of numbers.\n\n  Returns:\n      True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n  \"\"\"\n  Checks whether every odd index contains odd numbers in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(lst):\n  \"\"\"\n  Checks if every odd index contains odd numbers in a given list.\n\n  Args:\n    lst: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n    \"\"\"\n    Check if every odd index contains odd numbers of a given list.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n      if nums[i] % 2 == 0:\n        return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(data):\n  \"\"\"\n  Checks if every odd index contains an odd number in a given list.\n\n  Args:\n    data: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(data), 2):\n    if data[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n  \"\"\"\n  Checks if every odd index contains an odd number in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n  \"\"\"\n  Checks if every odd index contains an odd number in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(arr):\n  \"\"\"\n  Checks whether every odd index in a list contains an odd number.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(arr), 2):\n    if arr[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n    \"\"\"\n    Checks if every odd index in a list contains an odd number.\n\n    Args:\n        nums: A list of integers.\n\n    Returns:\n        True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(data):\n  \"\"\"Checks if every odd index contains an odd number in a list.\n\n  Args:\n    data: A list of integers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n\n  for i in range(1, len(data), 2):\n    if data[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n  \"\"\"\n  Checks if every odd index in a list contains an odd number.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(lst):\n  \"\"\"\n  Checks if every odd index in a list contains an odd number.\n\n  Args:\n    lst: A list of integers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(lst), 2):\n    if lst[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(arr):\n  \"\"\"\n  Checks if every odd index in a list contains an odd number.\n\n  Args:\n    arr: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n\n  for i in range(1, len(arr), 2):  # Iterate over odd indices\n    if arr[i] % 2 == 0:  # Check if the number at the odd index is even\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(numbers):\n  \"\"\"\n  Checks if every odd index in a list contains an odd number.\n\n  Args:\n    numbers: A list of integers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n\n  for i in range(1, len(numbers), 2):\n    if numbers[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n  \"\"\"\n  Checks if every odd index contains odd numbers of a given list.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(numbers):\n    \"\"\"\n    Checks if every odd index contains an odd number in a given list.\n\n    Args:\n      numbers: A list of integers.\n\n    Returns:\n      True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n    for i in range(1, len(numbers), 2):\n        if numbers[i] % 2 == 0:\n            return False\n    return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(arr):\n    \"\"\"\n    Checks if every odd index contains an odd number in a given list.\n\n    Args:\n        arr: A list of integers.\n\n    Returns:\n        True if every odd index contains an odd number, False otherwise.\n    \"\"\"\n    for i in range(1, len(arr), 2):  # Iterate through odd indices\n        if arr[i] % 2 == 0:  # Check if the element is even\n            return False  # If even, return False\n    return True  # If all odd indices have odd numbers, return True", "matching_cluster_idx": 4}, {"solution": "def odd_position(nums):\n  \"\"\"\n  Checks if every odd index in a list contains an odd number.\n\n  Args:\n    nums: A list of numbers.\n\n  Returns:\n    True if every odd index contains an odd number, False otherwise.\n  \"\"\"\n  for i in range(1, len(nums), 2):\n    if nums[i] % 2 == 0:\n      return False\n  return True", "matching_cluster_idx": 4}]}, "Mbpp/777": {"dps": 47.95918367346939, "dps_norm": 62.22222222222222, "pass@1": 100.0, "profiled": [{"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The sum of non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n    \"\"\"\n    Finds the sum of non-repeated elements in a given list.\n\n    Args:\n      nums: A list of integers.\n\n    Returns:\n      The sum of non-repeated elements in the list.\n    \"\"\"\n    unique_nums = set(nums)\n    return sum(unique_nums)", "matching_cluster_idx": 8}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(data):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    data: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in data:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of the non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The sum of non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements in the list.\n  \"\"\"\n\n  seen = set()\n  sum = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      sum += num\n  return sum", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Find the sum of non-repeated elements in a given list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The sum of non-repeated elements in the list.\n  \"\"\"\n\n  seen = set()\n  sum_non_repeated = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      sum_non_repeated += num\n  return sum_non_repeated", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n  \n  Args:\n    nums: A list of integers.\n  \n  Returns:\n    The sum of the non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  This function finds the sum of non-repeated elements in a given list.\n  Args:\n    nums: A list of integers.\n  Returns:\n    The sum of non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  sum = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      sum += num\n  return sum", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of the non-repeated elements in the list.\n  \"\"\"\n  unique_nums = set(nums)  \n  return sum(unique_nums)", "matching_cluster_idx": 8}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements in the list.\n  \"\"\"\n  unique_nums = set(nums)  # Use a set to efficiently store unique elements\n  sum_of_unique = sum(unique_nums)  \n  return sum_of_unique", "matching_cluster_idx": 8}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements in the list.\n  \"\"\"\n\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The sum of non-repeated elements in the list.\n  \"\"\"\n\n  seen = set()\n  total = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n    \"\"\"\n    Finds the sum of non-repeated elements in a given list.\n\n    Args:\n      nums: A list of integers.\n\n    Returns:\n      The sum of non-repeated elements in the list.\n    \"\"\"\n    seen = set()\n    total = 0\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            total += num\n    return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(data):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    data: A list of integers.\n\n  Returns:\n    The sum of non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  total = 0\n  for num in data:\n    if num not in seen:\n      seen.add(num)\n      total += num\n  return total", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n    nums: A list of integers.\n\n  Returns:\n    The sum of the non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  sum_non_repeated = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      sum_non_repeated += num\n  return sum_non_repeated", "matching_cluster_idx": 4}, {"solution": "def find_sum(nums):\n  \"\"\"\n  Finds the sum of non-repeated elements in a given list.\n\n  Args:\n      nums: A list of integers.\n\n  Returns:\n      The sum of non-repeated elements in the list.\n  \"\"\"\n  seen = set()\n  sum = 0\n  for num in nums:\n    if num not in seen:\n      seen.add(num)\n      sum += num\n  return sum", "matching_cluster_idx": 4}]}, "Mbpp/781": {"dps": 88.58267716535433, "dps_norm": 60.0, "pass@1": 88.0, "profiled": [{"solution": "def count_divisors(num):\n  \"\"\"\n  This function checks whether the count of divisors of a number is even.\n\n  Args:\n      num: An integer.\n\n  Returns:\n      True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, num + 1):\n    if num % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  Counts the number of divisors of a given integer and returns whether it's even.\n\n  Args:\n    n: The integer to check.\n\n  Returns:\n    True if the number of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      if i == n // i:  # Handle perfect squares\n        count += 1\n      else:\n        count += 2\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function counts the number of divisors of a given integer and returns True if the count is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function takes an integer n and returns True if the count of its divisors is even, otherwise False.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Increment by 2 for both i and n/i\n  if int(n**0.5) * int(n**0.5) == n:  # Handle perfect squares\n    count -= 1\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(num):\n  \"\"\"\n  This function checks if the count of divisors of a given number is even.\n\n  Args:\n    num: The integer to check.\n\n  Returns:\n    True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, num + 1):\n    if num % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  Checks whether the count of divisors of a given number is even.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if the count of divisors of n is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function checks whether the count of divisors is even.\n\n  Args:\n      n: The integer to check.\n\n  Returns:\n      True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function checks whether the count of divisors of a given number is even.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if the count of divisors of n is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(num):\n  \"\"\"\n  Checks whether the count of divisors of a given number is even.\n\n  Args:\n    num: An integer.\n\n  Returns:\n    True if the count of divisors of num is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, int(num**0.5) + 1):\n    if num % i == 0:\n      count += 2  # If i is a divisor, num/i is also a divisor\n  if int(num**0.5)**2 == num:  # Handle perfect squares\n    count -= 1\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(num):\n  \"\"\"\n  Checks whether the count of divisors of a number is even.\n\n  Args:\n    num: The number to check.\n\n  Returns:\n    True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, num + 1):\n    if num % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  Checks whether the count of divisors of a given number is even.\n\n  Args:\n      n: The integer to check.\n\n  Returns:\n      True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function takes an integer n as input and returns True if the count of divisors of n is even, False otherwise. \n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Add 2 for both i and n/i as divisors\n  \n  if int(n**0.5)**2 == n:\n    count -= 1  # Adjust for the case when n is a perfect square\n\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n    \"\"\"\n    This function checks whether the count of divisors of a given number is even.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n ** 0.5) + 1):\n        if n % i == 0:\n            count += 2  # If i is a divisor, both i and n/i are divisors\n    if int(n ** 0.5) ** 2 == n:  # Check for perfect squares\n        count -= 1  \n    return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function checks whether the count of divisors of a given number is even.\n\n  Args:\n      n: An integer.\n\n  Returns:\n      True if the count of divisors of n is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # If i is a divisor, n/i is also a divisor\n  if int(n**0.5) * int(n**0.5) == n:  # Handle perfect squares\n    count -= 1\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function checks whether the count of divisors is even.\n\n  Args:\n      n: An integer.\n\n  Returns:\n      True if the count of divisors of n is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function takes an integer n as input and returns True if the count of its divisors is even, False otherwise.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if the count of divisors of n is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      if i * i == n:\n        count += 1\n      else:\n        count += 2\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n  \"\"\"\n  Checks whether the count of divisors of a number is even.\n\n  Args:\n      n: An integer.\n\n  Returns:\n      True if the count of divisors of n is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # If i is a divisor, n/i is also a divisor\n  if int(n**0.5)**2 == n:\n    count -= 1  # Adjust count if n is a perfect square\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n  \"\"\"\n  Checks whether the count of divisors of a number is even.\n\n  Args:\n      n: An integer.\n\n  Returns:\n      True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  # Count both i and n/i as divisors\n  if int(n**0.5) * int(n**0.5) == n:\n    count -= 1  # Adjust for double-counting the square root\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function counts the number of divisors of a given integer.\n\n  Args:\n    n: The integer to count divisors for.\n\n  Returns:\n    True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, int(n**0.5) + 1):\n    if n % i == 0:\n      count += 2  \n  if int(n**0.5)**2 == n:\n    count -= 1\n  return count % 2 == 0", "matching_cluster_idx": 3}, {"solution": "def count_divisors(n):\n  \"\"\"\n  This function checks if the count of divisors of a given number is even.\n\n  Args:\n    n: An integer.\n\n  Returns:\n    True if the count of divisors is even, False otherwise.\n  \"\"\"\n  count = 0\n  for i in range(1, n + 1):\n    if n % i == 0:\n      count += 1\n  return count % 2 == 0", "matching_cluster_idx": 1}]}, "Mbpp/800": {"dps": 95.67164179104478, "dps_norm": 98.0, "pass@1": 100.0, "profiled": [{"solution": "def remove_all_spaces(text):\n    \"\"\"\n    Removes all whitespaces from a string.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n  \n  Args:\n    text: The input string.\n  \n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 3}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n\n  Args:\n    text: The string to remove whitespaces from.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n\n  Args:\n    text: The string to remove whitespaces from.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n    \"\"\"Removes all whitespaces from a string.\"\"\"\n    return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"Removes all whitespaces from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \",\"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n\n  Args:\n      text: The string to remove whitespaces from.\n\n  Returns:\n      The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n  \n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"Removes all whitespaces from a string.\n\n  Args:\n    text: The string to remove whitespaces from.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"Removes all whitespaces from a string.\n\n  Args:\n      text: The input string.\n\n  Returns:\n      The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"Removes all whitespaces from a string.\n\n  Args:\n    text: The string to remove whitespaces from.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n\n  Args:\n      text: The string to remove whitespaces from.\n\n  Returns:\n      The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"Removes all whitespaces from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n\n  Args:\n    text: The string to remove whitespaces from.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n    \"\"\"\n    Removes all whitespaces from a string.\n    \n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \n    Example:\n        remove_all_spaces('python  program') == 'pythonprogram'\n    \"\"\"\n    return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 4}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n  \n  Args:\n    text: The input string.\n  \n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(\" \", \"\")", "matching_cluster_idx": 3}, {"solution": "def remove_all_spaces(text):\n  \"\"\"\n  Removes all whitespaces from a string.\n\n  Args:\n    text: The input string.\n\n  Returns:\n    The string with all whitespaces removed.\n  \"\"\"\n  return text.replace(' ', '')", "matching_cluster_idx": 4}]}, "Mbpp/805": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def max_sum_list(matrix):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n      matrix: A list of lists of integers.\n\n    Returns:\n      A list of integers representing the list with the highest sum.\n    \"\"\"\n    max_sum = float('-inf')\n    max_sum_list = []\n    for sublist in matrix:\n      current_sum = sum(sublist)\n      if current_sum > max_sum:\n        max_sum = current_sum\n        max_sum_list = sublist\n    return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(nested_list):\n  \"\"\"\n  Finds the list within a list of lists with the highest sum of elements.\n\n  Args:\n    nested_list: A list of lists of integers.\n\n  Returns:\n    The list with the highest sum of elements.\n  \"\"\"\n\n  max_sum = float('-inf')  # Initialize max_sum to negative infinity\n  max_sum_list = []\n  for sublist in nested_list:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list\nnested_list = [[1,2,3], [4,5,6], [10,11,12], [7,8,9]]", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(matrix):\n  \"\"\"\n  Finds the sublist in a list of lists with the highest sum of elements.\n\n  Args:\n      matrix: A list of lists of numbers.\n\n  Returns:\n      A list containing the elements of the sublist with the highest sum.\n  \"\"\"\n  max_sum = float('-inf')\n  max_list = []\n  for sublist in matrix:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_list = sublist\n  return max_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(list_of_lists):\n  \"\"\"\n  Finds the sublist within a list of lists that has the highest sum of elements.\n\n  Args:\n      list_of_lists: A list of lists of numbers.\n\n  Returns:\n      A list containing the elements of the sublist with the highest sum.\n  \"\"\"\n  max_sum = float('-inf')\n  max_sum_list = []\n  for sublist in list_of_lists:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(lst):\n  \"\"\"\n  Returns the list in a list of lists whose sum of elements is the highest.\n\n  Args:\n    lst: A list of lists of integers.\n\n  Returns:\n    The list with the highest sum.\n  \"\"\"\n  max_sum = float('-inf')\n  max_sum_list = []\n  for sublist in lst:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(matrix):\n  \"\"\"\n  Finds the sublist within a list of lists that has the highest sum of elements.\n\n  Args:\n      matrix: A list of lists of integers.\n\n  Returns:\n      A list containing the elements of the sublist with the highest sum.\n  \"\"\"\n  max_sum = float('-inf')  \n  result_list = []\n\n  for sublist in matrix:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      result_list = sublist  \n  return result_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(nested_list):\n  \"\"\"\n  Finds the list within a list of lists that has the highest sum of elements.\n\n  Args:\n    nested_list: A list of lists of numbers.\n\n  Returns:\n    The list with the highest sum.\n  \"\"\"\n  max_sum_list = nested_list[0]  # Initialize with the first list\n  max_sum = sum(max_sum_list) \n\n  for sublist in nested_list:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist \n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(matrix):\n  \"\"\"\n  Finds the list within a list of lists that has the highest sum of elements.\n\n  Args:\n    matrix: A list of lists of integers.\n\n  Returns:\n    The list within the matrix that has the highest sum.\n  \"\"\"\n  max_sum = float('-inf') \n  max_sum_list = []\n  for sublist in matrix:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(matrix):\n  \"\"\"\n  Finds the list within a list of lists that has the highest sum of elements.\n\n  Args:\n    matrix: A list of lists of numbers.\n\n  Returns:\n    The list with the highest sum of elements.\n  \"\"\"\n  max_sum = float('-inf')  \n  result_list = []\n  for sublist in matrix:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      result_list = sublist\n  return result_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(data):\n  \"\"\"\n  Returns the list in a list of lists whose sum of elements is the highest.\n  \n  Args:\n      data: A list of lists of integers.\n  \n  Returns:\n      A list containing the elements of the list with the highest sum.\n  \"\"\"\n  max_sum_list = data[0]\n  max_sum = sum(max_sum_list)\n  for sublist in data:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(list_of_lists):\n  \"\"\"\n  Finds the list within a list of lists that has the highest sum of elements.\n\n  Args:\n      list_of_lists: A list of lists of numbers.\n\n  Returns:\n      The list with the highest sum of elements.\n  \"\"\"\n  max_sum = float('-inf')\n  max_sum_list = []\n  for sublist in list_of_lists:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(list_of_lists):\n  \"\"\"\n  Finds the list in a list of lists with the highest sum of elements.\n\n  Args:\n      list_of_lists: A list of lists of numbers.\n\n  Returns:\n      A list containing the elements of the list with the highest sum.\n  \"\"\"\n\n  max_sum = float('-inf')\n  result = []\n\n  for sublist in list_of_lists:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      result = sublist\n  return result", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(nested_list):\n  \"\"\"\n  Returns the list in a list of lists whose sum of elements is the highest.\n\n  Args:\n    nested_list: A list of lists of integers.\n\n  Returns:\n    A list of integers representing the list with the highest sum.\n  \"\"\"\n  max_sum = float('-inf')\n  max_sum_list = []\n  for sublist in nested_list:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(lst):\n  \"\"\"\n  Finds the list in a list of lists whose sum of elements is the highest.\n\n  Args:\n    lst: A list of lists of numbers.\n\n  Returns:\n    The list with the highest sum.\n  \"\"\"\n  max_sum = float('-inf')\n  max_list = []\n  for sub_list in lst:\n    current_sum = sum(sub_list)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_list = sub_list\n  return max_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(lists):\n    \"\"\"\n    Finds the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lists: A list of lists of numbers.\n\n    Returns:\n        The list with the highest sum.\n    \"\"\"\n    max_sum = float('-inf')  \n    result_list = []\n    for sublist in lists:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            result_list = sublist\n    return result_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(nested_list):\n  \"\"\"\n  Finds the list within a list of lists that has the highest sum of elements.\n\n  Args:\n      nested_list: A list of lists of numbers.\n\n  Returns:\n      A list containing the elements of the list with the highest sum.\n  \"\"\"\n  max_sum = float('-inf')  \n  result = []\n  for sublist in nested_list:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      result = sublist\n  return result", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(list_of_lists):\n  \"\"\"\n  This function returns the list in a list of lists whose sum of elements is the highest.\n\n  Args:\n    list_of_lists: A list of lists of numbers.\n\n  Returns:\n    The list with the highest sum.\n  \"\"\"\n  max_sum_list = list_of_lists[0]  \n  max_sum = sum(max_sum_list)\n  for sublist in list_of_lists:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(nested_list):\n  \"\"\"\n  Finds the sublist within a list of lists that has the highest sum of elements.\n\n  Args:\n    nested_list: A list of lists of numbers.\n\n  Returns:\n    The sublist with the highest sum of elements.\n  \"\"\"\n\n  max_sum = float('-inf')  \n  max_sum_list = []\n  for sublist in nested_list:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n  return max_sum_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(list_of_lists):\n  \"\"\"\n  Finds the sublist within a list of lists that has the highest sum of elements.\n\n  Args:\n      list_of_lists: A list of lists of integers.\n\n  Returns:\n      A list containing the elements of the sublist with the highest sum.\n  \"\"\"\n\n  max_sum = float('-inf')  \n  result_list = []\n  for sublist in list_of_lists:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      result_list = sublist\n  return result_list", "matching_cluster_idx": 4}, {"solution": "def max_sum_list(list_of_lists):\n  \"\"\"\n  Finds the list within a list of lists that has the highest sum of elements.\n\n  Args:\n    list_of_lists: A list of lists of integers.\n\n  Returns:\n    The list with the highest sum of elements.\n  \"\"\"\n  max_sum_list = list_of_lists[0]  # Initialize with the first list\n  max_sum = sum(max_sum_list)  # Calculate the initial maximum sum\n\n  for sublist in list_of_lists:\n    current_sum = sum(sublist)\n    if current_sum > max_sum:\n      max_sum = current_sum\n      max_sum_list = sublist\n\n  return max_sum_list", "matching_cluster_idx": 4}]}, "Mbpp/808": {"dps": 100.0, "dps_norm": 100.0, "pass@1": 100.0, "profiled": [{"solution": "def check_K(tup, k):\n  \"\"\"\n  Check if the given tuples contain the k or not.\n\n  Args:\n    tup: A tuple of numbers.\n    k: An integer to search for in the tuple.\n\n  Returns:\n    True if k is present in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tuple_data, k):\n  \"\"\"\n  Check if the given tuples contain the k or not.\n  \n  Args:\n      tuple_data: The input tuple.\n      k: The value to search for.\n\n  Returns:\n      True if k is present in the tuple, False otherwise.\n  \"\"\"\n  return k in tuple_data", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if the given tuple contains the element 'k'.\n\n  Args:\n      tup: A tuple of numbers.\n      k: An integer to search for in the tuple.\n\n  Returns:\n      True if 'k' is in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if a tuple contains the value k.\n\n  Args:\n      tup: The tuple to search.\n      k: The value to search for.\n\n  Returns:\n      True if k is in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if the given tuple contains the value k.\n\n  Args:\n    tup: The tuple to search.\n    k: The value to search for.\n\n  Returns:\n    True if k is in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(nums, k):\n  \"\"\"\n  Checks if a tuple contains a given element.\n\n  Args:\n      nums: A tuple of numbers.\n      k: The element to check for.\n\n  Returns:\n      True if the tuple contains k, False otherwise.\n  \"\"\"\n  return k in nums", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if a tuple contains the value k.\n\n  Args:\n    tup: A tuple of numbers.\n    k: An integer to search for in the tuple.\n\n  Returns:\n    True if k is found in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(nums, k):\n  \"\"\"\n  Checks if a tuple contains the given value k.\n\n  Args:\n    nums: The tuple to search.\n    k: The value to search for.\n\n  Returns:\n    True if the tuple contains k, False otherwise.\n  \"\"\"\n  return k in nums", "matching_cluster_idx": 5}, {"solution": "def check_K(data, k):\n  \"\"\"\n  Checks if the given tuples contain the k or not.\n\n  Args:\n    data: A tuple of numbers.\n    k: An integer to search for in the tuple.\n\n  Returns:\n    True if k is present in the tuple, False otherwise.\n  \"\"\"\n  return k in data", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if a tuple contains the element k.\n\n  Args:\n      tup: The tuple to search within.\n      k: The element to search for.\n\n  Returns:\n      True if k is in tup, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if the given tuples contain the k or not.\n\n  Args:\n    tup: A tuple of numbers.\n    k: The number to search for in the tuple.\n\n  Returns:\n    True if k is present in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if a tuple contains a given value 'k'.\n\n  Args:\n      tup: The tuple to search.\n      k: The value to search for.\n\n  Returns:\n      True if 'k' is in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if the given tuple contains the value k.\n\n  Args:\n    tup: A tuple of integers.\n    k: An integer to search for in the tuple.\n\n  Returns:\n    True if k is found in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if the given tuple contains the element k.\n\n  Args:\n    tup: The tuple to search.\n    k: The element to search for.\n\n  Returns:\n    True if k is in the tuple, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tup (tuple): The tuple to search.\n        k (int): The value to search for.\n\n    Returns:\n        bool: True if k is present in the tuple, False otherwise.\n    \"\"\"\n    return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(input_tuple, k):\n  \"\"\"\n  Check if the given tuples contain the k or not.\n  \"\"\"\n  return k in input_tuple", "matching_cluster_idx": 5}, {"solution": "def check_K(tuple1, k):\n    \"\"\"\n    Checks if a given tuple contains the value k.\n\n    Args:\n        tuple1: The tuple to search within.\n        k: The value to search for.\n\n    Returns:\n        True if k is present in tuple1, False otherwise.\n    \"\"\"\n    return k in tuple1", "matching_cluster_idx": 5}, {"solution": "def check_K(tup, k):\n  \"\"\"\n  Checks if the given tuples contain the k or not.\n\n  Args:\n      tup: A tuple.\n      k: An integer.\n\n  Returns:\n      True if the tuple contains k, False otherwise.\n  \"\"\"\n  return k in tup", "matching_cluster_idx": 5}, {"solution": "def check_K(tuple1, k):\n  \"\"\"\n  Checks if a tuple contains the value 'k'.\n\n  Args:\n    tuple1: The tuple to search.\n    k: The value to search for.\n\n  Returns:\n    True if 'k' is in the tuple, False otherwise.\n  \"\"\"\n  return k in tuple1", "matching_cluster_idx": 5}, {"solution": "def check_K(t, k):\n  \"\"\"\n  Checks if the given tuples contain the k or not.\n\n  Args:\n    t: The tuple to search in.\n    k: The element to search for.\n\n  Returns:\n    True if k is in the tuple, False otherwise.\n  \"\"\"\n  return k in t", "matching_cluster_idx": 5}]}}}
